{"title":"iOS IAP编程","uid":"764f313455c7e408a84478db15d0ac63","slug":"iOS-IAP编程","date":"2016-08-08T15:00:04.000Z","updated":"2019-05-14T04:53:32.000Z","comments":true,"path":"api/articles/iOS-IAP编程.json","keywords":null,"cover":[],"content":"<p>#协议</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap1.png\"></p>\n<span id=\"more\"></span>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap2.jpg\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap3.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap4.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap5.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap6.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap7.jpg\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap8.jpg\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap9.jpg\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap10.png\"></p>\n<p><img src=\"https://e.czbank.com/CORPORBANK/query_unionBank_index.jsp\" alt=\"CNAPS CODE 查询地址\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap11.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap12.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap13.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap14.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap15.jpg\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap16.jpg\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap17.jpg\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap18.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap19.png\"></p>\n<p>#创建内购项目</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap20.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap21.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap22.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap23.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap24.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap25.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap26.png\"></p>\n<p>#添加内购项目测试账号</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap27.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledeveloperiap28.png\"></p>\n<p>#实现代码</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">首先导入StoreKit.framework库\n\n.h文件\n\n#define kSandboxVerifyURL @&quot;https:&#x2F;&#x2F;sandbox.itunes.apple.com&#x2F;verifyReceipt&quot; &#x2F;&#x2F;开发阶段沙盒验证URL\n#define kAppStoreVerifyURL @&quot;https:&#x2F;&#x2F;buy.itunes.apple.com&#x2F;verifyReceipt&quot; &#x2F;&#x2F;实际购买验证URL\n#import &lt;StoreKit&#x2F;StoreKit.h&gt;\n\n\n\n\nenum&#123;\n    IAP0p20&#x3D;20,\n\tIAP1p100,\n\tIAP4p600,\n\tIAP9p1000,\n\tIAP24p6000,\n&#125;buyCoinsTag;\n\n\n\n\n\n&#x2F;&#x2F;代理\n@interface RechargeVC : UIViewController &lt;SKPaymentTransactionObserver,SKProductsRequestDelegate &gt;\n&#123;\nint buyType;&#125;\n\n- (void) requestProUpgradeProductData;\n\n-(void)RequestProductData;\n\n-(void)buy:(int)type;\n\n- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions;\n\n\n-(void) PurchasedTransaction: (SKPaymentTransaction *)transaction;\n\n\n- (void) completeTransaction: (SKPaymentTransaction *)transaction;\n\n\n- (void) failedTransaction: (SKPaymentTransaction *)transaction;\n\n\n-(void) paymentQueueRestoreCompletedTransactionsFinished: (SKPaymentTransaction *)transaction;\n\n\n-(void) paymentQueue:(SKPaymentQueue *) paymentQueue restoreCompletedTransactionsFailedWithError:(NSError *)error;\n\n\n\n- (void) restoreTransaction: (SKPaymentTransaction *)transaction;\n\n\n-(void)provideContent:(NSString *)product;\n\n\n-(void)recordTransaction:(NSString *)product;\n\n\n@end\n.m文件\n\n#import &quot;RechargeVC.h&quot;\n\n\n&#x2F;&#x2F;在内购项目中创的商品单号\n#define ProductID_IAP0p20 @&quot;Nada.JPYF01&quot;&#x2F;&#x2F;20\n#define ProductID_IAP1p100 @&quot;Nada.JPYF02&quot; &#x2F;&#x2F;100\n#define ProductID_IAP4p600 @&quot;Nada.JPYF03&quot; &#x2F;&#x2F;600\n#define ProductID_IAP9p1000 @&quot;Nada.JPYF04&quot; &#x2F;&#x2F;1000\n#define ProductID_IAP24p6000 @&quot;Nada.JPYF05&quot; &#x2F;&#x2F;6000\n\n\n\n@interface RechargeVC ()\n\n@end\n\n\n@implementation RechargeVC\n\n\n- (void)viewDidLoad &#123;\n\n    [super viewDidLoad];\n\n    [[SKPaymentQueue defaultQueue] addTransactionObserver:self];\n    [self buy:IAP0p20];\n\n&#125;\n\n\n-(void)buy:(int)type\n&#123;\n    buyType &#x3D; type;\n    if ([SKPaymentQueue canMakePayments]) &#123;\n    [self RequestProductData];\n    NSLog(@&quot;允许程序内付费购买&quot;);\n&#125;\nelse\n&#123;\n    NSLog(@&quot;不允许程序内付费购买&quot;);\n    UIAlertView *alerView &#x3D;  [[UIAlertView alloc] initWithTitle:@&quot;提示&quot;\n    message:@&quot;您的手机没有打开程序内付费购买&quot;\n    delegate:nil cancelButtonTitle:NSLocalizedString(@&quot;关闭&quot;,nil) otherButtonTitles:nil];\n\n    [alerView show];\n\n\n    &#125;\n&#125;\n\n-(void)RequestProductData\n&#123;\n    NSLog(@&quot;---------请求对应的产品信息------------&quot;);\n    NSArray *product &#x3D; nil;\n    switch (buyType) &#123;\n        case IAP0p20:\n        product&#x3D;[[NSArray alloc] initWithObjects:ProductID_IAP0p20,nil];\n        break;\n        case IAP1p100:\n        product&#x3D;[[NSArray alloc] initWithObjects:ProductID_IAP1p100,nil];\n        break;\n        case IAP4p600:\n        product&#x3D;[[NSArray alloc] initWithObjects:ProductID_IAP4p600,nil];\n        break;\n        case IAP9p1000:\n        product&#x3D;[[NSArray alloc] initWithObjects:ProductID_IAP9p1000,nil];\n        break;\n        case IAP24p6000:\n        product&#x3D;[[NSArray alloc] initWithObjects:ProductID_IAP24p6000,nil];\n        break;\n\n        default:\n        break;\n&#125;\nNSSet *nsset &#x3D; [NSSet setWithArray:product];\nSKProductsRequest *request&#x3D;[[SKProductsRequest alloc] initWithProductIdentifiers: nsset];\n\nrequest.delegate&#x3D;self;\n[request start];\n\n&#125;\n\n&#x2F;&#x2F;&lt;SKProductsRequestDelegate&gt; 请求协议\n&#x2F;&#x2F;收到的产品信息\n- (void)productsRequest:(SKProductsRequest *)request didReceiveResponse:(SKProductsResponse *)response&#123;\n\n    NSLog(@&quot;-----------收到产品反馈信息--------------&quot;);\n    NSArray *myProduct &#x3D; response.products;\n    NSLog(@&quot;产品Product ID:%@&quot;,response.invalidProductIdentifiers);\n    NSLog(@&quot;产品付费数量: %d&quot;, (int)[myProduct count]);\n    &#x2F;&#x2F; populate UI\n    for(SKProduct *product in myProduct)&#123;\n    NSLog(@&quot;product info&quot;);\n    NSLog(@&quot;SKProduct 描述信息%@&quot;, [product description]);\n    NSLog(@&quot;产品标题 %@&quot; , product.localizedTitle);\n    NSLog(@&quot;产品描述信息: %@&quot; , product.localizedDescription);\n    NSLog(@&quot;价格: %@&quot; , product.price);\n    NSLog(@&quot;Product id: %@&quot; , product.productIdentifier);\n&#125;\nSKPayment *payment &#x3D; nil;\nswitch (buyType) &#123;\n        case IAP0p20:\n        payment  &#x3D; [SKPayment paymentWithProductIdentifier:ProductID_IAP0p20];    &#x2F;&#x2F;支付25\n        break;\n        case IAP1p100:\n        payment  &#x3D; [SKPayment paymentWithProductIdentifier:ProductID_IAP1p100];    &#x2F;&#x2F;支付108\n        break;\n        case IAP4p600:\n        payment  &#x3D; [SKPayment paymentWithProductIdentifier:ProductID_IAP4p600];    &#x2F;&#x2F;支付618\n        break;\n        case IAP9p1000:\n        payment  &#x3D; [SKPayment paymentWithProductIdentifier:ProductID_IAP9p1000];    &#x2F;&#x2F;支付1048\n        break;\n        case IAP24p6000:\n        payment  &#x3D; [SKPayment paymentWithProductIdentifier:ProductID_IAP24p6000];    &#x2F;&#x2F;支付5898\n        break;\n        default:\n        break;\n&#125;\nNSLog(@&quot;---------发送购买请求------------&quot;);\n[[SKPaymentQueue defaultQueue] addPayment:payment];\n\n&#125;\n- (void)requestProUpgradeProductData\n&#123;\n    NSLog(@&quot;------请求升级数据---------&quot;);\n    NSSet *productIdentifiers &#x3D; [NSSet setWithObject:@&quot;com.productid&quot;];\n    SKProductsRequest* productsRequest &#x3D; [[SKProductsRequest alloc] initWithProductIdentifiers:productIdentifiers];\n    productsRequest.delegate &#x3D; self;\n    [productsRequest start];\n\n&#125;\n&#x2F;&#x2F;弹出错误信息\n- (void)request:(SKRequest *)request didFailWithError:(NSError *)error&#123;\n    NSLog(@&quot;-------弹出错误信息----------&quot;);\n    UIAlertView *alerView &#x3D;  [[UIAlertView alloc] initWithTitle:NSLocalizedString(@&quot;Alert&quot;,NULL) message:[error localizedDescription]\n    delegate:nil cancelButtonTitle:NSLocalizedString(@&quot;Close&quot;,nil) otherButtonTitles:nil];\n    [alerView show];\n\n&#125;\n\n-(void) requestDidFinish:(SKRequest *)request\n&#123;\n    NSLog(@&quot;----------反馈信息结束--------------&quot;);\n\n&#125;\n\n-(void) PurchasedTransaction: (SKPaymentTransaction *)transaction&#123;\n    NSLog(@&quot;-----PurchasedTransaction----&quot;);\n    NSArray *transactions &#x3D;[[NSArray alloc] initWithObjects:transaction, nil];\n    [self paymentQueue:[SKPaymentQueue defaultQueue] updatedTransactions:transactions];\n&#125;\n\n&#x2F;&#x2F;&lt;SKPaymentTransactionObserver&gt; 千万不要忘记绑定，代码如下：\n&#x2F;&#x2F;----监听购买结果\n&#x2F;&#x2F;[[SKPaymentQueue defaultQueue] addTransactionObserver:self];\n\n- (void)paymentQueue:(SKPaymentQueue *)queue updatedTransactions:(NSArray *)transactions&#x2F;&#x2F;交易结果\n&#123;\n    NSLog(@&quot;-----paymentQueue--------&quot;);\n    for (SKPaymentTransaction *transaction in transactions)\n    &#123;\n        switch (transaction.transactionState)\n        &#123;\n            case SKPaymentTransactionStatePurchased:&#123;&#x2F;&#x2F;交易完成\n            [self completeTransaction:transaction];\n            NSLog(@&quot;-----交易完成 --------&quot;);\n            &#x2F;&#x2F;购买成功后进行验证\n            [self verifyPurchaseWithPaymentTransaction];\n\n        &#125; break;\n        case SKPaymentTransactionStateFailed:&#x2F;&#x2F;交易失败\n            &#123; [self failedTransaction:transaction];\n            NSLog(@&quot;-----交易失败 --------&quot;);\n            UIAlertView *alerView2 &#x3D;  [[UIAlertView alloc] initWithTitle:@&quot;提示&quot;\n            message:@&quot;购买失败，请重新尝试购买&quot;\n            delegate:nil cancelButtonTitle:NSLocalizedString(@&quot;关闭&quot;,nil) otherButtonTitles:nil];\n\n            [alerView2 show];\n\n        &#125;break;\n        case SKPaymentTransactionStateRestored:&#x2F;&#x2F;已经购买过该商品\n            [self restoreTransaction:transaction];\n            NSLog(@&quot;-----已经购买过该商品 --------&quot;);\n            case SKPaymentTransactionStatePurchasing:      &#x2F;&#x2F;商品添加进列表\n            NSLog(@&quot;-----商品添加进列表 --------&quot;);\n            break;\n            default:\n            break;\n        &#125;\n    &#125;\n&#125;\n\n&#x2F;**\n*  验证购买，避免越狱软件模拟苹果请求达到非法购买问题\n*\n*&#x2F;\n-(void)verifyPurchaseWithPaymentTransaction&#123;\n    &#x2F;&#x2F;从沙盒中获取交易凭证并且拼接成请求体数据\n    NSURL *receiptUrl&#x3D;[[NSBundle mainBundle] appStoreReceiptURL];\n    NSData *receiptData&#x3D;[NSData dataWithContentsOfURL:receiptUrl];\n\n    NSString *receiptString&#x3D;[receiptData base64EncodedStringWithOptions:NSDataBase64EncodingEndLineWithLineFeed];&#x2F;&#x2F;转化为base64字符串\n\n    NSString *bodyString &#x3D; [NSString stringWithFormat:@&quot;&#123;\\&quot;receipt-data\\&quot; : \\&quot;%@\\&quot;&#125;&quot;, receiptString];&#x2F;&#x2F;拼接请求数据\n    NSData *bodyData &#x3D; [bodyString dataUsingEncoding:NSUTF8StringEncoding];\n\n    &#x2F;&#x2F;创建请求到苹果官方进行购买验证\n    NSURL *url&#x3D;[NSURL URLWithString:kSandboxVerifyURL];\n    NSMutableURLRequest *requestM&#x3D;[NSMutableURLRequest requestWithURL:url];\n    requestM.HTTPBody&#x3D;bodyData;\n    requestM.HTTPMethod&#x3D;@&quot;POST&quot;;\n    &#x2F;&#x2F;创建连接并发送同步请求\n    NSError *error&#x3D;nil;\n    NSData *responseData&#x3D;[NSURLConnection sendSynchronousRequest:requestM returningResponse:nil error:&amp;error];\n    if (error) &#123;\n        NSLog(@&quot;验证购买过程中发生错误，错误信息：%@&quot;,error.localizedDescription);\n        return;\n    &#125;\n    NSDictionary *dic&#x3D;[NSJSONSerialization JSONObjectWithData:responseData options:NSJSONReadingAllowFragments error:nil];\n    NSLog(@&quot;%@&quot;,dic);\n    if([dic[@&quot;status&quot;] intValue]&#x3D;&#x3D;0)&#123;\n        NSLog(@&quot;购买成功！&quot;);\n        NSDictionary *dicReceipt&#x3D; dic[@&quot;receipt&quot;];\n        NSDictionary *dicInApp&#x3D;[dicReceipt[@&quot;in_app&quot;] firstObject];\n        NSString *productIdentifier&#x3D; dicInApp[@&quot;product_id&quot;];&#x2F;&#x2F;读取产品标识\n        &#x2F;&#x2F;如果是消耗品则记录购买数量，非消耗品则记录是否购买过\n        NSUserDefaults *defaults&#x3D;[NSUserDefaults standardUserDefaults];\n        if ([productIdentifier isEqualToString:kProductID3]) &#123;\n            int purchasedCount&#x3D;[defaults integerForKey:productIdentifier];&#x2F;&#x2F;已购买数量\n            [[NSUserDefaults standardUserDefaults] setInteger:(purchasedCount+1) forKey:productIdentifier];\n        &#125;else&#123;\n            [defaults setBool:YES forKey:productIdentifier];\n        &#125;\n        [self.tableView reloadData];\n        &#x2F;&#x2F;在此处对购买记录进行存储，可以存储到开发商的服务器端\n    &#125;else&#123;\n        NSLog(@&quot;购买失败，未通过验证！&quot;);\n    &#125;\n&#125;\n\n- (void) completeTransaction: (SKPaymentTransaction *)transaction\n\n&#123;\n    NSLog(@&quot;-----completeTransaction--------&quot;);\n    &#x2F;&#x2F; Your application should implement these two methods.\n    NSString *product &#x3D; transaction.payment.productIdentifier;\n    if ([product length] &gt; 0) &#123;\n\n    NSArray *tt &#x3D; [product componentsSeparatedByString:@&quot;.&quot;];\n    NSString *bookid &#x3D; [tt lastObject];\n    if ([bookid length] &gt; 0) &#123;\n    [self recordTransaction:bookid];\n    [self provideContent:bookid];\n&#125;\n&#125;\n\n    &#x2F;&#x2F; Remove the transaction from the payment queue.\n\n    [[SKPaymentQueue defaultQueue] finishTransaction: transaction];\n\n&#125;\n\n&#x2F;&#x2F;记录交易\n-(void)recordTransaction:(NSString *)product&#123;\n    NSLog(@&quot;-----记录交易--------&quot;);\n&#125;\n\n&#x2F;&#x2F;处理下载内容\n-(void)provideContent:(NSString *)product&#123;\n    NSLog(@&quot;-----下载--------&quot;);\n&#125;\n\n- (void) failedTransaction: (SKPaymentTransaction *)transaction&#123;\n    NSLog(@&quot;失败&quot;);\n    if (transaction.error.code !&#x3D; SKErrorPaymentCancelled)\n    &#123;\n\n    &#125;\n    [[SKPaymentQueue defaultQueue] finishTransaction: transaction];\n\n&#125;\n-(void) paymentQueueRestoreCompletedTransactionsFinished: (SKPaymentTransaction *)transaction&#123;\n\n&#125;\n\n- (void) restoreTransaction: (SKPaymentTransaction *)transaction\n&#123;\n    NSLog(@&quot; 交易恢复处理&quot;);\n\n&#125;\n\n-(void) paymentQueue:(SKPaymentQueue *) paymentQueue restoreCompletedTransactionsFailedWithError:(NSError *)error&#123;\n    NSLog(@&quot;-------paymentQueue----&quot;);\n&#125;\n\n#pragma mark connection delegate\n- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data\n&#123;\n    NSLog(@&quot;%@&quot;,  [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding]);\n&#125;\n- (void)connectionDidFinishLoading:(NSURLConnection *)connection&#123;\n\n&#125;\n\n- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response&#123;\n    switch([(NSHTTPURLResponse *)response statusCode]) &#123;\n        case 200:\n        case 206:\n        break;\n        case 304:\n        break;\n        case 400:\n        break;\n        case 404:\n        break;\n        case 416:\n        break;\n        case 403:\n        break;\n        case 401:\n        case 500:\n        break;\n        default:\n        break;\n    &#125;\n&#125;\n\n- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error &#123;\n    NSLog(@&quot;test&quot;);\n&#125;\n\n-(void)dealloc\n&#123;\n    [[SKPaymentQueue defaultQueue] removeTransactionObserver:self];&#x2F;&#x2F;解除监听\n\n&#125;\n\n@end</code></pre>","text":"#协议 #创建内购项目 #添加内购项目测试账号 #实现代码 首先导入StoreKit.framework库 .h文件 #define kSandboxVerifyURL @&quot;https:&#x2F;&#x2F;sandbox.itunes.apple.com&#x2F;...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"iOS SDK","slug":"iOS-SDK","count":18,"path":"api/categories/iOS-SDK.json"}],"tags":[{"name":"IAP","slug":"IAP","count":1,"path":"api/tags/IAP.json"}],"toc":"","author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}},"mapped":true,"prev_post":{"title":"CFNetwork 编程指南之一: 概览","uid":"a230e0658132bd7e51140146dce14c4f","slug":"CFNetwork-编程指南之一-概览","date":"2016-08-10T03:56:09.000Z","updated":"2016-08-19T08:33:23.000Z","comments":true,"path":"api/articles/CFNetwork-编程指南之一-概览.json","keywords":null,"cover":null,"text":"CFNetwork是核心服务框架中的一个框架，提供了抽象概念的网络协议库。这些抽象概念使得执行各种网络任务变得更容易，例如： 使用BSD套接字 使用SSL或TLS创建加密连接 解析DNS主机 使用HTTP，验证HTTP和HTTP服务器 使用FTP服务器 发布、解析和浏览Bonjo...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"iOS网络编程","slug":"iOS网络编程","count":9,"path":"api/categories/iOS网络编程.json"}],"tags":[{"name":"CFNetwork","slug":"CFNetwork","count":7,"path":"api/tags/CFNetwork.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}},"next_post":{"title":"iOS App上架流程","uid":"0be78fce7ff14abe5dd400a8b201abea","slug":"iOS-App-上架流程","date":"2016-08-08T14:16:57.000Z","updated":"2019-05-14T04:53:34.000Z","comments":true,"path":"api/articles/iOS-App-上架流程.json","keywords":null,"cover":[],"text":"准备条件: 1.一个已付费的开发者账号（账号类型分为个人（Individual）、公司（Company）、企业（Enterprise）、高校（University）四种类型，每年资费分别为$99、$99、$299、免费。）。2.你的Xcode必须是正式版的. 打开苹果开发者中心：...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"iOS SDK","slug":"iOS-SDK","count":18,"path":"api/categories/iOS-SDK.json"}],"tags":[{"name":"iOS上架App Store","slug":"iOS上架App-Store","count":1,"path":"api/tags/iOS上架App-Store.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}}}