{"title":"awakeFromNib 整理摘录","uid":"e6105bfb53c66c2464c788c0813cc873","slug":"awakeFromNib-整理摘录","date":"2017-10-24T08:18:48.000Z","updated":"2017-10-24T08:19:33.000Z","comments":true,"path":"api/articles/awakeFromNib-整理摘录.json","keywords":null,"cover":null,"content":"<p>（1）awakeFromNib和initWithCoder:差别<br>awakeFromNib 从xib或者storyboard加载完毕就会调用<br>initWithCoder: 只要对象是从文件解析来的，就会调用<br>同时存在会先调用initWithCoder:</p>\n<p>（2）initWithCoder: &amp; initWithFrame:<br>initWithCoder：使用文件加载的对象调用（如从xib或stroyboard中创建）<br>initWithFrame：使用代码加载的对象调用（使用纯代码创建）<br>注意：所以为了同时兼顾从文件和从代码解析的对象初始化，要同时在initWithCoder: 和 initWithFrame: 中进行初始化</p>\n<p>nib 加载结构时 发送一个awakeFromNib消息告诉每个对象重建一个nib 归档，但只有在所有的档案中的对象已加载和初始化。当一个对象接收awakefromnibmessage，这是保证其所有出口和行动连接已经建立。</p>\n<p>你必须调用awakefromnib super实施给父类的运行的机会去做额外的初始化工作。虽然这种方法的默认实现不执行任何操作，许多UIKit类提供非空的实现。你可以叫super 实现在任何一点你自己的awakefromnib方法里。</p>\n<p>实例化过程中，存档中的每个对象未归档然后初始化的方法适合于它的类型。符合nscoding协议对象（包括所有子类和处理）正在用他们的initwithcoder初始化：方法。不符合nscoding协议所有的对象都是使用init方法初始化。在所有对象被实例化和初始化，the nib 加载代码，将所有这些对象的出口和动作的连接。然后调用对象的awakefromnib方法。更详细的信息有关的步骤，然后nib在加载过程中，看到“NIB文件”在资源规划指南。</p>\n<p>// 先归档方法<br>-(id)initWithCoder:(NSCoder *)aDecoder<br>{<br>self = [super initWithCoder:aDecoder];<br>if (self) {<br>}<br>return self;<br>}<br>// 保证出口和行动连接已经建立 调用 awakeFromNib<br>-(void)awakeFromNib<br>{<br>[super awakeFromNib];<br>}</p>\n<p>NIB文件是应用程序所有对象的存档。当程序启动后，对象从文件中释放，重新赋予生命，准备接收用户触发的事件信息。这种机制有些与众不同：大多数GUI的设计都是为界面布局产生源代码；相反，Interface Builder则允许开发者编辑好页面元素的状态后，把它们保存在文件里面。在对象从文件中释放、获得生命，而没有接收到用户事件以前，所有的对象自动发送awakeFromNib消息。开发者可以添加awakeFromNib方法，用来初始化文本框的值。</p>\n<p>parm mark 2</p>\n<p>-(void)awakeFromNib;从字面上理解，就是从nib文件中唤醒对象，完成对每一个对象的实例化或与nib文件的关联。<br>谁唤醒这个方法？</p>\n<p>awakeFromNib是由nib loading machinery发出的。[NSBundle loadNibFile:externalNameTable:withZone:],加载nib文件，完成初始化设置和连接，并且在所有关联的对象上唤醒awakeFromNib方法。</p>\n<p>谁响应这个方法？</p>\n<p>Cunstom Controller 和Cunstom Window都会响应awakeFromNib方法。当一个nib文件已经完成所有对象的加载之后，会对每一个与nib文件关联的对象loop back。此时，如果awakeFromNib方法中有需要响应的对象，它就会在该对象上唤起awakeFromNib方法。因此，我们可以在awakeFromNib方法中操作任何甚至所有的nib中的对象。</p>\n<p>需要注意的问题：<br>当使用一个controller控制多个nib文件时，awakeFromNib方法会被多次调用。因此，当不使用awakeFromNib方法来完成nib对象的初始化时，需要注意此方法的多次调用对其他nib文件造成的影响。</p>\n","text":"（1）awakeFromNib和initWithCoder:差别awakeFromNib 从xib或者storyboard加载完毕就会调用initWithCoder: 只要对象是从文件解析来的，就会调用同时存在会先调用initWithCoder: （2）initWithCoder...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"iOS SDK","slug":"iOS-SDK","count":19,"path":"api/categories/iOS-SDK.json"}],"tags":[],"toc":"","author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}},"mapped":true,"prev_post":{"title":"iOS常用图像格式转换","uid":"834d577630ee02b50ec7eb6df43a4285","slug":"iOS常用图像格式转换","date":"2017-10-24T08:20:00.000Z","updated":"2017-10-24T08:21:03.000Z","comments":true,"path":"api/articles/iOS常用图像格式转换.json","keywords":null,"cover":null,"text":"在iOS多媒体开发时，需要经常转换图像格式以便调试。下面列了一些常用工具方法，在UIImage, CVPixelBufferRef,Texture之间完成格式转换。 其他格式转为UIImage 1.1 CVImageBufferRef (RGB)转为UIImage (UIImag...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[],"tags":[],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}},"next_post":{"title":"理解霍夫变换(Python 版本)","uid":"6753553a886a9bb3c92807f1b53f3789","slug":"理解霍夫变换-Python-版本","date":"2017-07-21T06:22:25.000Z","updated":"2017-07-21T06:24:37.000Z","comments":true,"path":"api/articles/理解霍夫变换-Python-版本.json","keywords":null,"cover":null,"text":"https://alyssaq.github.io/2014/understanding-hough-transform/ https://zh.wikipedia.org/wiki/霍夫变换 ","link":"","photos":[],"count_time":{"symbolsCount":97,"symbolsTime":"1 mins."},"categories":[{"name":"Self-Driving Car Engieer","slug":"Self-Driving-Car-Engieer","count":1,"path":"api/categories/Self-Driving-Car-Engieer.json"}],"tags":[{"name":"opencv","slug":"opencv","count":1,"path":"api/tags/opencv.json"},{"name":"Hough Transform","slug":"Hough-Transform","count":1,"path":"api/tags/Hough-Transform.json"},{"name":"python","slug":"python","count":1,"path":"api/tags/python.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}}}