{"title":"HomeKit 编程实例","uid":"10bb0d48f3c88565c60ee94c3f8f9c4f","slug":"HomeKit编程实例","date":"2016-08-10T10:20:01.000Z","updated":"2019-05-14T05:04:18.000Z","comments":true,"path":"api/articles/HomeKit编程实例.json","keywords":null,"cover":[],"content":"<!-- MFI (Made for iPod,Made for iPhone ,and Made for iPad) 认证是指 连接iPod,iPhone,iPad而特别设计的电子配件.并且这些配件已经被苹果公司授权认证,以此来满足苹果产品的性能标准. -->\n\n<p>#HomeKit智能家居平台</p>\n<p>随着物联网技术的发展,构建智能家居的技术越来越成熟,苹果公司制定了HomeKit智能家居平台硬件规格标准,第三方设备制造商将可以为苹果设备推出大量智能家居产品.设备商都必须参加MFI 授权计划,并严格遵守此前公布的硬件规格要求.</p>\n<p>HomeKit 硬件标准涵盖了包括蓝牙低功耗连接,WiFi连接和安全等规格设计,目前HomeKit只能家居设备包括风扇,车库门,电灯,锁,电源插座,数字开关和韩文琦等家用设备.</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/into_diagram_2x.png\"></p>\n<span id=\"more\"></span>\n<p>#HomeKit 开发框架<br>苹果公司给出了HomeKit 平台标准的同时给出了基于HomeKit开发框架 HomeKit.framework. 通过HomeKit框架可以开发基于苹果的设备客户端程序,开发人员不需要关系具体的配件的固件信息,不要关心如何与配件进行通信.HomeKit框架使智能家居的应用开发更加轻松,更加简单.</p>\n<p>#HomeKit 术语</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.Homes:家庭,用户可以有多个家庭,例如城市的商品房,郊外的别墅.<br> 2.Rooms:家庭中的房间,例如卧室,客厅和厨房等,一个家庭中有多个房间(比如两室一厅).<br> 3.Accessories:外部配件,它是实际智能家居配件,比如电风扇,车库门,电灯,油烟机.这些配件被安装在家庭中,并且又被分配给某个房间.<br> 4.Services:服务,是由配件提供的给用户控制的服务,比如电风扇的电源,电灯的亮度,油烟机的风速大小等.单个配件可以有多个控制服务.<br> 5.Zones: 区域,在家庭中可以对房间进行分组.这样便于控制.比如一楼的房间,孩子们的房间等.</p></blockquote>\n<p>这些术语对应的对象,在创建的时候需要指定一个唯一的名字,这个名字不仅仅在程序中使用,还可以通过Siri 发出命令,进行语音控制.</p>\n<p>HomeKit API<br>HomeKit 提供了智能家居开发所需的类和协议:</p>\n<p>主要类:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.HMHomeManager:HMHomeManager对象管理一个或者多个家庭集合.<br> 2.HMHome:HMHome对象允许在家庭中安装配件已经进行通信.<br> 3.HMRoom:HMRoom对象被用来代表家庭的一个房间<br> 4.HMAccessory:HMAccessory对象代表一个智能家居配件,比如灯,恒温器<br> 5.HMAccessoryBrowser:HMAccessoryBrowser对象代表一个用来发现新配件的网络浏览器<br> 6.HMService:HMService对象代表提供的服务<br> 7.HMServiceGroup:HMServiceGroup对象代表配件提供的服务的集合,可以将多个服务当做一个实体处理.<br> 8.HMCharacteristic:HMCharacteristic对象代表某个服务的特性,比如灯打开.<br> 9.HMZone:HMZone对象代表一个家庭的集合区域.</p></blockquote>\n<p>主要协议:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.HMHomeManagerDelegate:这个协议定义了HMHomeManager代理对象的接口<br> 2.HMHomeDelegate:该协议定义了家庭委托对象的接口<br> 3.HMAccessoryDelegate:该协议定义配件委托对象的接口,当配件状态更新时回调噶协议方法.<br> 4.HMAccessoryBrowserDelegate:HMAccessoryBrowser委托对象的接口,当发现了新的配件回调改协议方法.</p></blockquote>\n<p>#HomeKit 编程</p>\n<p>HomeKit编程的流程:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.创建家庭<br>2.添加房间到家庭<br>3.查找配件<br>4.在家庭中安装配件<br>5.分配配件到家庭<br>6.从配件中找到服务<br>7.从服务中找到特征<br>8.通过特征读写配件状态*</p></blockquote>\n<p>上述流程分为两个阶段,1.创建家庭和房间,2.配件查找和控制.<br>创建家庭和房间包括:1,2.<br>配件查找和控制包括:3,4,5,6,7,8</p>\n<p>#实例:Philips Light bulb 控制设计</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming1.png\"></p>\n<p>##配置Xcode 工程<br>创建Philips Light bulb 的工程,开启HomeKit功能呢<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming2-1.png\"></p>\n<p>##核心代码</p>\n<p><code>ViewController.swift</code></p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">import UIKit\nimport HomeKit\n\nclass ViewController: UITableViewController &#123;\n    &#x2F;&#x2F;家庭管理者\n    var homeManager &#x3D; HMHomeManager()\n\n    override func viewDidLoad() &#123;\n        super.viewDidLoad()\n        self.homeManager.delegate &#x3D; self\n        self.navigationItem.leftBarButtonItem &#x3D; editButtonItem\n    &#125;\n    \n    override func viewDidAppear(_ animated: Bool) &#123;\n        super.viewDidAppear(animated)\n        tableView.reloadData()\n    &#125;\n    override func didReceiveMemoryWarning() &#123;\n        super.didReceiveMemoryWarning()\n        &#x2F;&#x2F; Dispose of any resources that can be recreated.\n    &#125;\n&#125;\n\n&#x2F;&#x2F; MARK: - UITableViewDelegate\nextension ViewController&#123;\n    \n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) &#123;\n        if editingStyle &#x3D;&#x3D; .delete &#123;\n            &#x2F;&#x2F;获取home\n            let home &#x3D; homeManager.homes[(indexPath as NSIndexPath).row]\n            homeManager.removeHome(home, completionHandler: &#123; (error) -&gt; Void in\n                if error !&#x3D; nil &#123;\n                    print(error)\n                &#125; else  &#123;\n                    tableView.deleteRows(at: [indexPath], with: .automatic)\n                &#125;\n            &#125;)\n        &#125;\n    &#125;\n&#125;\n&#x2F;&#x2F; MARK: - UITableViewDataSource\nextension ViewController&#123;\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123;\n        return homeManager.homes.count\n    &#125;\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123;\n        \n        let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;, for: indexPath)\n        \n        let home &#x3D; homeManager.homes[(indexPath as NSIndexPath).row]\n        cell.textLabel!.text &#x3D; home.name\n        \n        return cell\n    &#125;\n&#125;\n&#x2F;&#x2F; MARK: - HMHomeManagerDelegate\nextension ViewController : HMHomeManagerDelegate&#123;\n    \n    func homeManagerDidUpdateHomes(_ manager: HMHomeManager) &#123;\n        print(&quot;home更新&quot;)\n        tableView.reloadData()\n    &#125;\n    func homeManager(_ manager: HMHomeManager, didRemove home: HMHome) &#123;\n        print(&quot;home已经被移除&quot;)\n    &#125;\n    override func prepare(for segue: UIStoryboardSegue, sender: AnyObject?) &#123;\n        super.prepare(for: segue, sender: sender)\n        if segue.identifier &#x3D;&#x3D; &quot;addHome&quot; &#123;\n            let navController &#x3D; segue.destination as! UINavigationController\n            let addHomeViewController &#x3D; navController.topViewController as! AddHomeViewController\n            addHomeViewController.homeManager &#x3D; homeManager\n            \n        &#125;else if segue.identifier &#x3D;&#x3D; &quot;showRooms&quot;&#123;\n            \n            let listRoomsViewController &#x3D; segue.destination as! ListRoomsViewController\n            let home &#x3D; homeManager.homes[tableView.indexPathForSelectedRow!.row]\n            \n            \n            listRoomsViewController.home &#x3D; home\n        &#125;\n    &#125;\n&#125;</code></pre>\n\n<p><code>AddHomeViewController.swift</code></p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">import UIKit\nimport HomeKit\nclass AddHomeViewController: UIViewController &#123;\n    \n    @IBOutlet weak var textField: UITextField!\n    \n    var homeManager : HMHomeManager!\n    var home: HMHome!\n    override func viewDidLoad() &#123;\n        super.viewDidLoad()\n        \n        &#x2F;&#x2F; Do any additional setup after loading the view.\n    &#125;\n    \n    override func viewDidAppear(_ animated: Bool) &#123;\n        super.viewDidAppear(animated)\n        textField.becomeFirstResponder()\n    &#125;\n    \n    override func didReceiveMemoryWarning() &#123;\n        super.didReceiveMemoryWarning()\n        &#x2F;&#x2F; Dispose of any resources that can be recreated.\n    &#125;\n    \n    @IBAction func save(_ sender: AnyObject) &#123;\n        &#x2F;&#x2F;添加home\n        homeManager.addHome(withName: textField.text!, completionHandler: &#123;(home, error) -&gt; Void in\n            \n            if error !&#x3D; nil&#123;\n                print(error)\n            &#125;else &#123;\n                self.dismiss(animated: true, completion: nil)\n            &#125;\n        &#125;)\n    &#125;\n    @IBAction func cancel(_ sender: AnyObject) &#123;\n        self.dismiss(animated: true, completion: nil)\n        \n    &#125;\n&#125;</code></pre>\n\n<p><code>AddRoomViewController.swift</code></p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">import UIKit\nimport HomeKit\nclass AddRoomViewController: UIViewController &#123;\n    \n    @IBOutlet weak var textField: UITextField!\n    \n    var home: HMHome!\n    \n    override func viewDidLoad() &#123;\n        super.viewDidLoad()\n    &#125;\n    \n    override func didReceiveMemoryWarning() &#123;\n        super.didReceiveMemoryWarning()\n    &#125;\n    \n    @IBAction func save(_ sender: AnyObject) &#123;\n        home.addRoom(withName: textField.text!, completionHandler: &#123; (room, error) -&gt; Void in\n            if error !&#x3D; nil &#123;\n                print(error)\n            &#125; else  &#123;\n                self.dismiss(animated: true, completion: nil)\n            &#125;\n        &#125;)\n    &#125;\n    \n    @IBAction func cancel(_ sender: AnyObject) &#123;\n        self.dismiss(animated: true, completion: nil)\n    &#125;\n    \n&#125;</code></pre>\n\n<p><code>DetailRoomViewController.swift</code></p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">import UIKit\nimport HomeKit\nlet accessoryName &#x3D; &quot;Light&quot;\n\nclass DetailRoomViewController: UIViewController, HMAccessoryBrowserDelegate &#123;\n    \n    var home: HMHome!\n    var room: HMRoom!\n    var lightAccessory: HMAccessory!\n    var accessoryBrowser &#x3D; HMAccessoryBrowser()\n    \n    var brightnessCharacteristic: HMCharacteristic!\n    var powerStateCharacteristic: HMCharacteristic!\n    \n    @IBOutlet weak var powerSwitch: UISwitch!\n    @IBOutlet weak var brightnessSilder: UISlider!\n    @IBOutlet weak var brightnessValue: UILabel!\n    \n    override func viewDidLoad() &#123;\n        super.viewDidLoad()\n        self.accessoryBrowser.delegate &#x3D; self\n        self.findAccessory()\n    &#125;\n    \n    override func didReceiveMemoryWarning() &#123;\n        super.didReceiveMemoryWarning()\n    &#125;\n    \n    override func viewDidDisappear(_ animated: Bool) &#123;\n        super.viewDidDisappear(animated)\n        self.accessoryBrowser.stopSearchingForNewAccessories()\n    &#125;\n    \n    func findAccessory()&#123;\n        \n            for accessory in room.accessories &#123;\n                if accessory.name &#x3D;&#x3D; accessoryName &#123;\n                    self.lightAccessory &#x3D; accessory\n                &#125;\n            &#125;\n        \n        &#x2F;&#x2F; 开始查找配件\n        if self.lightAccessory &#x3D;&#x3D; nil &#123;\n            self.accessoryBrowser.startSearchingForNewAccessories()\n        &#125; else &#123;\n            self.findServicesForAccessory(self.lightAccessory)\n        &#125;\n        \n    &#125;\n    &#x2F;&#x2F;MARK: --实现HMAccessoryBrowserDelegate协议\n    func accessoryBrowser(_ browser: HMAccessoryBrowser, didFindNewAccessory accessory: HMAccessory) &#123;\n        NSLog(&quot;发现配件...&quot;)\n        \n        if accessory.name &#x3D;&#x3D; accessoryName &#123;\n            self.home.addAccessory(accessory, completionHandler: &#123; [weak self] (error) -&gt; Void in\n                \n                if error !&#x3D; nil &#123;\n                    NSLog(&quot;安装配件失败。&quot;)\n                &#125; else &#123;\n                    self!.home.assignAccessory(accessory, to: self!.room, completionHandler: &#123; (error) -&gt; Void in\n                        self!.findServicesForAccessory(accessory)\n                    &#125;)\n                &#125;\n                \n                &#125;)\n        &#125;\n    &#125;\n    func findServicesForAccessory(_ accessory: HMAccessory)&#123;\n        NSLog(&quot;查找配件的服务...&quot;)\n        for service in accessory.services &#123;\n            NSLog(&quot; 服务名 &#x3D; \\(service.name)&quot;)\n            NSLog(&quot; 服务类型 &#x3D; \\(service.serviceType)&quot;)\n            \n            NSLog(&quot; 查找服务中的特征...&quot;)\n            findCharacteristicsOfService(service)\n        &#125;\n    &#125;\n    \n    func findCharacteristicsOfService(_ service: HMService)&#123;\n        for characteristic in service.characteristics &#123;\n            NSLog(&quot;   特征类型 &#x3D; \\(characteristic.characteristicType)&quot;)\n            \n            if characteristic.characteristicType &#x3D;&#x3D; HMCharacteristicTypeBrightness&#123;\n                brightnessCharacteristic &#x3D; characteristic\n                brightnessCharacteristic.readValue(completionHandler: &#123; [weak self] (error) -&gt; Void in\n                    if error !&#x3D; nil &#123;\n                        print(error)\n                    &#125; else  &#123;\n                        let oldValue &#x3D; self!.brightnessCharacteristic.value as! Float\n                        NSLog(&quot;oldValue : \\(oldValue)&quot;)\n                        self!.brightnessSilder.value &#x3D; oldValue\n                        self!.brightnessValue.text &#x3D; String(format: &quot;%0.0f&quot;, oldValue)\n                    &#125;\n                    &#125;)\n                \n            &#125; else if characteristic.characteristicType &#x3D;&#x3D; HMCharacteristicTypePowerState &#123;\n                powerStateCharacteristic &#x3D; characteristic\n                powerStateCharacteristic.readValue(completionHandler: &#123; [weak self] (error) -&gt; Void in\n                    if error !&#x3D; nil &#123;\n                        print(error)\n                    &#125; else  &#123;\n                        let oldValue &#x3D; self!.powerStateCharacteristic.value as! Bool\n                        NSLog(&quot;oldValue : \\(oldValue)&quot;)\n                        self!.powerSwitch.setOn(oldValue, animated: true)\n                    &#125;\n                    &#125;)\n            &#125;\n        &#125;\n    &#125;\n    \n    \n    @IBAction func switchValueChanged(_ sender: AnyObject) &#123;\n        let newValue &#x3D; self.powerSwitch.isOn\n        self.powerStateCharacteristic.writeValue(newValue, completionHandler: &#123;(error) -&gt; Void in\n            if error !&#x3D; nil &#123;\n                print(&quot;Power状态写入失败: \\(error)&quot;)\n            &#125;\n        &#125;)\n    &#125;\n    \n    @IBAction func silderValueChanged(_ sender: AnyObject) &#123;\n        let newValue &#x3D; self.brightnessSilder.value\n        self.brightnessCharacteristic.writeValue(newValue, completionHandler: &#123;(error) -&gt; Void in\n            if error !&#x3D; nil &#123;\n                print(&quot;亮度写入失败:\\(error)&quot;)\n            &#125;\n        &#125;)\n        self.brightnessValue.text &#x3D; String(format: &quot;%0.0f&quot;, newValue)\n    &#125;\n    \n&#125;</code></pre>\n\n<p><code>ListRoomsViewController.swift</code></p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">import UIKit\nimport HomeKit\n\nclass ListRoomsViewController: UITableViewController ,HMHomeDelegate&#123;\n    \n    var home: HMHome!\n    \n    override func viewDidLoad() &#123;\n        super.viewDidLoad()\n        home.delegate &#x3D; self\n    &#125;\n    override func viewDidAppear(_ animated: Bool) &#123;\n        super.viewDidAppear(animated)\n        tableView.reloadData()\n    &#125;\n    override func didReceiveMemoryWarning() &#123;\n        super.didReceiveMemoryWarning()\n    &#125;\n    &#x2F;&#x2F; MARK: - Table view data source\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int &#123;\n        return home.rooms.count\n    &#125;\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell &#123;\n        let cell &#x3D; tableView.dequeueReusableCell(withIdentifier: &quot;Cell&quot;, for: indexPath)\n        \n        let room &#x3D; home.rooms[(indexPath as NSIndexPath).row]\n        cell.textLabel!.text &#x3D; room.name\n        \n        return cell\n    &#125;\n    \n    &#x2F;&#x2F;MARK: --实现数据源协议\n    override func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) &#123;\n        if editingStyle &#x3D;&#x3D; .delete &#123;\n            let room &#x3D; home.rooms[(indexPath as NSIndexPath).row]\n            home.removeRoom(room, completionHandler: &#123; (error) -&gt; Void in\n                \n                if error !&#x3D; nil &#123;\n                    print(error)\n                &#125; else  &#123;\n                    tableView.deleteRows(at: [indexPath], with: UITableViewRowAnimation.automatic)\n                &#125;\n            &#125;)\n        &#125;\n    &#125;\n    \n    &#x2F;&#x2F;MARK: --实现HMHomeDelegate协议\n    func home(_ home: HMHome, didAdd room: HMRoom) &#123;\n        print(&quot;一个房间被创建&quot;)\n    &#125;\n    \n    func home(_ home: HMHome, didRemove room: HMRoom) &#123;\n        print(&quot;一个房间被删除&quot;)\n    &#125;\n    \n    override func prepare(for segue: UIStoryboardSegue, sender: AnyObject!) &#123;\n        \n        super.prepare(for: segue, sender: sender)\n        \n        if segue.identifier &#x3D;&#x3D; &quot;addRoom&quot;&#123;\n            \n            let navController &#x3D; segue.destination as! UINavigationController\n            let addRoomViewController &#x3D; navController.topViewController as! AddRoomViewController\n            addRoomViewController.home &#x3D; home\n            \n        &#125; else if segue.identifier &#x3D;&#x3D; &quot;showDetailRoom&quot; &#123;\n            \n            let detailRoomViewController &#x3D; segue.destination as! DetailRoomViewController\n            detailRoomViewController.home &#x3D; home\n            \n            let indexPath &#x3D; self.tableView.indexPathForSelectedRow!\n            detailRoomViewController.room &#x3D; home.rooms[indexPath.row]\n        &#125;\n    &#125;   \n&#125;</code></pre>\n\n<p>##运行测试</p>\n<p>开发者网站下载HardwareIOTools_Xcode_xx.dmg<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming2-2.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming3.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming4.png\"></p>\n<p>打开模拟器<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming5.png\"></p>\n<p>点击加号<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming6.png\"></p>\n<p>创建一个配件<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming7-2.png\"></p>\n<p>添加一个服务<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming8-2.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming9.png\"></p>\n<p>选择Light<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming10.png\"></p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming11-2.png\"></p>\n<p>运行App</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意:info.plist 填写 NSHomeKitUsageDescription</p></blockquote>\n<p>授权访问iCloud云端的homekit数据<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming12.PNG\"></p>\n<p>添加Home<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming13.PNG\"></p>\n<p>在刚刚添加的Home中添加Room<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming14.PNG\"></p>\n<p>授权添加配件<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming17.PNG\"></p>\n<p>添加room 和模拟器的配件进行配对<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming15.png\"><br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming16.png\"><br>完成配对,这个时候操作界面的开关,模拟器也会自动调整数据</p>\n<p><a href=\"https://github.com/williamxiewz/projectDemo/tree/master/homekit/Philips%20Light%20bulb\">项目源代码GitHub</a></p>\n<p><a href=\"https://pan.baidu.com/s/1JKY5kIewt0IbidzwbYBaww\">项目源代码BaiduPan</a></p>\n<p>#iOS10 Home app使用<br>Home app能够添加所有的HomeKit的配件.下面是一个门的例子</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming18.png\"><br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming19.png\"><br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming20.png\"><br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming21.png\"><br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming22.png\"><br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming23.png\"><br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming24.png\"><br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming25.png\"><br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/applehomekitprogramming26.png\"></p>\n","text":" #HomeKit智能家居平台 随着物联网技术的发展,构建智能家居的技术越来越成熟,苹果公司制定了HomeKit智能家居平台硬件规格标准,第三方设备制造商将可以为苹果设备推出大量智能家居产品.设备商都必须参加MFI 授权计划,并严格遵守此前公布的硬件规格要求. HomeKit 硬...","link":"","photos":[],"count_time":{"symbolsCount":"16k","symbolsTime":"14 mins."},"categories":[{"name":"智能家居","slug":"智能家居","count":2,"path":"api/categories/智能家居.json"}],"tags":[{"name":"HomeKit","slug":"HomeKit","count":2,"path":"api/tags/HomeKit.json"}],"toc":"","author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}},"mapped":true,"prev_post":{"title":"Bonjour网络编程","uid":"0cc4b6da7e6dbc367d1a0f5f752f14d7","slug":"Bonjour网络编程","date":"2016-08-10T10:53:34.000Z","updated":"2016-08-22T15:17:53.000Z","comments":true,"path":"api/articles/Bonjour网络编程.json","keywords":null,"cover":null,"text":"#Bonjour 介绍Bonjour(法语”你好’’的意思),它可以使应用不必指定眼务器端口和IP地址就可以以动态发现。 发现眼务是通过特定命名搜索服务的.例如”tony. _tonyipp. _tcp.local”这样的命名，发 现服务命名格式如下： &lt;服务名&gt;.〈...","link":"","photos":[],"count_time":{"symbolsCount":517,"symbolsTime":"1 mins."},"categories":[{"name":"iOS网络编程","slug":"iOS网络编程","count":9,"path":"api/categories/iOS网络编程.json"}],"tags":[{"name":"Bonjour","slug":"Bonjour","count":1,"path":"api/tags/Bonjour.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}},"next_post":{"title":"Handoff 编程指南","uid":"3ea9c69504bb57a512c185577723226c","slug":"Handoff-编程指南","date":"2016-08-10T10:10:28.000Z","updated":"2016-08-19T10:19:51.000Z","comments":true,"path":"api/articles/Handoff-编程指南.json","keywords":null,"cover":[],"text":"本文翻译自Apple官方文档：Handoff Programming Guide #关于Handoff Handoff是iOS 8 和 OS X v10.10中引入的功能，可以让同一个用户在多台设备间传递项目。 Handoff能让用户从一台设备开始一个项目，然后切换至其他设备继续...","link":"","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[{"name":"iOS SDK","slug":"iOS-SDK","count":18,"path":"api/categories/iOS-SDK.json"}],"tags":[{"name":"Handoff","slug":"Handoff","count":3,"path":"api/tags/Handoff.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}}}