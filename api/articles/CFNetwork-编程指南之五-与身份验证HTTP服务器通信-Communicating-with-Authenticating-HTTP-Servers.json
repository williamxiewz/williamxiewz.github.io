{"title":"CFNetwork 编程指南之五: 与身份验证HTTP服务器通信(Communicating with Authenticating HTTP Servers)","uid":"e4b9eca156b9b591c912ba6382a5ef7f","slug":"CFNetwork-编程指南之五-与身份验证HTTP服务器通信-Communicating-with-Authenticating-HTTP-Servers","date":"2016-08-10T03:58:03.000Z","updated":"2016-08-19T11:45:25.000Z","comments":true,"path":"api/articles/CFNetwork-编程指南之五-与身份验证HTTP服务器通信-Communicating-with-Authenticating-HTTP-Servers.json","keywords":null,"cover":[],"content":"<p>#与身份验证HTTP服务器通信</p>\n<p>本文描述了如何利用CFHTTPAuthentication API与需要身份验证的HTTP服务器通信。它解释了如何找到匹配的验证对象和证书，并将它们应用到HTTP请求，然后存储以供以后使用。</p>\n<p>一般来说，如果一个HTTP服务器返回一个401或407响应你的HTTP请求，这表明服务器进行身份验证需要证书。在CFHTTPAuthentication API中，每个证书组存储在CFHTTPAuthentication 对象中。因此，每个不同的身份认证服务器和每个不同用户连接的服务器需要一个单独的CFHTTPAuthentication 对象。与服务器通信，你需要应用CFHTTPAuthentication 对象到HTTP请求。接下来更加详细的解释这些步骤。</p>\n<span id=\"more\"></span>\n\n<p>##处理身份验证<br>添加身份验证支持将允许你的应用和身份验证服务器（如果服务器返回401或407响应）进行交互。尽管HTTP身份验证不是一个难的概念，它是一个复杂的过程。步骤如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.客户端向服务器发送一个HTTP请求。<br>2.服务器返回一个验证给客户端。<br>3.客户端将原始请求的证书打包并发送给服务器。<br>4.在客户端和服务器之间谈判<br>5.当服务器验证了客户端身份，返回请求的响应。</p></blockquote>\n<p>执行这个过程需要多个步骤。整个过程如图4-1和4-2.</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/Art/apply_2x.png\" alt=\"图4-1 处理身份验证\"></p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/Art/authentication_2x.png\" alt=\"图4-2 找到一个身份验证对象\"></p>\n<p>当一个HTTP请求返回一个401或407响应，第一步是为客户端找到一个有效的CFHTTPAuthentication 对象。一个身份验证对象包括证书和其他信息，当应用到HTTP消息请求，与服务器验证你的身份。如果你已经与服务器进行过身份验证，你会有一个有效的身份验证对象。然而，在大多数情况下，你需要使用<a href=\"https://developer.apple.com/library/ios/documentation/CoreFoundation/Reference/CFHTTPAuthenticationRef/index.html#//apple_ref/doc/c_ref/CFHTTPAuthenticationCreateFromResponse\">CFHTTPAuthenticationCreateFromResponse</a> 函数来创建一个对象。见列表4-1.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：所有关于身份验证的示例代码改编自ImageClient 应用。</p></blockquote>\n<p>列表4-1 创建一个身份验证对象</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>authentication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   \n\nCFHTTPMessageRef responseHeader <span class=\"token operator\">=</span>\n    <span class=\"token punctuation\">(</span>CFHTTPMessageRef<span class=\"token punctuation\">)</span> <span class=\"token function\">CFReadStreamCopyProperty</span><span class=\"token punctuation\">(</span>\n        readStream<span class=\"token punctuation\">,</span>\n        kCFStreamPropertyHTTPResponseHeader\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Get the authentication information from the response.</span>\nauthentication <span class=\"token operator\">=</span>\n<span class=\"token function\">CFHTTPAuthenticationCreateFromResponse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> responseHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   \n<span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>responseHeader<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果新身份验证对象有效，那么你已经完成可以继续图4-1的第二步。如果身份验证对象无效，然后扔掉身份验证对象和证书，检查证书。关于证书的更多信息，阅读安全证书（<a href=\"http://developer.apple.com/library/mac/qa/qa2001/qa1277.html\">Security Credentials</a>）。</p>\n<p>不好的证书意味着服务器不接受登陆信息，它将继续监听新的证书。然而，如果证书是好的，但服务器仍然拒绝你的请求，然后服务器拒绝与你通信，你必须放弃。加上证书是不好的，重试整个过程，先创建身份验证对象直到你得到有效的证书和有效的验证对象。这个过程类似于列表4-2中的代码。</p>\n<p>列表4-2 查找一个有效的身份验证对象</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">CFStreamError err<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>authentication<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\n<span class=\"token comment\">// the newly created authentication object is bad, must return</span>\n<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CFHTTPAuthenticationIsValid</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token comment\">// destroy authentication and credentials</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    credentials <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nauthentication <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// check for bad credentials (to be treated separately)</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>domain <span class=\"token operator\">==</span> kCFStreamErrorDomainHTTP <span class=\"token operator\">&amp;&amp;</span>\n    <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">.</span>error <span class=\"token operator\">==</span> kCFStreamErrorHTTPAuthenticationBadUserName\n    <span class=\"token operator\">||</span> err<span class=\"token punctuation\">.</span>error <span class=\"token operator\">==</span> kCFStreamErrorHTTPAuthenticationBadPassword<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">retryAuthorizationFailure</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">errorOccurredLoadingImage</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>现在你有一个有效的身份验证对象，继续图4-1中的流程。首先，考虑你是否需要证书。如果你不需要，则应由身份验证对象到HTTP请求。身份验证对象应用到HTTP请求详见列表4-4（resumeWithCredentials）。</p>\n<p>未存储证书（在内存中保存证书（<a href=\"https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/CFHTTPAuthenticationTasks/CFHTTPAuthenticationTasks.html#//apple_ref/doc/uid/TP30001132-CH8-SW6\">Keeping Credentials in Memory</a> ）和在永久性仓库中存储证书（<a href=\"https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/CFHTTPAuthenticationTasks/CFHTTPAuthenticationTasks.html#//apple_ref/doc/uid/TP30001132-CH8-SW5\">Keeping Credentials in a Persistent Store</a>）中有解释），获取有效证书的唯一方法是提示用户。大多数情况下，证书需要用户名和密码。通过传递身份验证对象到<a href=\"https://developer.apple.com/library/ios/documentation/CoreFoundation/Reference/CFHTTPAuthenticationRef/index.html#//apple_ref/doc/c_ref/CFHTTPAuthenticationRequiresUserNameAndPassword\">CFHTTPAuthenticationRequiresUserNameAndPassword</a> 函数，你可以看到用户名和密码是必须的。如果证书需要用户名和密码，提示用户输入用户名和密码并在证书字典里存储。对于一个NTLM服务器，证书还需要一个域。在你有新的证书后，你可以调用列表4-4的函数resumeWithCredentials ，应用身份验证对象到HTTP请求。整个过程见列表4-3。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：在代码列表中，前面有省略号的注释表明这个功能超出了本文的范围，但是需要实现。这不同与正常的注释描述正在发生什么功能。</p></blockquote>\n<p>列表4-3 查找证书（如果需要）并应用它们</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// ...continued from Listing 4-2</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token function\">cancelLoad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">resumeWithCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// are a user name &amp; password needed?</span>\n<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">CFHTTPAuthenticationRequiresUserNameAndPassword</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n    CFStringRef realm <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    CFURLRef url <span class=\"token operator\">=</span> <span class=\"token function\">CFHTTPMessageCopyRequestURL</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n     <span class=\"token comment\">// check if you need an account domain so you can display it if necessary</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CFHTTPAuthenticationRequiresAccountDomain</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        realm <span class=\"token operator\">=</span> <span class=\"token function\">CFHTTPAuthenticationCopyRealm</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// ...prompt user for user name (user), password (pass)</span>\n    <span class=\"token comment\">// and if necessary domain (domain) to give to the server...</span>\n\n    <span class=\"token comment\">// Guarantee values</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>user<span class=\"token punctuation\">)</span> user <span class=\"token operator\">=</span> <span class=\"token function\">CFSTR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pass<span class=\"token punctuation\">)</span> pass <span class=\"token operator\">=</span> <span class=\"token function\">CFSTR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">CFDictionarySetValue</span><span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">,</span>\nkCFHTTPAuthenticationUsername<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">CFDictionarySetValue</span><span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">,</span>\nkCFHTTPAuthenticationPassword<span class=\"token punctuation\">,</span> pass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">// Is an account domain needed? (used currently for NTLM only)</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">CFHTTPAuthenticationRequiresAccountDomain</span><span class=\"token punctuation\">(</span>authentication<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>domain<span class=\"token punctuation\">)</span> domain <span class=\"token operator\">=</span> <span class=\"token function\">CFSTR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n       <span class=\"token function\">CFDictionarySetValue</span><span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">,</span> kCFHTTPAuthenticationAccountDomain<span class=\"token punctuation\">,</span> domain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span> <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token function\">resumeWithCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>列表4-4 应用身份验证对象到请求</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">resumeWithCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>   \n\n<span class=\"token comment\">// Apply whatever credentials we've built up to the old request</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">CFHTTPMessageApplyCredentialDictionary</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">,</span> authentication<span class=\"token punctuation\">,</span>\n                                            credentials<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">errorOccurredLoadingImage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Now that we've updated our request, retry the load</span>\n    <span class=\"token function\">loadRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>##在内存中存储证书<br>如果你打算经常与一个身份验证服务器进行通信，重用证书可以来避免多次提示用户服务器用户名和密码。本章解释了一次性使用身份验证代码（例如处理身份验证（<a href=\"https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/CFHTTPAuthenticationTasks/CFHTTPAuthenticationTasks.html#//apple_ref/doc/uid/TP30001132-CH8-SW3\">Handling Authentication</a>））需要作出的变更，在内存中存储证书以便重用。</p>\n<p>重用证书，你的代码中需要更改三个数据结构。</p>\n<p>1.创建一个可变的数组来保存所有的身份验证对象。</p>\n<pre><code>CFMutableArrayRef authArray;\n</code></pre>\n<p>代替：</p>\n<pre><code>CFHTTPAuthenticationRef authentication;\n</code></pre>\n<p>2.使用字典，创建身份验证对象到证书的映射。</p>\n<pre><code>CFMutableDictionaryRef credentialsDict;\n</code></pre>\n<p>代替：</p>\n<pre><code>CFMutableDictionaryRef credentials;\n</code></pre>\n<p>3.保持这些结构在你原来修改当前身份验证对象和当前证书的地方。</p>\n<pre><code>CFDictionaryRemoveValue(credentialsDict, authentication);\n</code></pre>\n<p>代替：</p>\n<pre><code>CFRelease(credentials);\n</code></pre>\n<p>现在，创建HTTP请求后，在每次加载前，查找一个匹配的身份验证对象。查找适合对象的一个简单的非优化方法见列表4-5.</p>\n<p>列表4-5 查找一个匹配的身份验证对象</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">CFHTTPAuthenticationRef findAuthenticationForRequest <span class=\"token punctuation\">&#123;</span>   \n\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token function\">CFArrayGetCount</span><span class=\"token punctuation\">(</span>authArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> c<span class=\"token punctuation\">;</span> i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    CFHTTPAuthenticationRef auth <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>CFHTTPAuthenticationRef<span class=\"token punctuation\">)</span>\n            <span class=\"token function\">CFArrayGetValueAtIndex</span><span class=\"token punctuation\">(</span>authArray<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">CFHTTPAuthenticationAppliesToRequest</span><span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">,</span> request<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> auth<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n   <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果身份验证数组有一个匹配的身份验证对象，然后检查证书仓库是否有正确的证书可用。这样做可以防止你需要再次提示用户输入用户名和密码。调用<a href=\"https://developer.apple.com/library/ios/documentation/CoreFoundation/Reference/CFDictionaryRef/index.html#//apple_ref/doc/c_ref/CFDictionaryGetValue\">CFDictionaryGetValue</a> 函数可以查找证书，如列表4-6所示。</p>\n<p>列表4-6 搜索证书仓库</p>\n<pre><code>credentials = CFDictionaryGetValue(credentialsDict, authentication);\n</code></pre>\n<p>然后应用你的匹配的身份验证对象和证书到你原始的HTTP请求并重新发送。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>警告：在接收到服务器验证前，不要应用证书到HTTP请求。在你上次认证后，服务器可能改变，你可能会有一个安全风险。</p></blockquote>\n<p>有了这些变更，你的应用可以在内存中存储身份验证对象和证书以便未来使用。</p>\n<p>##在永久性仓库中存储证书<br>在内存中存储证书可以防止用户在特定应用启动时重新输入服务器用户名和密码。然而，当应用退出，这些证书被释放。为了避免丢失证书，将它们保存到永久性仓库，这样每个服务器证书只需要生成一次。推荐用钥匙链来存储证书。即使你有很多个钥匙链，本文档中的钥匙链指的是用户默认的钥匙链。使用钥匙链表明你存储的身份验证信息可以用于其他试图访问同一个服务器的应用中，反之亦然。</p>\n<p>在钥匙链中存储和检索证书需要两个函数：一个用于查找证书字典用于身份验证，另一个保存最近请求的证书。本文中这些函数声明如下：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">CFMutableDictionaryRef <span class=\"token function\">findCredentialsForAuthentication</span><span class=\"token punctuation\">(</span> CFHTTPAuthenticationRef auth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">saveCredentialsForRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>findCredentialsForAuthentication 函数首先检查内存中的证书字典本地缓存是否有证书。如何实现见列表4-6。</p>\n<p>如果内存中没有证书的缓存，然后搜索钥匙链。使用SecKeychainFindInternetPassword函数搜索钥匙链。该函数需要大量的参数。参数和一段简短的描述HTTP身份验证证书如何使用它们，如下：</p>\n<p><code>keychainOrArray</code></p>\n<p>NULL 指定用户默认钥匙链列表。</p>\n<p><code>serverNameLength</code></p>\n<p>serverName的长度，通常是strlen(serverName)。</p>\n<p><code>serverName</code></p>\n<p>从HTTP请求解析到的服务器名称</p>\n<p><code>securityDomainLength</code></p>\n<p>安全域的长度，或0表示没有域。在示例代码中， realm ? strlen(realm) : 0向账户传递两种情形。</p>\n<p><code>securityDomain</code></p>\n<p>利用CFHTTPAuthenticationCopyRealm 函数获取身份验证对象范围</p>\n<p><code>accountNameLength</code></p>\n<p>accountName的长度。由于accountName是NULL，值为0</p>\n<p><code>accountName</code></p>\n<p>当读取钥匙链记录时没有账户名，该字段为NULL。</p>\n<p><code>pathLength</code></p>\n<p>path的长度，如果没有路径则为0.在示例代码中，path ? strlen(path) : 0向账户传递两种情形。</p>\n<p><code>path</code></p>\n<p>利用CFURLCopyPath 函数从身份验证对象获取路径。</p>\n<p><code>port</code></p>\n<p>利用CFURLGetPortNumber函数获取端口号。</p>\n<p><code>protocol</code></p>\n<p>代表协议类型的字符串，例如HTTP或HTTPS。通过CFURLCopyScheme 函数获取协议类型。</p>\n<p><code>authenticationType</code></p>\n<p>利用CFHTTPAuthenticationCopyMethod函数获取身份验证类型。</p>\n<p><code>passwordLength</code></p>\n<p>0，因为在读取钥匙链记录时不需要密码。</p>\n<p><code>passwordData</code></p>\n<p>NULL，因为在读取钥匙链记录时不需要密码。</p>\n<p><code>itemRef</code></p>\n<p>查找到正确的钥匙链记录，返回钥匙链记录引用对象SecKeychainItemRef。</p>\n<p>当正确的调用，代码如列表4-7所示。</p>\n<p>列表4-7 搜索钥匙链</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">didFind <span class=\"token operator\">=</span>   \n\n<span class=\"token function\">SecKeychainFindInternetPassword</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>host<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> host<span class=\"token punctuation\">,</span>\n                                realm <span class=\"token operator\">?</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>realm<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> realm<span class=\"token punctuation\">,</span>\n                                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\n                                path <span class=\"token operator\">?</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> path<span class=\"token punctuation\">,</span>\n                                port<span class=\"token punctuation\">,</span>\n                                protocolType<span class=\"token punctuation\">,</span>\n                                authenticationType<span class=\"token punctuation\">,</span>\n                                <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span>\n                                <span class=\"token operator\">&amp;</span>itemRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>假设SecKeychainFindInternetPassword 成功返回，创建一个包含单独钥匙链属性(SecKeychainAttribute)的钥匙链属性列表(SecKeychainAttributeList)。钥匙链实现列表将包含用户名和密码。为了加载钥匙链属性列表，调用SecKeychainItemCopyContent 函数并将SecKeychainFindInternetPassword返回的钥匙链记录引用对象(itemRef)传递给它。该函数将用账号的用户名和密码void **填充到钥匙链属性中。</p>\n<p>用户名和密码可以用来创建一组新证书。列表4-8展示了这个过程。</p>\n<p>列表4-8 从钥匙链价值服务器证书。</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>didFind <span class=\"token operator\">==</span> noErr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n\nSecKeychainAttribute    attr<span class=\"token punctuation\">;</span>\nSecKeychainAttributeList attrList<span class=\"token punctuation\">;</span>\nUInt32                  length<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span>                    <span class=\"token operator\">*</span>outData<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// To set the account name attribute</span>\nattr<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">=</span> kSecAccountItemAttr<span class=\"token punctuation\">;</span>\nattr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\nattr<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\nattrList<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\nattrList<span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>attr<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">SecKeychainItemCopyContent</span><span class=\"token punctuation\">(</span>itemRef<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>attrList<span class=\"token punctuation\">,</span>\n<span class=\"token operator\">&amp;</span>length<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>outData<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span> noErr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// attr.data is the account (username) and outdata is the password</span>\n    CFStringRef username <span class=\"token operator\">=</span>\n        <span class=\"token function\">CFStringCreateWithBytes</span><span class=\"token punctuation\">(</span>kCFAllocatorDefault<span class=\"token punctuation\">,</span> attr<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span>\n                                attr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span> kCFStringEncodingUTF8<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    CFStringRef password <span class=\"token operator\">=</span>\n        <span class=\"token function\">CFStringCreateWithBytes</span><span class=\"token punctuation\">(</span>kCFAllocatorDefault<span class=\"token punctuation\">,</span> outData<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">,</span>\n                                kCFStringEncodingUTF8<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">SecKeychainItemFreeContent</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>attrList<span class=\"token punctuation\">,</span> outData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// create credentials dictionary and fill it with the user name &amp; password</span>\n    credentials <span class=\"token operator\">=</span>\n        <span class=\"token function\">CFDictionaryCreateMutable</span><span class=\"token punctuation\">(</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n                                  <span class=\"token operator\">&amp;</span>kCFTypeDictionaryKeyCallBacks<span class=\"token punctuation\">,</span>\n                                  <span class=\"token operator\">&amp;</span>kCFTypeDictionaryValueCallBacks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CFDictionarySetValue</span><span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">,</span> kCFHTTPAuthenticationUsername<span class=\"token punctuation\">,</span>\n                        username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CFDictionarySetValue</span><span class=\"token punctuation\">(</span>credentials<span class=\"token punctuation\">,</span> kCFHTTPAuthenticationPassword<span class=\"token punctuation\">,</span>\n                        password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token function\">CFRelease</span><span class=\"token punctuation\">(</span>itemRef<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n\n<p>如果你可以先存储证书到钥匙链中，从钥匙链中检索证书才有用。首先，查看证书是否已经存储在钥匙链中。调用SecKeychainFindInternetPassword，传递用户名到accountName ，传递accountName 的长度到accountNameLength``。</p>\n<p>如果记录存在，修改它来改变密码。设置钥匙链属性的数据字段包含用户名，主要你可以修改正确的属性。然后调用SecKeychainItemModifyContent 函数并传递钥匙链记录引用对象(itemRef)，钥匙链属性列表和新密码。通过修改钥匙链记录而非重写，钥匙链记录会正确的更新其他相关数据也将保留。记录如列表4-9所示。</p>\n<p>列表4-9 修改钥匙链记录</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// Set the attribute to the account name   </span>\nattr<span class=\"token punctuation\">.</span>tag <span class=\"token operator\">=</span> kSecAccountItemAttr<span class=\"token punctuation\">;</span> \nattr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>username<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \nattr<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>username<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Modify the keychain entry   </span>\n<span class=\"token function\">SecKeychainItemModifyContent</span><span class=\"token punctuation\">(</span>itemRef<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>attrList<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>   \n<span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如果记录不存在，你将需要从头开始创建它。<code>SecKeychainAddInternetPassword</code> 函数完成该任务。它的参数与<code>SecKeychainFindInternetPassword</code>相同，但与调用<code>SecKeychainFindInternetPassword</code>相比，你提供用户名和密码给<code>SecKeychainAddInternetPassword</code> 。释放钥匙链记录引用对象成功后调用<code>SecKeychainAddInternetPassword</code> ，除非你需要在其他地方使用。见列表4-10函数调用。</p>\n<p>列表4-10 存储一个新的钥匙链记录</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">SecKeychainAddInternetPassword(NULL,   \n\n                          strlen(host), host,\n                          realm ? strlen(realm) : 0, realm,\n                          strlen(username), username,\n                          path ? strlen(path) : 0, path,\n                          port,\n                          protocolType,\n                          authenticationType,\n                          strlen(password), password,\n                          &amp;itemRef);\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<p>身份验证防火墙<br>身份验证防火墙与身份验证服务器非常相似，处理必须检查每个失败的HTTP请求的代理身份验证和服务器身份验证。这以为着，你需要单独存储（本地和永久）代理服务器和源服务器。因此，失败的HTTP响应的过程如下：</p>\n<ul>\n<li><p>确定响应的状态码是否为407（代理怀疑）。如果是，检查当地代理仓库和永久性代理仓库查找一个匹配的身份验证对象和证书。如果这些都没有一个匹配的对象和证书，然后请求用户证书。应用身份验证对象到HTTP请求并重试。</p>\n</li>\n<li><p>确定响应的状态码是否为401（服务器怀疑）。如果是，遵循与407响应相同的过程，但是用原始服务器存储。</p>\n</li>\n</ul>\n<p>使用代理服务器有些细微的差别。首先，钥匙链调用的参数来自于代理主机和端口，而非一个源服务器的URL。第二，当要求用户输入用户名和密码，确保清楚的提示是什么密码。</p>\n<p>通过这些指令，你的应用应该可以使用身份验证防火墙。</p>\n<p>官方原文地址：<br><a href=\"https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/CFHTTPAuthenticationTasks/CFHTTPAuthenticationTasks.html#//apple_ref/doc/uid/TP30001132-CH8-SW1\">CFNetwork Programming Guide</a></p>\n","text":"#与身份验证HTTP服务器通信 本文描述了如何利用CFHTTPAuthentication API与需要身份验证的HTTP服务器通信。它解释了如何找到匹配的验证对象和证书，并将它们应用到HTTP请求，然后存储以供以后使用。 一般来说，如果一个HTTP服务器返回一个401或407响...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"iOS网络编程","slug":"iOS网络编程","count":9,"path":"api/categories/iOS网络编程.json"}],"tags":[{"name":"CFNetwork","slug":"CFNetwork","count":7,"path":"api/tags/CFNetwork.json"}],"toc":"","author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}},"mapped":true,"prev_post":{"title":"CFNetwork 编程指南之六: 使用FTP服务器(Working with FTP Servers)","uid":"4fe0927b9d7f454761510969d0dea921","slug":"CFNetwork-编程指南之六-使用FTP服务器-Working-with-FTP-Servers","date":"2016-08-10T03:58:41.000Z","updated":"2016-08-19T11:45:52.000Z","comments":true,"path":"api/articles/CFNetwork-编程指南之六-使用FTP服务器-Working-with-FTP-Servers.json","keywords":null,"cover":null,"text":"#使用FTP服务器 本文揭示了如何使用CFFTP API的一些基本特性。管理FTP事务是异步执行的，而管理文件传输是同步实现的。 ##下载文件使用CFFTP类似于CFHTTP ，因为它们都是基于CFStream。与其他任何异步使用CFStream的API一样，使用CFFTP下载一...","link":"","photos":[],"count_time":{"symbolsCount":"8k","symbolsTime":"7 mins."},"categories":[{"name":"iOS网络编程","slug":"iOS网络编程","count":9,"path":"api/categories/iOS网络编程.json"}],"tags":[{"name":"CFNetwork","slug":"CFNetwork","count":7,"path":"api/tags/CFNetwork.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}},"next_post":{"title":"CFNetwork 编程指南之四: 与HTTP服务器通信(Communicating with HTTP Servers)","uid":"07ef757033d0429be6d914103f281624","slug":"CFNetwork-编程指南之四-与HTTP服务器通信-Communicating-with-HTTP-Servers","date":"2016-08-10T03:57:31.000Z","updated":"2016-08-19T11:46:50.000Z","comments":true,"path":"api/articles/CFNetwork-编程指南之四-与HTTP服务器通信-Communicating-with-HTTP-Servers.json","keywords":null,"cover":null,"text":"#与HTTP服务器通信 本文解释了如何创建、发送和接收HTTP请求和响应。 ##创建一个CFHTTP请求HTTP请求是一个消息，这个消息由远程服务器执行的方法，操作的对象（URL），消息头和消息体。方法通常是下面之一：GET, HEAD, PUT, POST, DELETE, T...","link":"","photos":[],"count_time":{"symbolsCount":"6.1k","symbolsTime":"6 mins."},"categories":[{"name":"iOS网络编程","slug":"iOS网络编程","count":9,"path":"api/categories/iOS网络编程.json"}],"tags":[{"name":"CFNetwork","slug":"CFNetwork","count":7,"path":"api/tags/CFNetwork.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}}}