{"title":"Multipeer connectivity 对等结构网络编程","uid":"89f1cad59352c7f82ca21656f76e183c","slug":"Multipeer-connectivity-对等结构网络编程","date":"2016-08-10T10:58:32.000Z","updated":"2016-08-22T15:37:47.000Z","comments":true,"path":"api/articles/Multipeer-connectivity-对等结构网络编程.json","keywords":null,"cover":null,"content":"<p>#对等结构网络 </p>\n<p>对等结构网络是苹果的<a href=\"https://zh.wikipedia.org/zh-cn/%E7%84%A1%E7%B7%9A%E9%9A%A8%E6%84%8F%E7%B6%B2%E8%B7%AF\">Ad Hoc</a>网络的一种,是在小空间里构建无限网络的解决方案。苹果公司的GameKit或Multipeer Connectivity(多点连接）框架中提供了开发这种网络的APi.</p>\n<p>在iOS7中，引入了一个全新的框架——Multipeer Connectivity(多点连接)。利用Multipeer Connectivity框架，即使在没有连接到WiFi（WLAN）或移动网络（xG）的情况下，距离较近的Apple设备（iMac/iPad/iPhone）之间可基于蓝牙和WiFi（P2P WiFi）技术进行发现和连接实现近场通信。</p>\n<span id=\"more\"></span>\n<p>Multipeer Connectivity扩充的功能与利用AirDrop传输文件非常类似，可以将其看作AirDrop不能直接使用的补偿，代价是需要自己实现。</p>\n<p>多点连接网络,每个点都足对等的,每个对等点都通过”广播服务”和”搜索服务”,</p>\n<p>“广播服务”的目的是为了能够被其他端点搜索到，”搜索服务”的目的是为了是能够搜索到其他端点。 </p>\n<p>当捜索到其他的端点,可以请求建立连接，连接一旦创建.会话（session)也就建义起来了。会话是与网络中运行应用的对等点对应的，每一对等点都会有一个PeerhId作为标示区别彼此。 </p>\n<p>多点连接网络在苹果设备之间进行连接时,链路层采用蓝牙或WiFi实现,并采用 Bonjour发现服务。这些对于开发人员是不可见的,开发人员不用关心它们的细节问题。<br>另外，采用蓝牙连接的对等网络在数据传输时，传输的距离有限制。 </p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在Multipeer connectivity框架中主要的类如下:</p></blockquote>\n<ul>\n<li>MCSession:描述连接的会话对象，一个设备的应用创建了会话对象，就可以邀请其他设备加入。 </li>\n<li>MCNearbyServiceAdvertiser :服务广播对象，广播服务告诉附近的对等点，它可以<br>被搜索到。</li>\n<li>MCAdvertiserAssistant:服务广播对象助手类,提供iOS标准要求的确认对话框界面。</li>\n<li>MCNearbyServiceBrowser:服务搜索对象，能够搜索附近发出广播服务的对等点，  </li>\n<li>MCBrowserViewController:提供ios标准搜索界面，通过该界面能够捜索到附近广播服务的对等点，并能够请求连接。</li>\n<li>MCPeerID:PeerId类，在多点连接网格中对等点的唯一标识peerld。 </li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Multipeer Connectivity框架中上述类相关的协议：</p></blockquote>\n<ul>\n<li>MCSessionDelegate: MCSession的委托协议。</li>\n<li>MCNearbyServiceAdvertiserDelcgale: MCNearbyServiceAdvertiser的委托协议。</li>\n<li>MCNearbvServiceBrowserDelegate: MCNearbyServiceBrowser的委托协议。 </li>\n<li>MCBrowserViewControllerDelegate: MCBrowserViewController的委托协议。</li>\n</ul>\n<p>#P2PGame游戏</p>\n<pre class=\"line-numbers language-swift\" data-language=\"swift\"><code class=\"language-swift\">import UIKit\nimport MultipeerConnectivity\n\nlet  GAMING &#x3D; 0          &#x2F;&#x2F;游戏进行中\nlet  GAMED  &#x3D; 1          &#x2F;&#x2F;游戏结束\n\nclass ViewController: UIViewController, MCSessionDelegate, MCBrowserViewControllerDelegate, UIAlertViewDelegate &#123;\n    \n    @IBOutlet weak var lblTimer: UILabel!\n    @IBOutlet weak var lblPlayer2: UILabel!\n    @IBOutlet weak var lblPlayer1: UILabel!\n    \n    @IBOutlet weak var btnConnect: UIButton!\n    @IBOutlet weak var btnClick: UIButton!\n    \n    var timer : NSTimer!\n    \n    let serviceType &#x3D; &quot;P2PGame-service&quot;\n    \n    var serviceBrowser : MCBrowserViewController!\n    var assistant : MCAdvertiserAssistant!\n    var session : MCSession!\n    var peerID: MCPeerID!\n    \n    override func viewDidLoad() &#123;\n        super.viewDidLoad()\n        \n        self.clearUI()\n        \n        self.peerID &#x3D; MCPeerID(displayName: UIDevice.currentDevice().name)\n        self.session &#x3D; MCSession(peer: self.peerID)\n        self.session.delegate &#x3D; self\n        \n        self.serviceBrowser &#x3D; MCBrowserViewController(serviceType: serviceType, session: self.session)\n        self.serviceBrowser.delegate &#x3D; self\n        \n        self.assistant &#x3D; MCAdvertiserAssistant(serviceType: serviceType, discoveryInfo: nil, session: self.session)\n        self.assistant.start()\n        \n    &#125;\n    \n    override func didReceiveMemoryWarning() &#123;\n        super.didReceiveMemoryWarning()\n    &#125;\n    \n    @IBAction func onClick(sender: AnyObject) &#123;\n        \n        if var count:Int &#x3D; Int(self.lblPlayer1.text!) &#123;\n            self.lblPlayer1.text &#x3D; String(format: &quot;%i&quot;, ++count)\n            \n            let sendStr &#x3D; String(format:&quot;&#123;\\&quot;code\\&quot;:%i,\\&quot;count\\&quot;:%i&#125;&quot;,GAMING,count)\n            let data &#x3D; sendStr.dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: true)\n            \n            var error : NSError?\n\n            try!  self.session.sendData(data!, toPeers: self.session.connectedPeers, withMode: .Unreliable)\n            \n            if error !&#x3D; nil &#123;\n                NSLog(&quot;Error sending data:  %@&quot;, error!.localizedDescription)\n            &#125;\n        &#125;\n    &#125;\n    \n    \n    @IBAction func connect(sender: AnyObject) &#123;\n        self.presentViewController(self.serviceBrowser, animated: true, completion: nil)\n    &#125;\n    \n    &#x2F;&#x2F;清除UI画面上的数据\n    func clearUI() &#123;\n        self.btnClick.enabled &#x3D; false\n        self.lblPlayer1.text &#x3D; &quot;0&quot;\n        self.lblPlayer2.text &#x3D; &quot;0&quot;\n        self.lblTimer.text &#x3D; &quot;30s&quot;\n        if self.timer !&#x3D; nil &#123;\n            self.timer.invalidate()\n        &#125;\n    &#125;\n    \n    &#x2F;&#x2F;更新计时器\n    func updateTimer() &#123;\n        \n        var strRemainTime &#x3D; self.lblTimer.text! as NSString\n        let len &#x3D; strRemainTime.length\n        strRemainTime &#x3D; strRemainTime.substringToIndex(len - 1)\n        \n        if var remainTime:Int &#x3D; Int(strRemainTime as! String) &#123;\n            remainTime--\n            &#x2F;&#x2F;剩余时间为0 比赛结束\n            if remainTime &#x3D;&#x3D; 0 &#123;\n                \n                var player1 &#x3D; Int(self.lblPlayer1.text!)\n                var player2 &#x3D; Int(self.lblPlayer2.text!)\n                var msg &#x3D; &quot;平手&quot;\n                \n                if player1 &gt; player2 &#123;\n                    msg &#x3D; &quot;我获胜&quot;\n                &#125; else if player1 &lt; player2 &#123;\n                    msg &#x3D; &quot;对手获胜&quot;\n                &#125;\n                \n                let alerView &#x3D; UIAlertView(title: &quot;Game Over.&quot;, message:msg, delegate: self, cancelButtonTitle: &quot;OK&quot;)\n                alerView.show()\n                \n                self.clearUI()\n                \n            &#125; else &#123;\n                self.lblTimer.text &#x3D; String(format: &quot;%is&quot;, remainTime)\n            &#125;\n        &#125;\n\n    &#125;\n    \n    &#x2F;&#x2F;MARK: --实现UIAlertViewDelegate协议\n    func alertView(alertView: UIAlertView, clickedButtonAtIndex buttonIndex: Int) &#123;\n        \n        self.btnClick.enabled &#x3D; true\n        self.timer &#x3D; NSTimer.scheduledTimerWithTimeInterval(1.0, target: self,\n            selector: &quot;updateTimer&quot;,\n            userInfo: nil, repeats: true)\n        \n    &#125;\n    \n    &#x2F;&#x2F;MARK: --实现MCSessionDelegate协议\n    &#x2F;&#x2F;端点状态变化\n    func session(session: MCSession!, peer peerID: MCPeerID!, didChangeState state: MCSessionState) &#123;\n  \n        var logmsg &#x3D; &quot;&quot;\n        \n        switch state &#123;\n        case .NotConnected:\n            logmsg &#x3D; &quot;断开连接&quot;\n            dispatch_async(dispatch_get_main_queue()) &#123;\n                self.btnClick.enabled &#x3D; false\n            &#125;\n        case .Connecting:\n            logmsg &#x3D; &quot;连接中...&quot;\n        case .Connected:\n            logmsg &#x3D; &quot;已连接&quot;\n            dispatch_async(dispatch_get_main_queue()) &#123;\n                self.btnClick.enabled &#x3D; true\n                self.timer &#x3D; NSTimer.scheduledTimerWithTimeInterval(1.0, target: self,\n                    selector: &quot;updateTimer&quot;,\n                    userInfo: nil, repeats: true)\n            &#125;\n        &#125;\n        NSLog(&quot;Peer [%@] changed state to %@&quot;, peerID.displayName, logmsg)\n    &#125;\n    \n    &#x2F;&#x2F;接收端点数据\n    func session(session: MCSession!, didReceiveData data: NSData!, fromPeer peerID: MCPeerID!) &#123;\n        \n       let jsonObj &#x3D; try!  NSJSONSerialization.JSONObjectWithData(data,\n                options: NSJSONReadingOptions.MutableContainers) as! [String : AnyObject]\n        \n        let codeObj &#x3D; jsonObj[&quot;code&quot;] as! Int\n        \n        if codeObj &#x3D;&#x3D; GAMING &#123;\n            let countObj &#x3D; jsonObj[&quot;count&quot;] as! Int\n            dispatch_async(dispatch_get_main_queue()) &#123;\n                self.lblPlayer2.text &#x3D; String(format: &quot;%i&quot;, countObj)\n            &#125;\n        &#125; else if codeObj &#x3D;&#x3D; GAMED &#123;\n            dispatch_async(dispatch_get_main_queue()) &#123;\n                self.clearUI()\n            &#125;\n        &#125;\n    &#125;\n    \n    &#x2F;&#x2F; 接收端点数据流方式\n    func session(session: MCSession!, didReceiveStream stream: NSInputStream!, withName streamName: String!, fromPeer peerID: MCPeerID!) &#123;\n        \n    &#125;\n    \n    &#x2F;&#x2F; 开始端点接收资源\n    func session(session: MCSession!, didStartReceivingResourceWithName resourceName: String!, fromPeer peerID: MCPeerID!, withProgress progress: NSProgress!) &#123;\n        \n    &#125;\n    \n    &#x2F;&#x2F; 接收端点资源完成\n    func session(session: MCSession!, didFinishReceivingResourceWithName resourceName: String!, fromPeer peerID: MCPeerID!, atURL localURL: NSURL!, withError error: NSError!) &#123;\n        \n    &#125;\n    \n    &#x2F;&#x2F;MARK: --实现MCNearbyServiceBrowserDelegate协议\n    func browserViewControllerDidFinish(browserViewController: MCBrowserViewController!) &#123;\n        self.dismissViewControllerAnimated(true, completion: nil)\n    &#125;\n    \n    func browserViewControllerWasCancelled(browserViewController: MCBrowserViewController!) &#123;\n        self.dismissViewControllerAnimated(true, completion: nil)\n    &#125;\n    \n&#125;\n\n\n\n</code></pre>\n\n","text":"#对等结构网络 对等结构网络是苹果的Ad Hoc网络的一种,是在小空间里构建无限网络的解决方案。苹果公司的GameKit或Multipeer Connectivity(多点连接）框架中提供了开发这种网络的APi. 在iOS7中，引入了一个全新的框架——Multipeer Conn...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"iOS网络编程","slug":"iOS网络编程","count":9,"path":"api/categories/iOS网络编程.json"}],"tags":[{"name":"Multipeer connectivity","slug":"Multipeer-connectivity","count":1,"path":"api/tags/Multipeer-connectivity.json"}],"toc":"","author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}},"mapped":true,"prev_post":{"title":"iBeacon 微定位技术","uid":"00d58d9a73e1bc4a1c001712fc4a5ff9","slug":"iBeacon-微定位技术","date":"2016-08-10T11:01:39.000Z","updated":"2019-05-14T04:53:35.000Z","comments":true,"path":"api/articles/iBeacon-微定位技术.json","keywords":null,"cover":[],"text":"在一家大型商场,医院或是大楼里,你是否会曾经有过找不到想要去的地方的经历呢?这种情况下采用上面介绍的传统定位方式,就有些”力不从心”了,首先不能采用GPS定位,而WiFi 和蜂窝式移动电话基站定位误差比较大,这种情况下的定位就是 “微定位”技术了 #地理围栏 微定位技术中一个比较...","link":"","photos":[],"count_time":{"symbolsCount":"9k","symbolsTime":"8 mins."},"categories":[{"name":"iOS SDK","slug":"iOS-SDK","count":18,"path":"api/categories/iOS-SDK.json"}],"tags":[{"name":"iBeacon","slug":"iBeacon","count":1,"path":"api/tags/iBeacon.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}},"next_post":{"title":"Bonjour网络编程","uid":"0cc4b6da7e6dbc367d1a0f5f752f14d7","slug":"Bonjour网络编程","date":"2016-08-10T10:53:34.000Z","updated":"2016-08-22T15:17:53.000Z","comments":true,"path":"api/articles/Bonjour网络编程.json","keywords":null,"cover":null,"text":"#Bonjour 介绍Bonjour(法语”你好’’的意思),它可以使应用不必指定眼务器端口和IP地址就可以以动态发现。 发现眼务是通过特定命名搜索服务的.例如”tony. _tonyipp. _tcp.local”这样的命名，发 现服务命名格式如下： &lt;服务名&gt;.〈...","link":"","photos":[],"count_time":{"symbolsCount":517,"symbolsTime":"1 mins."},"categories":[{"name":"iOS网络编程","slug":"iOS网络编程","count":9,"path":"api/categories/iOS网络编程.json"}],"tags":[{"name":"Bonjour","slug":"Bonjour","count":1,"path":"api/tags/Bonjour.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}}}