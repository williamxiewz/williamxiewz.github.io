{"title":"Tensorflow 在 iOS 平台的移植","uid":"e06b0538db7ceae1980a72095aa57bd5","slug":"Tensorflow-在-iOS-平台的移植","date":"2017-02-21T04:49:52.000Z","updated":"2019-05-14T04:53:28.000Z","comments":true,"path":"api/articles/Tensorflow-在-iOS-平台的移植.json","keywords":null,"cover":null,"content":"<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/makefile\">https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/makefile</a></p>\n<p>对于iOS平台下如何使用TensorFlow ，TensorFlow给出了详细的编译脚本命令，详情请查看官方文档的命令。</p>\n<p>工欲善其事必先利其器，在开始编译工作之前，需要准备一些编译所必须的工具：</p>\n<p>1.xcode<br>安装xcode 7.3 以及以上版本, 如果你没有,那么你可以在终端使用命令行进行安装</p>\n<pre><code>xcode-select --install\n</code></pre>\n<p>2.库</p>\n<p>Homebrew: Mac os x 上包管理工具，具体使用方法可参考Doc。</p>\n<p>$ /usr/bin/ruby -e “$(curl -fsSL <a href=\"https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;\">https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</a></p>\n<p>Homebrew安装好之后，依次安装三个辅助性编译工具：</p>\n<p>$ brew install libtool<br>$ brew install autoconf<br>$ brew install automake   </p>\n<p>三个工具的含义，请参考：<a href=\"https://en.wikipedia.org/wiki/GNU_Libtool\">https://en.wikipedia.org/wiki/GNU_Libtool</a></p>\n<p>克隆TensorFlow</p>\n<p>Google以Apache 2.0开源协议将TensorFlow开源在GitHub上，我们可以直接使用TensorFlow源码。</p>\n<p>在任意你想存放TensorFlow源码的地方 ，clone项目。</p>\n<p>$ git clone <a href=\"https://github.com/tensorflow/tensorflow\">https://github.com/tensorflow/tensorflow</a> </p>\n<ol start=\"4\">\n<li>下载graph</li>\n</ol>\n<p> mkdir -p ~/graphs<br> curl -o ~/graphs/inception.zip <br> <a href=\"https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip\">https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip</a> <br> &amp;&amp; unzip ~/graphs/inception.zip -d ~/graphs/inception</p>\n<p>　</p>\n<p> 一键编译</p>\n<p>　在TensorFlow的tensorflow/contrib/makefile/目录下，有很多可使用的编译脚本，其中build_all_ios.sh脚本专门用来一键编译TensorFlow iOS静态库。</p>\n<p>如果你仅仅想要快速的获取以及编译完成的Tensorflow静态库,你需要在Tensorflow根文件夹上运行以下这个命令:</p>\n<pre><code>tensorflow/contrib/makefile/build_all_ios.sh\n</code></pre>\n<p>在最新MacBook Pro机子上,这个编译过程大概需要20多分钟.</p>\n<p>当编译完成之后骂你将有个单一架构的静态库和benchmark 程序,尽管能够成功的编译benchmark 程序, 但是这个程序不是一个完整的iOS 项目</p>\n<p>想要实现 tensorflow 运行在iOS上, <a href=\"https://github.com/tensorflow/tensorflow/raw/master/tensorflow/contrib/ios_examples\">tensorflow/contrib/ios_examples</a>这个链接将要展示如何使用一个静态库</p>\n<p>手动编译</p>\n<p>This section covers each step of building. For all the code in one place, see build_all_ios.sh.</p>\n<p>这个章节将要覆盖编译的每一个步骤,build_all_ios.sh 是将所有的编译命令 集中在一起</p>\n<p>If you have not already, you will need to download dependencies:<br>下载依赖库</p>\n<pre><code>tensorflow/contrib/makefile/download_dependencies.sh\n</code></pre>\n<p>Next, you will need to compile protobufs for iOS:</p>\n<p>你需要编译 protobufs 库<br>    tensorflow/contrib/makefile/compile_ios_protobuf.sh </p>\n<p>Then, you can run the makefile specifying iOS as the target, along with the architecture you want to build for:<br>然后你可以在makefile文件中指定你想要变异的iOS 架构 </p>\n<p>make -f tensorflow/contrib/makefile/Makefile <br> TARGET=IOS <br> IOS_ARCH=ARM64</p>\n<p>This creates a library in <code>tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a</code> that you can link any xcode project against.</p>\n<p>创建的静态库 路径 <code>tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a</code> </p>\n<p>At this point, you will have a library for a single architecture and the benchmark program. Although successfully compiling the benchmark program is a sign of success, the program is not a complete iOS app.<br>这个时候 你将要有有一个库 在的单一架构 和 benchmark 程序 ,同样成功的信号说明 这个benchmark 程序 编译完成 ,但不是一个完整的iOS 项目.</p>\n<p>To see TensorFlow running on iOS, the example Xcode project in tensorflow/contrib/ios_examples shows how to use the static library in a simple app.</p>\n<p>Universal binaries<br>通用二进制</p>\n<p>In some situations, you will need a universal library. In that case, you will still need to run compile_ios_protobuf.sh, but this time follow it with:<br>在一些时候,你需要一个通用的二进制库. 这个时候 你将仍然需要先运行  compile_ios_protobuf.sh 脚步, 在执行以下脚本:</p>\n<pre><code>compile_ios_tensorflow.sh\n</code></pre>\n<p>In XCode, you will need to use -force_load in the linker flags section of the build settings to pull in the global constructors that are used to register ops and kernels.</p>\n<p>在xcode 你在需要build setting 中的linker flags section 设置 ‘-force_load’ </p>\n<p>Optimization</p>\n<p>优化</p>\n<p>The compile_ios_tensorflow.sh script can take optional command-line arguments. The first argument will be passed as a C++ optimization flag and defaults to debug mode. If you are concerned about performance or are working on a release build, you would likely want a higher optimization setting, like so:</p>\n<p>compile_ios_tensorflow.sh “-Os”<br>For other variations of valid optimization flags, see clang optimization levels.</p>\n<p><a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/ios_examples\">https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/ios_examples</a></p>\n<p>TensorFlow iOS Examples</p>\n<p>This folder contains examples of how to build applications for iOS devices using TensorFlow.</p>\n<p>Building the Examples</p>\n<p>You’ll need Xcode 7.3 or later, with the command-line tools installed.</p>\n<p>Follow the instructions at tensorflow/contrib/makefile under “iOS” to compile a static library containing the core TensorFlow code.</p>\n<p>From the root of the Tensorflow folder, download Inception v1, and extract the label and graph files into the data folders inside both the simple and camera examples:</p>\n<p>mkdir -p ~/graphs<br>curl -o ~/graphs/inception5h.zip <br> <a href=\"https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip\">https://storage.googleapis.com/download.tensorflow.org/models/inception5h.zip</a> <br> &amp;&amp; unzip ~/graphs/inception5h.zip -d ~/graphs/inception5h<br>cp ~/graphs/inception5h/* tensorflow/contrib/ios_examples/benchmark/data/<br>cp ~/graphs/inception5h/* tensorflow/contrib/ios_examples/camera/data/<br>cp ~/graphs/inception5h/* tensorflow/contrib/ios_examples/simple/data/<br>Load the Xcode project inside the simple subfolder, and press Command-R to build and run it on the simulator or your connected device.</p>\n<p>You should see a single-screen app with a “Run Model” button. Tap that, and you should see some debug output appear below indicating that the example Grace Hopper image has been analyzed, with a military uniform recognized.</p>\n<p>Once you have success there, make sure you have a real device connected and open up the Xcode project in the camera subfolder. Once you build and run that, you should get a live camera view that you can point at objects to get real-time recognition results.</p>\n<p>Troubleshooting</p>\n<p>If you’re hitting problems, here’s a checklist of common things to investigate:</p>\n<p>Make sure that you’ve run the build_all_ios.sh script. This will run download_dependencies.sh,compile_ios_protobuf.sh and compile_ios_tensorflow.sh. (check each one if they have run successful.)</p>\n<p>Check that you have version 7.3 of Xcode.</p>\n<p>If there’s a complaint about no Sessions registered, that means that the C++ global constructors that TensorFlow relies on for registration haven’t been linked in properly. You’ll have to make sure your project uses force_load, as described below.</p>\n<p>Creating your Own App</p>\n<p>You’ll need to update various settings in your app to link against TensorFlow. You can view them in the example projects, but here’s a full rundown:</p>\n<p>The compile_ios_tensorflow.sh script builds a universal static library in tensorflow/contrib/makefile/gen/lib/libtensorflow-core.a. You’ll need to add this to your linking build stage, and in Search Paths add tensorflow/contrib/makefile/gen/lib to the Library Search Paths setting.</p>\n<p>You’ll also need to add libprotobuf.a and libprotobuf-lite.a from tensorflow/contrib/makefile/gen/protobuf_ios/lib to your Build Stages and Library Search Paths.</p>\n<p>The Header Search paths needs to contain:</p>\n<p>the root folder of tensorflow,<br>tensorflow/contrib/makefile/downloads/protobuf/src<br>tensorflow/contrib/makefile/downloads,<br>tensorflow/contrib/makefile/downloads/eigen, and<br>tensorflow/contrib/makefile/gen/proto.<br>In the Linking section, you need to add -force_load followed by the path to the TensorFlow static library in the Other Linker Flags section. This ensures that the global C++ objects that are used to register important classes inside the library are not stripped out. To the linker, they can appear unused because no other code references the variables, but in fact their constructors have the important side effect of registering the class.</p>\n<p>You’ll need to include the Accelerate framework in the “Link Binary with Libraries” build phase of your project.</p>\n<p>C++11 support (or later) should be enabled by setting C++ Language Dialect to GNU++11 (or GNU++14), and C++ Standard Library to libc++.</p>\n<p>The library doesn’t currently support bitcode, so you’ll need to disable that in your project settings.</p>\n<p>Remove any use of the -all_load flag in your project. The protocol buffers libraries (full and lite versions) contain duplicate symbols, and the -all_load flag will cause these duplicates to become link errors. If you were using -all_load to avoid issues with Objective-C categories in static libraries, you may be able to replace it with the -ObjC flag.</p>\n<p>Reducing the binary size</p>\n<p>TensorFlow is a comparatively large library for a mobile device, so it will increase the size of your app. Currently on iOS we see around a 11 MB binary footprint per CPU architecture, though we’re actively working on reducing that. It can be tricky to set up the right configuration in your own app to keep the size minimized, so if you do run into this issue we recommend you start by looking at the simple example to examine its size. Here’s how you do that:</p>\n<p>Open the Xcode project in tensorflow/contrib/ios_examples/simple.</p>\n<p>Make sure you’ve followed the steps above to get the data files.</p>\n<p>Choose “Generic iOS Device” as the build configuration.</p>\n<p>Select Product-&gt;Build.</p>\n<p>Once the build’s complete, open the Report Navigator and select the logs.</p>\n<p>Near the bottom, you’ll see a line saying “Touch tf_ios_makefile_example.app”.</p>\n<p>Expand that line using the icon on the right, and copy the first argument to the Touch command.</p>\n<p>Go to the terminal, type ls -lah and then paste the path you copied.</p>\n<p>For example it might look like ls -lah /Users/petewarden/Library/Developer/Xcode/DerivedData/tf_ios_makefile_example-etdbksqytcnzeyfgdwiihzkqpxwr/Build/Products/Debug-iphoneos/tf_ios_makefile_example.app</p>\n<p>Running this command will show the size of the executable as the tf_ios_makefile_example line.</p>\n<p>Right now you’ll see a size of around 23 MB, since it’s including two architectures (armv7 and arm64). As a first step, you should make sure the size increase you see in your own app is similar, and if it’s larger, look at the “Other Linker Flags” used in the Simple Xcode project settings to strip the executable.</p>\n<p>After that, you can manually look at modifying the list of kernels included in tensorflow/contrib/makefile/tf_op_files.txt to reduce the number of implementations to the ones you’re actually using in your own model. We’re hoping to automate this step in the future, but for now manually removing them is the best approach.</p>\n","text":"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/makefile 对于iOS平台下如何使用TensorFlow ，TensorFlow给出了详细的编译脚本命令，详情请查看官方文档的命令...","link":"","photos":[],"count_time":{"symbolsCount":"9.7k","symbolsTime":"9 mins."},"categories":[{"name":"Machine Learning","slug":"Machine-Learning","count":2,"path":"api/categories/Machine-Learning.json"}],"tags":[{"name":"Tensorflow","slug":"Tensorflow","count":1,"path":"api/tags/Tensorflow.json"},{"name":"iOS","slug":"iOS","count":1,"path":"api/tags/iOS.json"}],"toc":"","author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}},"mapped":true,"prev_post":{"title":"发布自己的pods到CocoaPods trunk","uid":"391bdcc94651b98f450f3675b7014474","slug":"发布自己的pods到CocoaPods-trunk","date":"2017-03-15T14:45:58.000Z","updated":"2017-03-16T03:45:39.000Z","comments":true,"path":"api/articles/发布自己的pods到CocoaPods-trunk.json","keywords":null,"cover":null,"text":"使用CocoaPods trunk之前请确认CocoaPods版本是否是0.33或以上，打开Teaminal(终端)输入pod –version即可查看，如果版本过低，请执行sudo gem install cocoapods安装最新版本！ 1.注册trunkpod trunk ...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}},"next_post":{"title":"Ubuntu 14.04 远程登录服务器 ssh配置","uid":"d1eb6b3046bcdf2d58e7f3badfd9e924","slug":"Ubuntu-14-04-远程登录服务器-ssh配置","date":"2017-01-10T08:28:20.000Z","updated":"2017-03-16T04:31:43.000Z","comments":true,"path":"api/articles/Ubuntu-14-04-远程登录服务器-ssh配置.json","keywords":null,"cover":null,"text":"sudo apt-get updatesudo apt-get install openssh-server sudo ps -e |grep ssh”–&gt;回车–&gt;有sshd,说明ssh服务已经启动，如果没有启动，输入”sudo service ssh start “...","link":"","photos":[],"count_time":{"symbolsCount":330,"symbolsTime":"1 mins."},"categories":[{"name":"cloud computing","slug":"cloud-computing","count":2,"path":"api/categories/cloud-computing.json"}],"tags":[{"name":"Cloud Computing","slug":"Cloud-Computing","count":2,"path":"api/tags/Cloud-Computing.json"},{"name":"Ubuntu","slug":"Ubuntu","count":2,"path":"api/tags/Ubuntu.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}}}