{"title":"Xcode Server 教程1：入门","uid":"68a518161e274e65975910a88128b5b1","slug":"Xcode-Server-教程1-入门","date":"2016-08-17T05:03:42.000Z","updated":"2019-05-14T04:53:27.000Z","comments":true,"path":"api/articles/Xcode-Server-教程1-入门.json","keywords":null,"cover":[],"content":"<p><a href=\"https://honzadvorsky.com/articles/2015-08-04-xcs_tutorials_1_getting_started/\">原文翻译地址</a></p>\n<p>这篇文章是Xcode Server系列教程的第一部分。新的文章将会在我的Twitter（<a href=\"https://twitter.com/czechboy0\">@czechboy0</a>）上发布。</p>\n<p>#前言</p>\n<p>我们都知道Xcode Server是如何工作的。你的iOS团队成员花费数周的时间做一个特征分支，并且在这段时间里他没有把别人所做的修改合并到自己的代码里面。当PM催促团队成员交付既定的功能时，他会创建一个pull请求。人们快速浏览代码（因为它包含四千多行追加代码），完成代码审核之后，合并代码，一切就完成了，对吗？</p>\n<p>并非如此。</p>\n<p>你着手于新特征，期待有喝彩和掌声，因为这也预示着接下来几周要辛苦工作。然而，你却沉溺于Twitter。最终，你没有对新特征进行适当的测试，应用程序在32位设备上崩溃了。</p>\n<p>这并不是一个真实的故事，但却时有发生。我们大多数人都在这样团队工作过：<a href=\"https://en.wikipedia.org/wiki/Continuous_integration\">持续集成</a>（CI）不是他们工作的一部分。或许他们认为自己的团队太小没必要使用这么先进的工具，也或许他们太忙没有时间安装。</p>\n<pre><code>持续集成是一种软件开发实践，即了解你合并的内容，时常合并。\n</code></pre>\n<p>这是我个人对持续集成的理解。在上面的事例中，这两个特性都被破坏了。首先，团队不知道他们在合并什么东西（一个bug使得他们的app无法在32位设备上使用）。其次，由于没有时常合并代码，导致最后存在大量差异，无人可以对这样的代码进行合理评审。只要他们使用CI工具，遵循CI实践，这两个问题都是可以避免的。</p>\n<p>如果你的团队还没有使用CI，或者你们已经使用了集成工具但使用效果并不令人满意，那么这篇文章就是为你而准备的。今天，我将展示如何使用Apple公司开发的持续集成服务器——<a href=\"http://help.apple.com/serverapp/mac/4.0/#/apdEC37D10C-B277-4C06-9E1F-8DCB0A5970EB\">XCode Server</a>（简写为“XCS”）。</p>\n<span id=\"more\"></span>\n<p>XCS之所以能成为我所有项目的专用解决方案，原因有很多：</p>\n<ul>\n<li>免费</li>\n<li>自托管</li>\n<li>可以在已连接的iOS设备上进行测试</li>\n<li>支持应用程序的OTA安装，即时可用</li>\n<li>你可以控制它的XCode版本（不需要等别人来为你更新）</li>\n<li>最重要的是，XCS是由XCode的维护者开发的，这意味着你可以得到XCode最新版本和最新特性的支持，这些特性包括代码覆盖图、行为测试结果等等。简直是无与伦比。</li>\n</ul>\n<p>今天，我将展示如何进行基本的配置。在这个系列的后续文章中，我将解释如何从中获取CocoaPods（甚至是私有pod）之类的工具，如何归档Ad Hoc 和App Store版本，如何插入诸如“<a href=\"https://github.com/czechboy0/Buildasaur\">Buildasaur</a> ”和“<a href=\"https://fastlane.tools/\">fastlane</a> ”之类的工具，甚至如何编写相对于Xcode Server API的程序。总的说来，我会展示如何充分利用XCode Server。</p>\n<p>这个系列主要讲述如何使用XCode Server。如果你想了解XCode Server内部是如何工作的，我已经写过这样的一篇<a href=\"http://honzadvorsky.com/articles/2015-05-04-under-the-hood-of-xcode-server/\">文章</a>。</p>\n<p>#所需软件清单</p>\n<p>为了深入理解这篇文章，你需要：</p>\n<ul>\n<li>装有OS X10.10或者以上版本的Mac，Xcode 6或者更高版本</li>\n<li>访问Developer Portal的苹果开发者账号</li>\n</ul>\n<p>#环境</p>\n<p>我选择使用XCode 7 beta 3和OS X Server5 beta 3，尽管它们都是测试版。与OS X Server 4和XCode 6 没有太大区别。所以都使用旧一点的版本应该也没有问题（只是屏幕看上去会有些许不同）。</p>\n<p>#本文主旨</p>\n<p>本文中，我们要在你的Mac上安装OS X Server，并使得它与XCode可以一起使用。然后我们在XCode Server上创建一个Bot，来测试一个从GitHub下载下来的iOS 应用程序。 就这样。非常简单易懂，这篇文章接下来的部分，我们会更接近一个真实的，更为复杂的iOS开发团队建立。</p>\n<p>我们开始吧！</p>\n<p>#1.下载OS X Server</p>\n<p>XCode需要 OS X Server开启持续集成服务。在Mac App Store上下载OS X Server一般要花费19.99美元。然而，iOS和Mac 开发者可以免费下载。接下来我们要进行免费下载。</p>\n<p>浏览开发者门户的OS X <a href=\"https://developer.apple.com/osx/download/\">下载区</a>，下载最新版本的OS X Server5（你需要登录你的开发者账户。）</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart11.jpg\"></p>\n<p>现在点击已下载的安装包，安装OS X Server。</p>\n<p>#2.启用XCode Server</p>\n<p>启动OS X Server（在你的应用程序文件夹下，名字为“Server.app”）,点击Services下面的Xcode。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart12.jpg\"></p>\n<p>然后你需要告诉 OS X Server 使用哪一个XCode，点击“Choose Xcode…”，选择你的XCode 7（XCode 6 也可以）就可以了。</p>\n<p>接下来，XCode Server需要花费大约30秒完成准备工作。之后点击右上角的ON 开关，状态文本将会变成“Starting”。当所有准备工作完成，开始运行的时候，可以看到一个绿色的圆点和“Available on your local network…”。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart13.jpg\"></p>\n<p>好了，你建立起一个XCode Server！</p>\n<p>#3.检出我们的测试工程</p>\n<p>现在，我们创建一个Bot来测试GitHub上的一个应用程序（这是我为你特别准备的，是不是很善解人意？）正如你期望的，它叫做，“<a href=\"https://github.com/czechboy0/XCSTutorialProject1\">XCSTutorial Project1</a>”。它是一个带有iOS 应用程序目标的XCode工程。</p>\n<p>创建Bot的一种方式是直接由XCode创建。为了后续工作顺利进行，首先需要将你的工程检出到本地。现在我们进行检出。打开终端，切换到工作路径下，比如在你的文档目录下，运行下面的三个命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone --branch step1 git@github.com:czechboy0/XCSTutorialProject1.git\n<span class=\"token builtin class-name\">cd</span> XCSTutorialProject1\n<span class=\"token function\">open</span> XCSTutorialProject1.xcodeproj<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>这会把工程克隆到本地（向导的第一步）并在XCode中打开。请确保你正在使用的XCode与之前在XCode Server中选择的XCode是同一个（最好是XCode 7）。</p>\n<p>#4.在XCode中追加Server</p>\n<p>在我们创建Bot之前，我们需要在XCode注册我们新创建的XCode Server。选择 XCode 的<code>Preferences</code> (CMD+,)，然后选择“Accounts”，在底端点击加号按钮，选择“Add Server”。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart14.jpg\"> </p>\n<p>在地址栏输入本机地址（127.0.0.1），因为刚刚在本机上安装了XCode Server……</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart15.jpg\"></p>\n<p>然后输入凭证（与Mac账户的凭证相同，对我来说是 User Name: honzadvorsky和我的登录密码。）</p>\n<p>点击“Add”之后，你会看到你的服务器被追加到XCode的Preference里面。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart16.jpg\"></p>\n<p>#5.创建一个Bot</p>\n<p>我一直在说Bot，但是它们到底是什么东西呢？</p>\n<p><code>Bot</code>，是一个XCS 的专业术语，是一个构建工作的描述。它告诉XCode Server 代码位置，如何去生成以及测试代码，在生成结束以后通知哪些人等等。运行一次这样的<code>Bot</code>叫做<code>集成</code>。集成产生有价值的东西，比如archives、IPA、测试结果和日志。</p>\n<p>现在来创建我们的第一个Bot。Bot的控制按钮隐藏在XCode左边区域的最后一列，Report导航栏下。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart17.jpg\"></p>\n<p>在左下方，点击齿轮图标和“Create Bot…”。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart18.jpg\"></p>\n<p>现在可以看到弹出了一个与下面类似的表单，注意，复选框要求你共享scheme。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart19.jpg\"></p>\n<p>这是什么意思呢？</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Scheme 是你 xcodeproj j和 xcworkspace文件夹下的文件，描述了使用哪一个目标（例如 XCSTutorialProject1 - iOS app）和如何生成（例如Debug 或者 Release）。只有共享的schema才可以检入到你的代码库，并且只有这些共享的schema可以被持续集成服务例如XCode Server使用。</p></blockquote>\n<p>总体而言，schema是一个生成方案。所以要确保XCode Server可以看到它，这里我们通过共享实现（当在XCode里面编辑scheme的时候，点击Shared 复选框，这会将scheme加入到我们的代码库中）。</p>\n<p>第一次在你的项目中创建Bot，你会看到这个。通常，你会继续并让XCode提交scheme到你的代码库。但是我已经为你做完了这些。所以，点击Cancel，转到终端，在你的工程文件夹下运行下面的命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> checkout step2<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p>然后重启XCode（抱歉，XCode不喜欢自己修改scheme），重复Bot创建过成。这一次，应该没有关于scheme的消息了，正如下面截图所示。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart110.jpg\"></p>\n<p>点击下一步，此处你的XCode将会检查是否有权访问你的（实际上，此处是我的）代码库。很有可能（如果你像我一样使用一个自签证书）会首先看到XCode抱怨<code>“The server SSH fingerprint failed to verify.”</code>这是XCode 7的新的特性，来防止<a href=\"https://en.wikipedia.org/wiki/Man-in-the-middle_attack\">MITM</a>袭击。你需要点击“View”然后点击“Trust”。这意味着你声明：“没有问题，XCode。我了解并且相信这个XCode Server，不需要担心。”</p>\n<p>然后，如果你还没有在XCode的Preferences -&gt; Accounts中登录到你的代码库，XCode会要求你“登录”，它说<code>“请提供证书，以便于XCode Server可以从这个代码库中检出文件。”</code>点击“登录”，告诉XCode，是要创建新的SSH键还使用既存的。因为在 ~/.ssh/里面已经存在SSH键，所以我告诉XCode “使用既存的SSH键”。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart111.jpg\"></p>\n<p>你的Bot会获取选定分支上的变更，生成代码的最新版本。这意味着如果你想在多分支上测试代码，比如说 master 和 release两个分支，你需要为它们创建两个独立的Bot（在后续的教程中，我们利用<a href=\"https://github.com/czechboy0/Buildasaur\">Buildasaur</a>使得这个过程连贯起来）。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart112.jpg\"></p>\n<p>选择master，然后点击Next。等一下你会看到所有Bot的配置选项。我们来看一下这些都意味着什么（这段时间比较适合去喝一杯咖啡或者去趟洗手间……伦敦现在的天气不错，不是吗？……板球……好了，回到Bots！）</p>\n<p>#6.Bot配置</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart113.jpg\"></p>\n<p><code>Schedule</code>告诉Bot什么时候运行:</p>\n<ul>\n<li>Periodical 意味着Bot每小时，每天还是每周运行一次</li>\n<li>On Commit使得Bot每5分钟从代码库获取一次最新代码，并且无论何时，发现新的提交任务，都会启动新的集成。在 master 分支上的On Commit Bot可以帮助你快速的发现什么时候测试开始失败，而不需要每个人都记着去手工执行测试</li>\n<li>Manual 只有当点击XCode中的“集成”时才会运行</li>\n</ul>\n<p><code>Actions</code> 告诉Bot要做那些工作:</p>\n<ul>\n<li>Perform analyze action运行静态分析</li>\n<li>Perform test action运行应用程序测试</li>\n<li>Perform archive action存档你的应用程序，以备在TestFlight或者应用程序商店发布时使用。</li>\n<li>允许查看测试覆盖了哪些代码，这个选项会迫使XCode Server收集覆盖率数据而无需在scheme中将偏好设置为on。如果在本地运行测试，你不想收集覆盖率数据，但又需要利用在CI 服务器运行时的覆盖率，这个特性就显得非常有用。</li>\n<li>标记和导出，应用程序从生成档案中通过Wi-Fi直接安装到iOS设备上，以后我会专门写一篇文章介绍你应该如何实现这一操作。</li>\n</ul>\n<p><code>Configuration</code> 允许重写Bot的生成配置（Debug，Release……）。我总是选择默认的“Use Scheme Setting”。</p>\n<p><code>Cleaning</code>通过定期地清除它的所有资源并从scratch上检出代码库，确保Bot不会依赖于 DerivedData 的状态，或者它的源文件夹。你曾经遇到过损坏的 Pods 文件夹吗？这是一种在新的集成（从scratch上检出所有的东西）开始之前移除所有的产品、中间文件和源文件夹的方式。选项有：</p>\n<ul>\n<li>Always – 每次集成前移除所有的产品和中间产物</li>\n<li>Once a day – 每天只有第一次集成从scratch开始</li>\n<li>Once a week – 每周只有第一次集成从scratch开始</li>\n<li>Never – 不能自动移除产品</li>\n</ul>\n<p>选项很多，是吗？但是，无需担心，一般使用默认值就可以了。如果不做任何更改，应该是不会有问题的。</p>\n<p>现在请确保“Perform test action”被选中，点击下一步。</p>\n<p>在这里，XCode 7 Beta 4 似乎有一个bug，XCode崩溃了。并不是对所有用户都出现，但是如果你的XCode此时崩溃了，请安装 <a href=\"https://developer.apple.com/services-account/download?path=/Developer_Tools/Xcode_7_beta_5/Xcode_7_beta_5.dmg\">XCode7 Beta 5</a> 或者以上版本来代替之前的XCode。</p>\n<p>你将会看到一个标题为“Choose the devices that this bot will test with”的页面，这正是我们现在要选择的。在顶端的下拉框中有一个值是“iOS”，并且是不可用的。这是因为在一开始选择的这个scheme告诉XCode Server 我们在一个iOS 目标上生成。</p>\n<p><code>Test With</code> 给了你四个选项：</p>\n<ul>\n<li>All iOS Devices and Simulators – 在所有已连接的iOS设备和模拟器上进行测试。这会花费一定的时间，因为每个版本的iOS都有10多个模拟器。如果你安装了两个XCode，像我现在这样，就要测试iOS8.4和 iOS 9.0，一共有20多个设备。然而，如果是只花费几秒钟的单元测试，这个时间是可以的。</li>\n<li>All iOS Devices – 所有已连接的iOS设备，不包含模拟器。</li>\n<li>All iOS Simulators –所有的iOS模拟器，不包含已连接的iOS设备。</li>\n<li>Specific iOS Devices – 指定的模拟器和已连接的iOS设备。</li>\n</ul>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart114.jpg\"></p>\n<p>我们选择最后一个选项，指定的iOS设备，选择3个设备进行测试。如果你已经连接了一个开发设备，它会直接显示在列表中，你可以将它包含到你的测试进程（超简单）。</p>\n<p>一直点下一步，直到看到一个叫做“Configure Bot triggers”的页面。</p>\n<p><code>触发器</code>是一种在集成之前或者之后运行的行为。XCode Server支持两种触发器类型：脚本和发送邮件通知。</p>\n<p>使用<code>脚本</code>，你基本上可以实现实现所有功能：运行 pod install，或者 fastlane ，甚至是当生成结束以后通知其他成员。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart115.jpg\"></p>\n<p><code>Weirdness Alert</code> – 有个地方特别容易出错。当XCode Server检出代码库的时候，没有把路径变更到附录文件夹（就像你运行 git clone …到本地的时候，你需要将路径改变到你的工程目录）。因此在你的脚本中，需要做的第一件事情是 cd PROJECT_NAME （在我们的案例中是 cd XCSTutorialProject1)然后再运行 pod install 或者 fastlane。</p>\n<p>第二个触发器类型是<code>发送邮件通知</code>，它并不是你期望的那样。当集成结束的时候它会给你发送一封邮件。然而它比这更聪明。它可以发送邮件给所有的提交者，因为它知道谁在上一次集成后提交过代码。这样，只有变更代码的人会被通知。如果想让某些地址总是可以收到这些邮件，你也可以追加。</p>\n<p>你也可以指定当集成失败的时候只通知你，你也可以控制这些邮件的内容。非常棒！</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart116.jpg\"></p>\n<p>创建一种类型的邮件通知，追加上你的邮件地址。但是，不要勾选Bot中发送给所有的提交者复选框。否则，我会收到你完成集成的邮件（因为我是所有这些内容的提交者。）这是XCode Server一个非常有趣的地方——它的邮件系统不是为开源项目设计的。</p>\n<p>你点击“Create”之后，应该可以看到你创建第一个Bot的请求成功了。</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopxcodeserverpart117.jpg\"></p>\n<p>祝贺你！创建了第一个Bot。</p>\n<p>很好奇你刚才做的这些有什么意义？看一下<a href=\"http://honzadvorsky.com/articles/2015-08-06-xcs_tutorials_2_integrations\">教程2</a>，在那篇文章中我们将详细讲解集成结果！</p>\n","text":"原文翻译地址 这篇文章是Xcode Server系列教程的第一部分。新的文章将会在我的Twitter（@czechboy0）上发布。 #前言 我们都知道Xcode Server是如何工作的。你的iOS团队成员花费数周的时间做一个特征分支，并且在这段时间里他没有把别人所做的修改合并...","link":"","photos":[],"count_time":{"symbolsCount":"6.5k","symbolsTime":"6 mins."},"categories":[{"name":"Mac OS Server","slug":"Mac-OS-Server","count":5,"path":"api/categories/Mac-OS-Server.json"}],"tags":[{"name":"Xcode Server","slug":"Xcode-Server","count":5,"path":"api/tags/Xcode-Server.json"}],"toc":"","author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}},"mapped":true,"prev_post":{"title":"Xcode Server 教程2: 集成","uid":"9548d9afc15ee6211ee05b4849a8d7df","slug":"Xcode-Server-教程2-集成","date":"2016-08-17T05:11:40.000Z","updated":"2016-08-22T09:29:52.000Z","comments":true,"path":"api/articles/Xcode-Server-教程2-集成.json","keywords":null,"cover":null,"text":"原文翻译地址 This article is Part 2 of a whole series called Xcode Server Tutorials. Check out Part 1 first if you haven’t already. New posts are ...","link":"","photos":[],"count_time":{"symbolsCount":"7.6k","symbolsTime":"7 mins."},"categories":[{"name":"Mac OS Server","slug":"Mac-OS-Server","count":5,"path":"api/categories/Mac-OS-Server.json"}],"tags":[{"name":"Xcode Server","slug":"Xcode-Server","count":5,"path":"api/tags/Xcode-Server.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}},"next_post":{"title":"iOS Xcode Server 持续集成","uid":"4f32058287c9be1a1db4b39798fb03e9","slug":"iOS-Xcode-Server-持续集成","date":"2016-08-17T05:02:45.000Z","updated":"2016-08-19T05:20:20.000Z","comments":true,"path":"api/articles/iOS-Xcode-Server-持续集成.json","keywords":null,"cover":[],"text":"转载自牧码人_简书 #前言常用的持续集成工具有Jenkins、Travis CI、Xcode server等，当然我们选择最简单的Xcode server。 OS X server中集成了git版本管理功能，Xcode server持续集成服务，还有wiki知识库管理等，你甚至还...","link":"","photos":[],"count_time":{"symbolsCount":"2.9k","symbolsTime":"3 mins."},"categories":[{"name":"Mac OS Server","slug":"Mac-OS-Server","count":5,"path":"api/categories/Mac-OS-Server.json"}],"tags":[{"name":"Xcode Server","slug":"Xcode-Server","count":5,"path":"api/tags/Xcode-Server.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}}}