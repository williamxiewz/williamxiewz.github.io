{"title":"Google Cardboard for iOS 虚拟现实开发","uid":"0253063df22cd83edff3aeaf17dd4742","slug":"Google-Cardboard-for-iOS-虚拟现实开发","date":"2016-07-08T09:07:56.000Z","updated":"2019-05-14T04:53:37.000Z","comments":true,"path":"api/articles/Google-Cardboard-for-iOS-虚拟现实开发.json","keywords":null,"cover":[],"content":"<p><a href=\"https://developers.google.com/vr/ios/get-started\">原文链接</a></p>\n<p>This document describes how to use the Google VR SDK for iOS (iOS SDK) to create your own Virtual Reality (VR) experiences.</p>\n<p>You can use a VR viewer, such as Google Cardboard, to turn your smartphone into a VR platform. Your phone can display 3D scenes with binocular rendering, track and react to head movements, and interact with apps by activating the trigger input.</p>\n<p>Note: The various manufacturers of smartphone VR viewers use different methods to simulate when a user taps the screen of their phone to interact with an app. These can include pulling a magnet and pressing a button. On some viewer models, the user actually does touch the screen of their phone so there is no simulation required. To keep things simple, on this page we’ll refer to these methods collectively as “activating the trigger input.”<br>The iOS SDK contains tools for spatial audio that go far beyond simple left side/right side audio cues to offer 360 degrees of sound. You can also control the tonal quality of the sound—for example, you can make a conversation in a small spaceship sound drastically different than one in a large, underground (and still virtual) cave.</p>\n<p>The demo app used in this tutorial, “Treasure Hunt,” is a basic game, but it demonstrates the core features of the Google VR SDK. In the game, users look around a virtual world to find and collect objects. It demonstrates some basic features, such as lighting, movement in space, and coloring. It shows how to set up the trigger input, detect if the user is looking at something, set up spatial audio, and render images by providing a different view for each eye.</p>\n<span id=\"more\"></span>\n<p>这个 Cardboard SDK 可以让你很方便的控制音频的空间感（例如左右声道），也可以控制响度，所以你可以让一段对话在一个小飞船中或者一个很大的地下洞穴中表现得很不一样。</p>\n<p>在这个示例程序中我们完成了一个寻宝游戏，他演示了 Cardboard 的核心功能。玩家将会在一个虚拟的世界中寻找宝物。你将会学习如何使用光照、空间运动和着色等基本功能如果玩家看见了他要找的东西，将会触发空间音效和视差效果。</p>\n<p>#基本要求</p>\n<p>为了能够运行这个示例程序，你至少需要满足以下条件：</p>\n<ul>\n<li>Xcode 7.1 或更高版本</li>\n<li>CocoaPods,访问 <a href=\"https://cocoapods.org/\">CocoaPods</a> 来安装。</li>\n<li>一部运行 iOS 7.0 或更高版本的 iPhone。</li>\n</ul>\n<p>#下载并构建 app</p>\n<p>1.首先将项目 clone 到本地：</p>\n<pre><code>git clone https://github.com/googlesamples/cardboard-ios.git\n</code></pre>\n<p>2.在你的命令行中，进入到 CardboardSamples 里的 TreasureHunt 文件夹然后执行：</p>\n<pre><code>pod update\n</code></pre>\n<p>这将会安装项目所有的依赖。</p>\n<p>因为你懂的原因出现下面的情况:<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopgooglecardboard1-1.png\"></p>\n<p>但是我又有强迫症,所以使用这么的方式让Terminal也能在翻墙(本人使用Surge Mac 版)<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopgooglecardboard1-2.png\"><br>下载速度:<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopgooglecardboard1-3.png\"><br>结果如下:<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopgooglecardboard1-4.png\"><br>3.现在你应该能看见 TreasureHunt.xcworkspace 文件了，用 Xcode 运行起来应该像这个样子：在 Xcode 上运行 TreasureHunt<br><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopgooglecardboard1.png\"></p>\n<p>#开始游戏</p>\n<p>现在戴上你的耳机，来在这个虚拟现实的空间里搜寻宝物吧！</p>\n<p>##寻找宝物</p>\n<p>1.四处移动你的方向，直到宝物进入你的视野：宝物已经在视野中显示了</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopgooglecardboard2.png\"><br>2.直视这个宝物，他将会变成橘色：直视宝物的时候它变成橘色了</p>\n<p><img src=\"https://github.com/williamxiewz/williamxie-github-io/raw/master/appledevelopgooglecardboard3.png\"></p>\n<p>3.激活开关就可以收集宝物（根据 Cradboard 的不同，可能是拨动物理按钮也可能是触碰屏幕之类的)</p>\n<p>#代码概览</p>\n<p>这个寻宝游戏（TreasureHunt）通过 OpenGL 来为你的双眼呈现不同的讯息，他们是这样工作的：</p>\n<ul>\n<li>一个 <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/\">UIViewController</a> 拥有一个 <a href=\"https://developers.google.com/vr/ios/reference/interface_g_v_r_cardboard_view.html\">GCSCardboardView</a> 对象</li>\n<li>一个渲染器遵循 <a href=\"https://developers.google.com/vr/ios/reference/protocol_g_v_r_cardboard_view_delegate-p.html\">GCSCardboardViewDelegate</a> 协议</li>\n<li>通过 <a href=\"https://developer.apple.com/library/prerelease/ios/documentation/QuartzCore/Reference/CADisplayLink_ClassRef/index.html\">CADisplayLink</a> 对象添加一个渲染循环</li>\n<li>捕获输入</li>\n</ul>\n<p>##让UIViewController拥有一个 GCSCardboardView</p>\n<p>这个寻宝游戏定义了一个 <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/\">UIViewController</a>，也就是 TreasureHuntViewController，他拥有一个 <a href=\"https://developers.google.com/vr/ios/reference/interface_g_v_r_cardboard_view.html\">GCSCardboardView</a>，并且有一个遵循 <a href=\"https://developers.google.com/vr/ios/reference/protocol_g_v_r_cardboard_view_delegate-p.html\">GCSCardboardViewDelegate</a> 协议的 TreasureHuntRenderer 的实例来成为 GCSCardboardView 的代理。 此外，这个应用有一个渲染循环，TreasureHuntRenderLoop 这个类，他有一个 <a href=\"https://developers.google.com/vr/ios/reference/interface_g_v_r_cardboard_view.html#method-detail\">-render</a> 方法来GCSCardboardView。</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">- (void)loadView &#123;\n  _treasureHuntRenderer &#x3D; [[TreasureHuntRenderer alloc] init];\n  _treasureHuntRenderer.delegate &#x3D; self;\n\n  _cardboardView &#x3D; [[GVRCardboardView alloc] initWithFrame:CGRectZero];\n  _cardboardView.delegate &#x3D; _treasureHuntRenderer;\n  ...\n  _cardboardView.vrModeEnabled &#x3D; YES;\n  ...\n  self.view &#x3D; _cardboardView;\n&#125;</code></pre>\n\n<p>##定义一个遵循GCSCardboardViewDelegate协议的渲染器</p>\n<p><a href=\"https://developers.google.com/vr/ios/reference/interface_g_v_r_cardboard_view.html\">GCSCardboardView</a> 将会用于向你展示内容，他通过 <a href=\"https://developers.google.com/vr/ios/reference/protocol_g_v_r_cardboard_view_delegate-p.html\">GCSCardboardViewDelegate</a> 协议来完成这些工作，所以 TreasureHuntRenderer 将会遵循 GCSCardboardViewDelegate协议：</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">#import &quot;GVRCardboardView.h&quot;\n\n&#x2F;** TreasureHunt renderer. *&#x2F;\n@interface TreasureHuntRenderer : NSObject&lt;GVRCardboardViewDelegate&gt;\n\n@end</code></pre>\n\n<p>##声明 GCSCardboardViewDelegate 协议中的内容</p>\n<p>为了在 <a href=\"https://developers.google.com/vr/ios/reference/interface_g_v_r_cardboard_view.html\">GCSCardboardView</a> 显示内容，TreasureHuntRenderer 需要遵循 <a href=\"https://developers.google.com/vr/ios/reference/protocol_g_v_r_cardboard_view_delegate-p.html\">GCSCardboardViewDelegate</a> 的这些协议：</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">@protocol GCSCardboardViewDelegate&lt;NSObject&gt;\n \n- (void)cardboardView:(GCSCardboardView *)cardboardView\n         didFireEvent:(GCSUserEvent)event;\n \n- (void)cardboardView:(GCSCardboardView *)cardboardView\n     willStartDrawing:(GCSHeadTransform *)headTransform;\n \n- (void)cardboardView:(GCSCardboardView *)cardboardView\n     prepareDrawFrame:(GCSHeadTransform *)headTransform;\n \n- (void)cardboardView:(GCSCardboardView *)cardboardView\n              drawEye:(GCSEye)eye\n    withHeadTransform:(GCSHeadTransform *)headTransform;\n \n- (void)cardboardView:(GCSCardboardView *)cardboardView\n   shouldPauseDrawing:(BOOL)pause;\n \n@end</code></pre>\n\n<p>接下来我们将实现 <code>willStartDrawing</code>，<code>prepareDrawFrame</code>，和 <code>drawEye</code> 方法。</p>\n<p>##实现 willStartDrawing 方法</p>\n<p>要执行 GL(Graphics Library) 一次性初始化，实现 <a href=\"https://developers.google.com/vr/ios/reference/protocol_g_v_r_cardboard_view_delegate-p.html#method-detail\">-cardboardView:willStartDrawing:</a> 方法，并在其中来加载着色器初始化集合场景并添加到 GL 的参数中，并且还初始化了一个 <a href=\"https://developers.google.com/vr/ios/reference/interface_g_v_r_audio_engine\">GCSCardboardAudioEngine</a> 实例：</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">- (void)cardboardView:(GVRCardboardView *)cardboardView\n     willStartDrawing:(GVRHeadTransform *)headTransform &#123;\n  &#x2F;&#x2F; Load shaders and bind GL attributes.\n  &#x2F;&#x2F; Load mesh and model geometry.\n  &#x2F;&#x2F; Initialize GVRCardboardAudio engine.\n  _cardboard_audio_engine &#x3D;\n  [[GVRCardboardAudioEngine alloc]initWithRenderingMode:\n      kRenderingModeBinauralHighQuality];\n  [_cardboard_audio_engine preloadSoundFile:kSampleFilename];\n  [_cardboard_audio_engine start];\n  ...\n  [self spawnCube];\n&#125;</code></pre>\n\n<p>##实现 prepareDrawFrame 方法</p>\n<p>通过实现 <a href=\"https://developers.google.com/vr/ios/reference/protocol_g_v_r_cardboard_view_delegate-p.html#method-detail\">-cardboardView:prepareDrawFrame:</a> 方法，将可以决定将要呈现在人眼前内容的逻辑。任何对于特定帧内容的操作应该在这里实现，在这里更新模型并清除 GL 绘制状态等。应用将会计算头部的方向并更新音频引擎。</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">- (void)cardboardView:(GVRCardboardView *)cardboardView\n     willStartDrawing:(GVRHeadTransform *)headTransform &#123;\n  &#x2F;&#x2F; Load shaders and bind GL attributes.\n  &#x2F;&#x2F; Load mesh and model geometry.\n  &#x2F;&#x2F; Initialize GVRCardboardAudio engine.\n  _cardboard_audio_engine &#x3D;\n  [[GVRCardboardAudioEngine alloc]initWithRenderingMode:\n      kRenderingModeBinauralHighQuality];\n  [_cardboard_audio_engine preloadSoundFile:kSampleFilename];\n  [_cardboard_audio_engine start];\n  ...\n  [self spawnCube];\n&#125;\n</code></pre>\n\n<p>##实现 drawEye 方法</p>\n<p>这里将会是整个渲染代码的核心，就像你建立一个常规的 OpenGL ES 应用一样。下面这段代码将为你展示如何在 <a href=\"https://developers.google.com/vr/ios/reference/protocol_g_v_r_cardboard_view_delegate-p.html#method-detail\">-drawEye</a> 方法中为 每个 眼球呈现场景的变换和透视效果。注意，这个方法会为每一个眼球调用，如果 GCSCardboardView 没有启用 VR 模式，那么眼球将会被设置为最中间。这种单眼渲染模式也是有用的，他能在非 VR 视图下也展现 3D 场景。</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">\n- (void)cardboardView:(GVRCardboardView *)cardboardView\n              drawEye:(GVREye)eye\n    withHeadTransform:(GVRHeadTransform *)headTransform &#123;\n  &#x2F;&#x2F; Set the viewport.\n  CGRect viewport &#x3D; [headTransform viewportForEye:eye];\n  glViewport(viewport.origin.x, viewport.origin.y, viewport.size.width,\n      viewport.size.height);\n  glScissor(viewport.origin.x, viewport.origin.y, viewport.size.width,\n      viewport.size.height);\n\n  &#x2F;&#x2F; Get the head matrix.\n  const GLKMatrix4 head_from_start_matrix &#x3D;\n      [headTransform headPoseInStartSpace];\n\n  &#x2F;&#x2F; Get this eye&#39;s matrices.\n  GLKMatrix4 projection_matrix &#x3D; [headTransform\n      projectionMatrixForEye:eye near:0.1f far:100.0f];\n  GLKMatrix4 eye_from_head_matrix &#x3D;\n      headTransform eyeFromHeadMatrix:eye];\n\n  &#x2F;&#x2F; Compute the model view projection matrix.\n  GLKMatrix4 model_view_projection_matrix &#x3D;\n      GLKMatrix4Multiply(projection_matrix,\n      GLKMatrix4Multiply(eye_from_head_matrix, head_from_start_matrix));\n\n  &#x2F;&#x2F; Render from this eye.\n  [self renderWithModelViewProjectionMatrix:model_view_projection_matrix.m];\n&#125;\n</code></pre>\n<p>返回这个方法的调用以后，<a href=\"https://developers.google.com/vr/ios/reference/interface_g_v_r_cardboard_view.html\">GCSCardboardView</a> 会将它渲染到屏幕上。</p>\n<p>##用 CADisplayLink 添加渲染循环</p>\n<p>为了渲染内容，我们需要<a href=\"https://developer.apple.com/library/prerelease/ios/documentation/QuartzCore/Reference/CADisplayLink_ClassRef/index.html\">CADisplayLink</a> 来驱动一个渲染循环。 在这个寻宝游戏中，我们用到了 TreasureHuntRenderLoop 来实现这个渲染循环。 这需要调用 <a href=\"https://developers.google.com/vr/ios/reference/interface_g_v_r_cardboard_view.html\">GCSCardboardView</a> 中的 <a href=\"https://developers.google.com/vr/ios/reference/interface_g_v_r_cardboard_view.html#method-detail\">-render</a> 方法。 我们在 TreasureHuntViewController 的 <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/#//apple_ref/occ/instm/UIViewController/viewWillAppear:\">- viewWillAppear:</a> and -viewDidDisappear: 方法中生成它并且在 <a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/#//apple_ref/occ/instm/UIViewController/viewDidDisappear:\">-viewDidDisappear:</a> 方法中销毁它。</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">- (void)viewWillAppear:(BOOL)animated &#123;\n  [super viewWillAppear:animated];\n\n  _renderLoop &#x3D; [[TreasureHuntRenderLoop alloc]\n   initWithRenderTarget:_cardboardView selector:@selector(render)];\n&#125;\n\n- (void)viewDidDisappear:(BOOL)animated &#123;\n  [super viewDidDisappear:animated];\n\n  [_renderLoop invalidate];\n  _renderLoop &#x3D; nil;\n&#125;</code></pre>\n<p>##捕获输入</p>\n<p>Cradboard SDK 可以接受到输入的事件（通常是拨动 Cardboard 上的按钮），你要在用户触发这个按钮的时候做一些事情，只需要实现 <a href=\"https://developers.google.com/vr/ios/reference/protocol_g_v_r_cardboard_view_delegate-p.html#method-detail\">- cardboardView:didFireEvent</a> 代理方法。</p>\n<pre class=\"line-numbers language-objc\" data-language=\"objc\"><code class=\"language-objc\">- (void)cardboardView:(GVRCardboardView *)cardboardView\n         didFireEvent:(GVRUserEvent)event &#123;\n  switch (event) &#123;\n    case kGVRUserEventBackButton:\n    &#x2F;&#x2F; If the view controller is in a navigation stack or\n    &#x2F;&#x2F; over another view controller, pop or dismiss the\n    &#x2F;&#x2F; view controller here.\n    break;\n    case kGVRUserEventTrigger:\n     NSLog(@&quot;User performed trigger action&quot;);\n     &#x2F;&#x2F; Check whether the object is found.\n     if (_is_cube_focused) &#123;\n       &#x2F;&#x2F; Vibrate the device on success.\n       AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);\n       &#x2F;&#x2F; Generate the next cube.\n       [self spawnCube];\n     &#125;\n     break;\n  &#125;\n&#125;\n</code></pre>","text":"原文链接 This document describes how to use the Google VR SDK for iOS (iOS SDK) to create your own Virtual Reality (VR) experiences. You can use...","link":"","photos":[],"count_time":{"symbolsCount":"8.6k","symbolsTime":"8 mins."},"categories":[{"name":"Virtual Reality","slug":"Virtual-Reality","count":1,"path":"api/categories/Virtual-Reality.json"}],"tags":[{"name":"Cardboard for iOS","slug":"Cardboard-for-iOS","count":1,"path":"api/tags/Cardboard-for-iOS.json"}],"toc":"","author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}},"mapped":true,"prev_post":{"title":"Xcode中执行脚本的方法","uid":"bd7e8525cbfb254b21794e3600c919c6","slug":"Xcode中执行脚本的方法","date":"2016-08-08T02:33:17.000Z","updated":"2019-05-14T04:53:26.000Z","comments":true,"path":"api/articles/Xcode中执行脚本的方法.json","keywords":null,"cover":[],"text":"#第一种方法 Xcode中直接编写脚步并运行 ##1.选中一个target &gt; Build Phase &gt; + ##2.选择New Run Script Phase##3.得到下图##4.Run Script 详解 这里我们可以选择新建一个shell script 或...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[],"tags":[],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}},"next_post":{}}