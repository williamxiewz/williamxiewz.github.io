{"title":"从零开始搭建Cydia软件源","uid":"ca65ea460ee6b214bff2c8c575c2c6e9","slug":"从零开始搭建Cydia软件源","date":"2016-08-26T02:41:41.000Z","updated":"2016-08-26T03:12:22.000Z","comments":true,"path":"api/articles/从零开始搭建Cydia软件源.json","keywords":null,"cover":null,"content":"<p><a href=\"http://bbs.feng.com/read-htm-tid-669283.html\">http://bbs.feng.com/read-htm-tid-669283.html</a></p>\n<span id=\"more\"></span>\n\n\n<p>Cydia中的软件源地址保存在 /etc/apt/sources.list.d/ 目录下，分为两种： </p>\n<ol>\n<li>以软件包形式安装的软件源，如Cydia默认的软件源，Modmyi、BigBoss等，该类软件源是以独立的.list文件记录软件源地址。 </li>\n<li>由用户在Cydia里输入地址添加的软件源，该类软件源全部保存在 cydia.list中。 </li>\n</ol>\n<p>以上两种形式的软件源本质没有差别，但只软件源的文件存放位置上是有不同的。<br>以Saurik自己的软件源为例。打开 saurik.list文件， 可以看到有以下内容 （以#开头的行属于注释，没有实际用途）<br>deb <a href=\"http://apt.saurik.com/\">http://apt.saurik.com/</a> tangelo-3.7 main</p>\n<p>那么，软件源的 Release 文件的地址是 <a href=\"http://apt.saurik.com/dists/tangelo-3.7/Release\">http://apt.saurik.com/dists/tangelo-3.7/Release</a><br>Cydia就是通过或许Release文件进而检测软件源的存在，然后再下载记录软件包相关信息的 Packages 文件。 </p>\n<p>而对于在Cydia中输入软件源地址进行添加的这种源，方法有些不同。因为默认情况下，输入地址以后，Cydia会认为Release文件存放于输入的地址所在的目录下。在list文件中的记录信息为：<br>deb <a href=\"http://www.xxx.com/\">http://www.xxx.com</a> ./</p>\n<p>并不会继续往子目录里检测Release文件。 </p>\n<p>因此，搭建Cydia软件源首先需要配置服务器上相关目录和文件的存放位置。 </p>\n<p>取决于软件源的添加方式，文件/目录的路径设置可以分为以下两种情况： </p>\n<ol>\n<li><p> 只公布软件源的地址，让用户手动输入地址来添加。这种方式的文件/目录设置最为简单。<br>以威锋源为例，威锋源的地址为<a href=\"http://app.weiphone.com/cydia\">http://app.weiphone.com/cydia</a><br>那么在郁闷app.weiphone.com下，存在目录cydia。目录cydia即使软件源所在的目录。<br>将文件Release放置在cydia目录下即完成了软件源的搭建。<br>要注意，搭建软件源，必须保证至少有Release和Packages两个文件。 </p>\n</li>\n<li><p>以软件包的形式安装，即直接在 /etc/apt/source.list.d/ 目录以文件的形式添加，那么这个就没有什么固定的位置了。<br>基本上仿照Saurik和BigBoss的list文件的格式即可。<br>list文件格式：</p>\n<h1 id=\"do-not-edit-this-file-to-add-your-own-custom-sources\"><a href=\"#do-not-edit-this-file-to-add-your-own-custom-sources\" class=\"headerlink\" title=\"do not edit this file to add your own custom sources\"></a>do not edit this file to add your own custom sources</h1><h1 id=\"this-file-is-subject-to-be-upgraded-as-part-of-a-package\"><a href=\"#this-file-is-subject-to-be-upgraded-as-part-of-a-package\" class=\"headerlink\" title=\"this file is subject to be upgraded as part of a package\"></a>this file is subject to be upgraded as part of a package</h1><h1 id=\"either-add-your-own-list-file-to-etc-apt-sources-list-d\"><a href=\"#either-add-your-own-list-file-to-etc-apt-sources-list-d\" class=\"headerlink\" title=\"either add your own .list file to /etc/apt/sources.list.d\"></a>either add your own .list file to /etc/apt/sources.list.d</h1><h1 id=\"or-add-your-entry-to-the-global-etc-apt-sources-list-file\"><a href=\"#or-add-your-entry-to-the-global-etc-apt-sources-list-file\" class=\"headerlink\" title=\"or add your entry to the global /etc/apt/sources.list file\"></a>or add your entry to the global /etc/apt/sources.list file</h1><p>deb 软件源地址 项目名 类型<br>复制代码</p>\n</li>\n</ol>\n<p>文件名任意 </p>\n<p>其中，Release文件应放置于 软件源地址/项目名/ 这个目录下，Packages文件放置位置由Release文件来决定（详情见后文）。 </p>\n<p>之前提到过，搭建软件源必须要有Release和Packages两个文件。前者的作用是记录软件源本身的相关信息，而后者的作用则是记录具体软件包的存放位置和安装信息等数据。 </p>\n<p>以下是Release文件的格式：<br>Origin: BigBoss<br>Label: BigBoss<br>Suite: stable<br>Version: 1.0<br>Codename: BigBoss<br>Support: <a href=\"http://cydia.saurik.com/support/\">http://cydia.saurik.com/support/</a>*<br>Architectures: darwin-arm iphoneos-arm<br>Components: main<br>Description: Apps &amp; Themes! We host your apps. Email me.<br>MD5Sum:<br>be8806290d5904cdf45b542706f6a3ad 165020 main/binary-darwin-arm/Packages<br>  03026ac993187b0eecae50466f64fb3c 35049 main/binary-darwin-arm/Packages.gz<br>  93091f5ca485e066d5fc32ca1327830c 3031061 main/binary-iphoneos-arm/Packages<br>  d7aec18dee5b627339b77a9d91e3f*** 368222 main/binary-iphoneos-arm/Packages.bz2</p>\n<p>其中红字部分是必填内容，紫色部分是可选内容。 </p>\n<p>每项的作用：</p>\n<p>必须<br>Origin: 软件源名称，可以使用中文（Cydia的软件源列表中显示的标题）<br>Label:  同上，也可以使用中文<br>Suite: 软件源的类型，比如正式源，测试源等，可以分别用stable, beta, unstable等来表示，一般填stable就可以了<br>Version: 版本号，这个其实不重要，随便填，一般都是写1.0<br>Codename: 代码代号，比如BigBoss的就写BigBoss，威锋的就写WeiPhone，也没什么限制，只能用英文<br>Architectures: 结构。iPhone平台统一写iphoneos-arm<br>Components: main<br>Description: 软件介绍，可以使用中文和html代码，具体能使用哪些代码在下面会介绍。<br>可选<br>Support: 支持，没什么作用，除非特别需要，否则可以不要这个。<br>MD5Sum: 不是必须的，但如果Packages文件位置不与Release文件在同一目录下，则必须有此项。另外，如果需要签名Release文件，也必须有这个。关于MD5Sum的格式，在下文也会介绍。 </p>\n<p>Description格式<br>显示在Cydia中每个软件页面最下方。<br>不能直接换行，如果要实现显示换行显示，可以使用&lt;br&gt;代码。<br>要加粗显示，可以使用&lt;strong&gt;&lt;/strong&gt;代码<br>可以使用html代码设置字体颜色。<br>不能使用超链接代码。 </p>\n<p>代码：Description: WeiPhone-威锋网为您提供iPhone所需软件/补丁。&lt;br&gt;&lt;br&gt;联系我们: &lt;strong&gt;weip.com@ gmail.com&lt;/strong&gt;<br>实际显示效果如下：</p>\n<p>MD5Sum格式<br>MD5Sum是用来记录Packages即相关文件的文件大小，存放路径和MD5值。 </p>\n<p>MD5Sum: 之后另起一行，开头要空一格（论坛里用quote或code代码之后都不显示开头的空格） </p>\n<p>每行格式是：<br>空格+文件MD5值+空格+文件大小(以字节为单位)+文件路径 （全部没有+） </p>\n<p>而文件路径的格式则有文件存放位置来决定。 </p>\n<p>如果是没有设置Release文件的路径，那么Release和Packages同在根目录，则路径为 Packages，直接就是文件名，没有其它路径。 </p>\n<p>如果在之前设置了Release文件的路径，如Saurik和BigBoss，那么Packages 的路径为 main/binary-iphoneos-arm/Packages，起始文件夹，即main，要与Release文件同在一个目录下。main和binary-iphoneos-arm要与Releases中的对应信息相匹配。 </p>\n<p>对于Packages.gz和Packages.bz2，格式相同，也记得要另起一行。 </p>\n<p>因此，Packages文件的保存位置就是 软件源地址/dists/main/Codename（与Release文件中一致）/main/binary-iphoneos-arm下。 </p>\n<p>Release文件的示例可以参看以下几个地址：<br><a href=\"http://app.weiphone.com/cydia/Release\">http://app.weiphone.com/cydia/Release</a><br><a href=\"http://apt.saurik.com/dists/tangelo-3.7/Release\">http://apt.saurik.com/dists/tangelo-3.7/Release</a><br><a href=\"http://apt.bigboss.us.com/repofiles/cydia/dists/stable/Release\">http://apt.bigboss.us.com/repofiles/cydia/dists/stable/Release</a></p>\n<p>以下是生成Packages文件的方法：<br>Packages文件格式<br>Package: 3proxy<br>Version: 0.5.3k-2<br>Architecture: iphoneos-arm<br>Maintainer: Jay Freeman (saurik) &lt;<a href=\"mailto:&#x73;&#97;&#x75;&#x72;&#105;&#x6b;&#x40;&#115;&#97;&#117;&#x72;&#105;&#107;&#46;&#99;&#111;&#109;\">&#x73;&#97;&#x75;&#x72;&#105;&#x6b;&#x40;&#115;&#97;&#117;&#x72;&#105;&#107;&#46;&#99;&#111;&#109;</a>&gt;<br>Installed-Size: 1208<br>Filename: debs/3proxy_0.5.3k-2_iphoneos-arm.deb<br>Size: 416318<br>MD5sum: f84cb6764a9df30ab326c17f51de15fd<br>Section: Networking<br>Priority: optional<br>Homepage: <a href=\"http://3proxy.ru/download/\">http://3proxy.ru/download/</a><br>Description: tiny free proxy server<br>Name: 3proxy<br>Depiction: <a href=\"http://cydia.saurik.com/info/3proxy/\">http://cydia.saurik.com/info/3proxy/</a><br>Tag: purpose::daemon, role::hacker<br>复制代码</p>\n<p>Packages实质上是deb文件的control信息集合，另外多了deb文件本身的信息。（control文件是记录软件包本身的信息，但没有deb文件本身） </p>\n<p>多出的deb文件信息为：<br>[li]Filename（deb文件位置与文件名）[/li][li]Size（deb文件大小，字节为单位）[/li][li]MD5sum（deb文件MD5值）[/li]</p>\n<p>要保证Cydia能正确获取deb的相关数据，除了以上3个deb文件信息以为，还必须保证至少有以下两项：<br>[li]Package（软件标识符，相当于***号码，用于识别唯一的软件）[/li][li]Version（软件版本号）[/li]</p>\n<p>这里重点关注的是Filename。Filename项决定了在服务器上deb文件的存放位置。如果没有上级目录，即deb文件和Packages文件处于同一目录，那么只需要一个单独的文件名就可以了，不需要加上目录名，即xxxx.deb。但这样在软件数量多的时候会导致管理上的混乱。<br>假设deb文件存放在debs目录下，那么Filename就应该是 debs/xxx.deb 这样的格式。 </p>\n<p>其余项会在二楼deb制作教程中介绍。 </p>\n<p>一个软件包的全部信息在Packages文件中是以连续的一段存在，每一行是不同的信息。不同软件之间以空行做分隔。 </p>\n<p>如何生成Packages文件 </p>\n<p>方法一：</p>\n<p>环境：任何支持dpkg命令的unix系统 </p>\n<p>工具：dpkg及相关组件。<br>[li]iPhone OS（已越狱）：自带dpkg-deb命令，无dpkg-scanpackages命令[/li]<br>[li]Debian/Ubuntu：自带dpkg-deb和dpkg-scanpackages命令[/li]<br>[li]Fedora: 无dpkg相关命令[/li]<br>[li]Mac OS X：无任何dpkg相关命令[/li]<br>[li]Windows：非unix系统，无dpkg相关命令[/li]</p>\n<p>以上系统中，Fedora不支持dpkg，也无法通过安装系统组件来支持dpkg，因此Fedora系统不能用于生成Packages文件。 </p>\n<p>而对于Mac OS X系统，本身虽然不支持dpkg，但可以通过安装一个叫 Fink 的软件来获得dpkg命令。<br>Fink 下载页面：<a href=\"http://www.finkproject.org/download/\">http://www.finkproject.org/download/</a><br>如何安装请见官网说明。 </p>\n<p>对于Windows系统，可以通过安装 Cygwin + dpkg 来获取dpkg命令。<br>Cygwin下载地址： <a href=\"http://www.cygwin.com/setup.exe\">http://www.cygwin.com/setup.exe</a><br>dpkg命令可以直接在Cygwin中获取。<br>但个人不推荐在Windows下使用dpkg，因为Cygwin体积很大，与其安装这个，还不如直接安装个Ubuntu来的简单。 </p>\n<p>各个系统下生成Packages的方法基本一样。 </p>\n<p>最简单的方法是利用dpkg-scanpackages命令来制作Packages文件。 </p>\n<p>iPhone OS 不适用（因为没有这个命令） </p>\n<p>[li]将需要发布的deb文件放在一个目录，比如说debs下[/li]<br>[li]命令行里进入到debs目录的上级目录[/li]<br>[li]执行命令<br>dpkg-scanpackages debs &gt; Packages<br>复制代码<br>，其中debs为deb存放目录。运行该命令可能需要root权限，可以使用root帐户登录，login root 或 su root 或使用sudo<br>[/li][li]Packages存放于当前目录[/li]</p>\n<p>如图所示</p>\n<p>如果指定的文件夹不存在，则提示  dpkg-scanpackages: error: Binary dir ebs not found<br>如果在指定的文件夹内没有deb文件，则提示 Wrote 0 entries to output Packages file. </p>\n<p>注意：Debian/Ubuntu系统下的dpkg-scanpackages命令不会输出Name，Author，Sponsor，Depiction等信息不会自动添加进去，所以需要手动加入这些数据。Mac OS X下无此问题。 </p>\n<p>以dpkg-scanpackages命令来生成Packages文件有一个很大的限制，就是必须保留全部要发布的和已经发布的deb文件，在deb数量多的情况下会浪费大量磁盘空间。 </p>\n<p>因此可以使用改进命令：<br>dpkg-scanpackages debs &gt;&gt; Packages<br>复制代码<br>，这样不会每次都重新生成Packages文件，而是将debs目录下的deb信息添加到已有的Packages文件末尾。在新增软件的时候没什么问题，但如果是软件更新，那么就会出现重复条目的问题，这时候需要手动删除旧的软件包信息。</p>\n<p>方法二</p>\n<p>上面的方法里也提到过，可以直接编辑Packages文件，因此用文本编辑器将相关数据写入Packages也是可以的，只是这样工作量会比较大，但这种方法没有系统的限制，任何系统下，不管有没有dpkg相关命令都可以使用。格式也是一样的，每项之间只要把Packages放在第一个就可以了，其余项没有顺序要求。 </p>\n<p>由于绝大部分数据可以从control里直接复制，需要自己获取的就只有Filename，Size和MD5sum。 </p>\n<p>在Unix系统下，包括Mac OS X和Linux，以及iPhone OS，获取文件大小可以使用命令 ls -l ；获取MD5值可以使用命令 md5sum </p>\n<p>另外，在Windows下要解包deb文件可以使用7-zip，control 文件位于 control.tar.gz 下</p>\n<p>方法三 （2010/03/23更新scandebs脚本）</p>\n<p>生成Packages和Release文件只是最基础的步骤，实际还需要压缩Packages文件，有时候还需要签名Release文件，为了简化操作，我自己写了一个脚本，具有以下功能： </p>\n<p>[li]自动从服务器上获取 Packages 文件，不需要每次都事先准备 [/li]<br>[li]自动生成Release文件 [/li]<br>[li]自动生成Packages，Packages.bz2和Packages.gz [/li]<br>[li]在生成Packages文件之后无需保留deb文件 [/li]<br>[li]保留control里的全部信息 [/li]<br>[li]不会出现重复条目[/li]<br>[li]自动签名Release文件[/li]</p>\n<p><a href=\"http://app.weiphone.com/files/scandebs.tar.gz\">http://app.weiphone.com/files/scandebs.tar.gz</a></p>\n<p>更新记录 (8/11 v1.3)：<br>        1. 修正grep命令精确匹配问题<br>        2. 若不存在debs目录或debs目录下无deb文件，退出<br>        3. 现在可以在Linux和BSD（iPhone和Mac）系统下使用了<br>        4. 其它优化</p>\n<p>更新记录 (5/13 v1.2)：<br>        1. 针对mac系统下无md5sum命令的问题，用openssl md5 FILE来获取文件MD5值<br>        2. 规范control文件格式（强制将Package项放在第一行）<br>        3. 完全自动模式，无需用户在签名Release时输入密码（需自行修改一下脚本，方法见下文）</p>\n<p>更新记录 (3/23 v1.1)：<br>        1. 修正了Release中Packages.gz项的拼写错误<br>        2. 增加参数功能，可以显示帮助，版本号，自选是否签名Release<br>        3. 每次生成Packages时会按Package标识排序</p>\n<p>使用之前需要先修改下脚本（只需修改一次即可）【因为更新过，所以图片所示的行数已不匹配了，但是内容基本还是一样的。】<br>[li]第46行，将wget后的地址改为自己源的Packages的地址</p>\n<p>另外，因为iPhone OS本身没有wget这个命令，可以去Cydia安装一个wget。使用此命令需要联网，否则请事先准备好Packages文件。[/li]<br>[li]第132，136，140这三行，将Packages，Packages.bz2和Packages.gz根据需要自己修改（如果需要指定这几个文件的存放位置）</p>\n<p>[/li]<br>[li]第151-158行，引号内的内容根据需要自己来修改（此部分用于生成Release文件）  </p>\n<p>[/li]<br>[li]第166行，引号内的内容修改为自己的私匙的用户名和密码  </p>\n<p>[/li]<br>[li]Ubuntu 用户请注意：Ubuntu下的 GPG 默认开启了use-agent功能，所以在签名Release的时候会弹出一个提示框，而这个提示框根本就没用，所以要禁用。[/li]<br>[li]禁用方法：打开 <del>/.gnupg/gpg.conf （</del>表示当前用户）或者直接用命令<br>gedit ~/.gnupg/gpg.conf<br>复制代码<br>搜索 use-agent，将其注释掉（即修改为 #use-agent）[/li]</p>\n<p>使用方法：<br>[li]将scandebs文件放置在任意位置[/li]<br>[li]准备debs文件夹，需在scandebs同级目录下[/li]<br>[li]将要更新的deb文件放置在debs目录下[/li]<br>[li]【可选】将Packages文件放置在scandebs同级目录下（如果需要修改Packages文件中的已有数据）[/li]<br>[li]以命令 sh scandebs + 参数 来执行脚本；或 将文件属性设为0755，命令 chmod 0755 scandebs，之后可以直接使用命令 ./scandebs + 参数[/li]<br>[li]【可选】如果提示要你输入签名Release文件的密码，输入之[/li]<br>[li]得到Packages，Packages.bz2，Packages.gz，Release和Release.gpg【可选】这5或4个文件[/li]</p>\n<p>显示帮助<br>./scandebs -h<br>或<br>./scandebs –help<br>复制代码</p>\n<p>显示版本号<br>./scandebs -v<br>或<br>./scandebs –version<br>复制代码</p>\n<p>不签名Release（无参数）<br>./scandebs<br>复制代码</p>\n<p>使用签名Release功能<br>./scandebs -s<br>或<br>./scandebs –sign<br>复制代码</p>\n<p>手动修改Packages注意事项<br>前面说过，Packages文件可以手动编辑，有时候仅仅需要更改一些字段的内容，如果因为这个要重新打包deb，不一定合算，因此手动编辑Packages可以省下一些工作量。以下是一些注意事项：<br>[li]以下字段不可修改：Package，Version，Size，MD5Sum，Depends，Pre-Depends，Provides，Conflicts，Replaces[/li]<br>[li]其余字段可以任意修改，无需与deb里的control一致，因为Cydia本身不是读取的control的数据，而是从Packages中获取数据。[/li]<br>[li]修改字段以后，如果以dpkg-scanpackages重新生成Packages，那么修改过的部分会被还原成control里的原始数据。[/li]</p>\n<p>签名Release的方法<br>[li]获取用于签名的GPG密匙（方法见下文）[/li][li]运行命令<br>gpg -abs -r &quot;HuangRui&quot; -o Release.gpg Release<br>复制代码<br>其中引号内的字符串为用于签名的密匙的用户名（用于区分不同的签名密匙）[/li][li]输入密码[/li][li]完成[/li]</p>\n<p>为什么要签名Release<br>虽然不签名Release文件也没什么大的问题，但是签名Release有以下几个用途：<br>[li]解决Cydia刷新出现的  Wrong language code zh-Hans 或 Wrong language code zh-Hant  的问题（当然如果别的源有这个问题的话还是会报错）[/li]<br>[li]所有源内的数据均经过验证，确保安全（见图）</p>\n<p>[/li]</p>\n<p>上传至服务器</p>\n<p>[li]将Packages文件压缩为Packages.bz2（压缩格式 bzip2）和Packages.gz（压缩格式：gz） （如果是用的我写的脚本则可省略自己压缩的这一部）[/li]<br>[li]修改Release文件（主要是MD5值和文件大小）[/li]<br>[li]【可选】签名Release文件，生成Release.gpg[/li]<br>[li]将Release，Release.gpg，Packages，Packages.bz2和Packages.gz以及要更新的deb文件上传到服务器指定位置。[/li]<br>[li]以上所有文件的属性需设为0755（在ftp上设置）[/li]</p>\n<p>用于签名Release的密匙<br>生成密匙<br>可以看看这个页面 <a href=\"http://keyring.debian.org/creating-key.html\">http://keyring.debian.org/creating-key.html</a></p>\n<p>生成密匙的操作是在命令行下完成，其中还需要有人机交互，所以WinSCP的命令行是不能用的，如果需要使用iPhone来生成密匙，请使用Putty或者其它SSH终端工具来连接。</p>\n<p>运行命令<br>gpg –gen-key<br>复制代码<br>提示<br>Please select what kind of key you want:<br>   (1) DSA and Elgamal (default)<br>   (2) DSA (sign only)<br>   (5) RSA (sign only)<br>Your selection?<br>一般就是1，默认</p>\n<p>回车后<br>RSA keys may be between 1024 and 4096 bits long.<br>What keysize do you want? (2048)<br>输入1024～4096之间的一个数值，数值越大，加密强度越高，但每次加密和解密需要的时间更多。</p>\n<p>我这里输入的是2048<br>Requested keysize is 2048 bits</p>\n<p>Please specify how long the key should be valid.<br>         0 = key does not expire<br>        = key expires in n days<br>      w = key expires in n weeks<br>      m = key expires in n months<br>      y = key expires in n years<br>Key is valid for? (0)<br>Key does not expire at all<br>Is this correct? (y/N) y</p>\n<p>密匙有效时间，一般选0，不会过期。</p>\n<p>问你确认，输入y+回车（小写y，如果要重新做则是大写N）</p>\n<p>Real name:</p>\n<p>输入该密匙所有者的名称，例如 WEIP Tech Team</p>\n<p>Email address: </p>\n<p>密匙所有者邮件地址，自己输入</p>\n<p>Comment： </p>\n<p>注释，怕分不清楚的话可以加点内容进去<br>You are using the `utf-8′ character set.<br>You selected this USER-ID:<br>    “WEIP Tech Team &lt;weip.com@gmail,com&gt;</p>\n<p>继续<br>Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit?</p>\n<p>上面输错的话，名字错了就输入N，加上注释就输入C，邮件错误就输入E，不保存退出输入Q，确定输入O<br>You need a Passphrase to protect your secret key.</p>\n<p>设置密码，该密码在每次使用加密时都要使用，必须牢记。输入时不会明文显示，回车后会要你再输一遍以匹配。</p>\n<p>设完密码之后就自动执行了。</p>\n<p>注意，在结果里面有一句<br>gpg: key 0A02728F marked as ultimately trusted<br>public and secret key created and signed.</p>\n<p>这串字符就是所谓的密匙标识了</p>\n<p>如果需要为这个密匙添加另外的使用者，可以用以下命令<br>gpg –edit-key 0x0A02728F<br>复制代码</p>\n<p>密匙前面要加上数字0和字母x</p>\n<p>command&gt; 后输入<br>adduid<br>复制代码<br>之后的操作跟前面的一样，不过在要输密码的时候只是要验证身份，不是创建密码。</p>\n<p>最后在command&gt;后输入<br>save<br>复制代码</p>\n<p>假设创建了两个用户，A和B，原本是A拥有最高权限，要改为B拥有最高权限</p>\n<p>执行以下命令：<br>gpg –edit-key 0x0A02728F<br>复制代码</p>\n<p>command&gt; 后输入<br>uid 2<br>复制代码</p>\n<p>然后输入<br>Command&gt; primary<br>复制代码</p>\n<p>输入密码后在command&gt;后输入<br>save<br>复制代码</p>\n<p>经过以上操作就成功生成了一个可以用于签名的密匙。</p>\n<p>导出公匙<br>用于加密/签名的是刚刚申请到的私人密匙（Private Key），而要发布的是公匙（Public Key）<br>运行命令<br>gpg –export 0A02728F &gt; weiphone-keyring.gpg<br>复制代码<br>文件名自己决定<br>之后将生成的公匙发布就可以了。<br>导入公匙<br>需要导入公匙的是软件源的用户，下载公匙文件以后，让用户自己运行命令<br>apt-key add weiphone-keyring.gpg<br>复制代码<br>导出私人密匙<br>有时候软件源不是一个人在维护，如果是多个人维护的话可能需要导出私人密匙以共其他人加密/签名。<br>运行命令<br>gpg –export-secret-key -a &quot;User Name&quot; &gt; private.key<br>复制代码<br>User Name是自己在生成密匙的时候输入的用户名，最后生成的文件，文件名随意，但切记，这个密匙不要泄漏出去。<br>导入私人密匙<br>得到私人密匙之后就是导入了，运行命令<br>gpg –allow-secret-key-import –import private.key<br>复制代码<br>密匙管理<br>查看公匙列表<br>apt-key list<br>复制代码<br>或<br>gpg –list-keys<br>复制代码</p>\n<p>当密匙不再使用时，可以删除密匙。<br>删除公匙<br>apt-key del 0A02728F<br>复制代码<br>或<br>gpg –delete-key &quot;User Name&quot;<br>复制代码</p>\n<p>查看私人密匙列表<br>gpg –list-secret-keys<br>复制代码</p>\n<p>删除私人密匙<br>gpg –delete-secret-key &quot;User Name&quot;<br>复制代码</p>\n<p>关于GPG密匙的更多命令，可以看看这个网页（英文）<a href=\"http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/gpg-cs.html\">http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/gpg-cs.html</a></p>\n<p>关于公匙和私匙的介绍：<a href=\"http://www.hudong.com/wiki/\">http://www.hudong.com/wiki/</a></p>\n<p>关于源的搭建，也可以看看Saurik的文章 <a href=\"http://www.saurik.com/id/7\">http://www.saurik.com/id/7</a></p>\n<p>最后再附送点其它东西。</p>\n<p>要在Cydia中显示源的图标或者分类图标，只要将图标文件放到Cydia的目录下即可。</p>\n<p>源的图标文件名为 域名.png，比如威锋源的地址为<a href=\"http://app.weiphone.com/cydia%EF%BC%8C%E9%82%A3%E4%B9%88%E5%9B%BE%E6%A0%87%E6%96%87%E4%BB%B6%E5%90%8D%E5%BA%94%E4%B8%BAapp.weiphone.com.png%EF%BC%8C%E8%AF%A5%E6%96%87%E4%BB%B6%E9%9C%80%E4%BD%8D%E4%BA%8E\">http://app.weiphone.com/cydia，那么图标文件名应为app.weiphone.com.png，该文件需位于</a> /Applications/Cydia.app/Sources/ 下，图标分辨率为60 × 60</p>\n<p>分类图标需位于 /Applications/Cydia.app/Ssctions/ 下，文件名有一定要求。一般来说文件名跟分类名一致就可以了，但也有例外。以威锋源为例，分类 [2.x] 所对应的图标文件名应为 2.x.png，没有方括号，但其它的就要有方括号。另外，一定要注意大小写的匹配，文件名编码须为UTF-8。</p>\n<p>制作软件源的安装包，这里就直接提供威锋源的安装包了。<br>  com.weiphone.source_1.2_iphoneos-arm.deb (78 KB, 下载次数: 838) </p>\n<p>重点：</p>\n<ol>\n<li><p>list文件 /etc/apt/sources.list.d/weiphone.list</p>\n<h1 id=\"do-not-edit-this-file-to-add-your-own-custom-sources-1\"><a href=\"#do-not-edit-this-file-to-add-your-own-custom-sources-1\" class=\"headerlink\" title=\"do not edit this file to add your own custom sources\"></a>do not edit this file to add your own custom sources</h1><h1 id=\"this-file-is-subject-to-be-upgraded-as-part-of-a-package-1\"><a href=\"#this-file-is-subject-to-be-upgraded-as-part-of-a-package-1\" class=\"headerlink\" title=\"this file is subject to be upgraded as part of a package\"></a>this file is subject to be upgraded as part of a package</h1><h1 id=\"either-add-your-own-list-file-to-etc-apt-sources-list-d-1\"><a href=\"#either-add-your-own-list-file-to-etc-apt-sources-list-d-1\" class=\"headerlink\" title=\"either add your own .list file to /etc/apt/sources.list.d\"></a>either add your own .list file to /etc/apt/sources.list.d</h1><h1 id=\"or-add-your-entry-to-the-global-etc-apt-sources-list-file-1\"><a href=\"#or-add-your-entry-to-the-global-etc-apt-sources-list-file-1\" class=\"headerlink\" title=\"or add your entry to the global /etc/apt/sources.list file\"></a>or add your entry to the global /etc/apt/sources.list file</h1><p>deb <a href=\"http://app.weiphone.com/cydia/\">http://app.weiphone.com/cydia/</a> ./<br>复制代码</p>\n</li>\n<li><p>公匙，其实放在哪里不重要，但Cydia的所有源的公匙都是放在 /usr/share/keyrings/ 下，所以尽量随主流吧</p>\n</li>\n<li><p>安装公匙的脚本 postinst或者extrainst_都行，只不过通常都用extrainst_<br>#!/bin/sh<br>if [[ $1 == install || $1 == upgrade ]]; then<br> /usr/bin/apt-key add /usr/share/keyrings/weiphone-keyring.gpg<br>fi<br>复制代码<br>记得修改文件名</p>\n</li>\n<li><p>卸载时删除公匙的脚本，prerm或者postrm都行<br>#!/bin/sh<br>if [[ $1 == remove ]]; then<br> /usr/bin/apt-key del BB7EB3ED<br>fi<br>复制代码</p>\n</li>\n</ol>\n<p>服务器上文件存放位置，最简单的<br>cydia–<br>           |–debs–*.deb<br>           |–Packages<br>           |–Packages.bz2<br>           |–Packages.gz<br>           |–Release<br>           |–Release.gpg</p>\n<p>Cydia Wrong language code zh-Hans 或 Wrong language code zh-Hant 的解释</p>\n<p>其实这个不是错误，而是Cydia本身对中文的支持有问题。<br>而且，这个提示并非是错误提示，实际是属于警告的性质，因为Cydia本身在中文支持上有些问题，但不影响使用，所以会出现警告。<br>该警告的出现与Cydia软件源中是否存在中文无关，而是和系统语言设置有关，该问题只出现在简体中文和繁体中文系统下（不信把系统语言改成非中文的看还会不会出现错误）。</p>\n","text":"http://bbs.feng.com/read-htm-tid-669283.html Cydia中的软件源地址保存在 /etc/apt/sources.list.d/ 目录下，分为两种： 以软件包形式安装的软件源，如Cydia默认的软件源，Modmyi、BigBoss等，该类...","link":"","photos":[],"count_time":{"symbolsCount":"13k","symbolsTime":"12 mins."},"categories":[{"name":"iOS逆向工程","slug":"iOS逆向工程","count":1,"path":"api/categories/iOS逆向工程.json"}],"tags":[{"name":"Cydia","slug":"Cydia","count":1,"path":"api/tags/Cydia.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#do-not-edit-this-file-to-add-your-own-custom-sources\"><span class=\"toc-text\">do not edit this file to add your own custom sources</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#this-file-is-subject-to-be-upgraded-as-part-of-a-package\"><span class=\"toc-text\">this file is subject to be upgraded as part of a package</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#either-add-your-own-list-file-to-etc-apt-sources-list-d\"><span class=\"toc-text\">either add your own .list file to &#x2F;etc&#x2F;apt&#x2F;sources.list.d</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#or-add-your-entry-to-the-global-etc-apt-sources-list-file\"><span class=\"toc-text\">or add your entry to the global &#x2F;etc&#x2F;apt&#x2F;sources.list file</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#do-not-edit-this-file-to-add-your-own-custom-sources-1\"><span class=\"toc-text\">do not edit this file to add your own custom sources</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#this-file-is-subject-to-be-upgraded-as-part-of-a-package-1\"><span class=\"toc-text\">this file is subject to be upgraded as part of a package</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#either-add-your-own-list-file-to-etc-apt-sources-list-d-1\"><span class=\"toc-text\">either add your own .list file to &#x2F;etc&#x2F;apt&#x2F;sources.list.d</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#or-add-your-entry-to-the-global-etc-apt-sources-list-file-1\"><span class=\"toc-text\">or add your entry to the global &#x2F;etc&#x2F;apt&#x2F;sources.list file</span></a></li></ol>","author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}},"mapped":true,"prev_post":{"title":"深入理解iOS开发中的BitCode功能","uid":"9bc13655b85b118e29cc3bcc05240638","slug":"深入理解iOS开发中的BitCode功能","date":"2016-09-06T10:16:31.000Z","updated":"2016-09-06T10:40:22.000Z","comments":true,"path":"api/articles/深入理解iOS开发中的BitCode功能.json","keywords":null,"cover":null,"text":"#前言 做iOS开发的朋友们都知道,目前最新的Xcode7,新建项目默认就打开了bitcode设置.而且大部分开发者都被这个突如其来的bitcode功能给坑过导致项目编译失败,而这些因为bitcode而编译失败的的项目都有一个共同点,就是链接了第三方二进制的库或者框架,而这些框架...","link":"","photos":[],"count_time":{"symbolsCount":"6.8k","symbolsTime":"6 mins."},"categories":[{"name":"iOS SDK","slug":"iOS-SDK","count":18,"path":"api/categories/iOS-SDK.json"}],"tags":[],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}},"next_post":{"title":"GitHub Pages 配置域名","uid":"24fefc02fc3e261ce5e03d9f1548a430","slug":"GitHub-Pages-配置域名","date":"2016-08-25T04:37:31.000Z","updated":"2019-05-14T04:50:23.000Z","comments":true,"path":"api/articles/GitHub-Pages-配置域名.json","keywords":null,"cover":[],"text":"可以填www也可以不填也可以填其他你想要的词例如主机记录填 www意思就是访问 www.jianfeiyizhan.com是有效的指向你设置的记录值的.主机记录不填或者填@意思就是访问 jianfeiyizhan.com是指向你记录值的.你也可以设置泛解析 主机记录填 *这样 任...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}}}