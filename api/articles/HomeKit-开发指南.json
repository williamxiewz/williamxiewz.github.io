{"title":"HomeKit 开发指南","uid":"79d37eeff247a26cb1e49e04acbf72e8","slug":"HomeKit-开发指南","date":"2016-08-10T05:08:12.000Z","updated":"2016-08-14T06:22:07.000Z","comments":true,"path":"api/articles/HomeKit-开发指南.json","keywords":null,"cover":[],"content":"<p>#第一部分：简介</p>\n<p>该文档旨在帮你编写HomeKit app。HomeKit库是用来沟通和控制家庭自动化配件的，这些家庭自动化配件都支持苹果的HomeKit Accessory Protocol。HomeKit应用程序可让</p>\n<p>用户发现兼容配件并配置它们。用户可以创建一些action来控制智能配件（例如恒温或者光线强弱），对其进行分组，并且可以通过Siri触发。HomeKit 对象被存储在用户iOS设备的数据库中，并且通过iCloud还可以同步到其他iOS设备。HomeKit支持远程访问智能配件，并支持多个用户设备和多个用户。HomeKit 还对用户的安全和隐私做了处理。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/into_diagram_2x.png\"></p>\n<span id=\"more\"></span>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：如果你是开发设计<a href=\"https://developer.apple.com/homekit\">HomeKit</a>硬件的供应商，你可以去Hardware Developers下的HomeKit页面了解MFi Program相关信息，也可以阅读 <a href=\"https://developer.apple.com/library/ios/featuredarticles/ExternalAccessoryPT/Introduction/Introduction.html#//apple_ref/doc/uid/TP40009502\">External Accessory Programming Topics</a></p></blockquote>\n<p>另请参阅</p>\n<p>以下资源提供了更多关于创建HomeKit应用程序的信息：<br><a href=\"https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/HomeKit.html#//apple_ref/doc/uid/TP40006556-CH70\">HomeKit User Interface Guidelines</a> 提供了用户界面设计指南<br><a href=\"https://developer.apple.com/app-store/review/guidelines/#homekit\">App Store Review Guidelines: HomeKit</a> 提供了加快app审核的技巧<br><a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HomeKit_Framework/index.html#//apple_ref/doc/uid/TP40014519\">HomeKit Framework Reference</a> 描述了HomeKit框架中的类和方法<br><a href=\"https://developer.apple.com/library/ios/documentation/ExternalAccessory/Reference/ExternalAccessoryFrameworkReference/index.html#//apple_ref/doc/uid/TP40008235\">External Accessory Framework Reference</a> 列出了系统提供的发现和配置无线智能家居产品UI<br><a href=\"https://developer.apple.com/library/ios/samplecode/HomeKitCatalog/Introduction/Intro.html#//apple_ref/doc/uid/TP40015048\">HomeKit Catalog</a> 提供示例演示HomeKit特性<br><a href=\"https://developer.apple.com/videos/play/wwdc2014/213/\">WWDC 2014: Introducing HomeKit</a> 对HomeKit更高层次的分析<br><a href=\"https://www.apple.com/business/docs/iOS_Security_Guide_Oct_2014.pdf\">iOS Security</a> 描述HomeKit如何处理iOS上的安全和隐私</p>\n<!--more-->\n<p>#第二部分：启用HomeKit</p>\n<p>HomeKit应用服务只提供给通过App Store发布的app应用程序。在你的Xcode工程中， HomeKit应用程序需要额外的配置，你的app必须有开发证书和代码签名才能使用HomeKit。在Xcode的Capabilities面板使用HomeKit，可避免代码签名的问题。你无需直接在Xcode或者会员中心编辑授权文件（entitlements）。</p>\n<p>##设置</p>\n<p>为了完成本文档中所有步骤，你需要：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.一个安装Xcode 6 或者Xcode 6 以上版本的Mac电脑。<br> 2.为了获得最佳体验，你的Mac电脑上最好安装最新的OS X 系统和最新的Xcode 版本。<br> 3.加iOS开发者计划。<br> 4.在Member Center 拥有创建代码签名和资源配置的权限。</p></blockquote>\n<p>在你开始使用HomeKit之前，请确保你已经完成以下任务。创建你团队的配置文件（Provisioning Profile），请参阅：<a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppStoreDistributionTutorial/Introduction/Introduction.html#//apple_ref/doc/uid/TP40013839\">App Distribution Quick Start</a>.</p>\n<p><img src=\"http://cc.cocimg.com/api/uploads/20150324/1427185340565965.png\"></p>\n<p>当你成功地完成了之前的任务后，General面板中Team弹出菜单中的错误信息和问题修复按钮将会消失。代码签名配置被成功创建后会展示下方的General面板。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/2_create_teamprofile_2x.png\"></p>\n<p>解决代码签名和证书配置问题，请参阅 <a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Introduction/Introduction.html#//apple_ref/doc/uid/TP40012582\">App Distribution Guide</a>文档中<a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/Troubleshooting/Troubleshooting.html#//apple_ref/doc/uid/TP40012582-CH5\">Troubleshooting</a>这一节。</p>\n<p>##启用HomeKit</p>\n<p>想要使用HomeKit，首先要启用它。Xcode将会添加HomeKit权限到你的工程授权文件中和会员中心的App ID授权文件中，也会将HomeKit框架添加到你的工程中。HomeKit 需要一个明确的App ID, 这个App ID是为了你完成这些步奏而创建的。</p>\n<p>启用HomeKit的步骤如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.在Xcode中，选择View &gt; Navigators &gt; Show Project Navigator。<br> 2.从Project/Targets弹出菜单中target（或者从Project/Targets的侧边栏）<br> 3.点击Capabilities查看你可以添加的应用服务列表。<br> 4.滑到HomeKit 所在的行并打开关。</p></blockquote>\n<p>##下载HomeKit Accessory Simulator</p>\n<p>无需为了开发Homekit 应用程序而购买硬件产品。你可以使HomeKit Accessory Simulator来测试HomeKit app和模拟配件设备之间的通信。HomeKit Accessory Simulator不是和Xcode一起发布的。 </p>\n<p>下载HomeKit Accessory Simulator步骤如下：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.在Capabilities面板的HomeKit分区，点击Download HomeKit Accessory Simulator按钮。（或者选择Xcode &gt; Open Developer Tool &gt; More Developer Tools）<br> 2.在浏览器中搜索并且下载”Hardware IO Tools for Xcode “.dmg文件。<br> 3.在 Finder中双击~/Downloads中的.dmg文件。<br> 4.把HomeKit Accessory Simulator拖拽到/Application文件中。</p></blockquote>\n<p>之后，你将可以使用HomeKit Accessory Simulator测试你的HomeKit应用程序，正如<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/TestingYourHomeKitApp/TestingYourHomeKitApp.html#//apple_ref/doc/uid/TP40015050-CH7-SW1\">Testing YourHomeKit App</a>中描述的那样。</p>\n<p>#第三部分：创建Home布局</p>\n<p>HomeKit 允许用户创建一个或者多个Home布局。每个Home（<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/cl/HMHome\">HMHome</a>）代表一个有网络设备的住所。用户拥有Home的数据并可通过自己的任何一台iOS设备进行访问。用户也可以和客户共享一个Home，但是客户的权限会有更多限制。被指定为primary home的home默认是Siri指令的对象，并且不能指定home。</p>\n<p>每个Home一般有多个room，并且每个room一般会有多个智能配件。在home(<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMRoom_Class/index.html#//apple_ref/occ/cl/HMRoom\">HMHome</a>) 中，每个房间是独立的room，并具有一个有意义的名字，例如“卧室”或者“厨房”，这些名字可以在Siri 命令中使用。一个accessory（<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessory_Class/index.html#//apple_ref/occ/cl/HMAccessory\">HMAccessory</a>）代表实际家庭中的自动化设备，例如车库开门器。一个sevice（<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMService_Class/index.html#//apple_ref/occ/cl/HMService\">HMService</a>）是accessory提供的?种实际服务，例如打开或者关闭车库，或者车库上的灯。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/homes_2x.png\"></p>\n<p>如果你的app 缓存了home布局的信息，那么当其布局发声改变的时候，app就需要更新这些信息。使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManager_Class/index.html#//apple_ref/occ/cl/HMHomeManager\">HMHomeManager</a>对象可以从HomeKit数据库获取<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/cl/HMHome\">HMHome</a>和其他相关的对象。本章描述的API获取对象后，你应该通过代理回调函数保持获取对象和HomeKit数据库同步，具体描述请参看“<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/RespondingtoHomeKitDatabaseChanges/RespondingtoHomeKitDatabaseChanges.html#//apple_ref/doc/uid/TP40015050-CH5-SW2\">Observing HomeKit Database Changes</a>“.</p>\n<p>##创建 Home Manager对象<br>使用Home Manager—一个<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManager_Class/index.html#//apple_ref/occ/cl/HMHomeManager\">HMHomeManager</a>对象的访问home、room、配件、服务以及其他HomeKit对象。在创建家庭对象管理器（home manager）之后，直接设置它的代理，以便获取到这些对象之后及时的通知到你。</p>\n<pre><code>self.homeManager = [[HMHomeManager alloc] init];\nself.homeManager.delegate = self;\n</code></pre>\n<p>当你创建一个home manager对象时，HomeKit就开始从HomeKit数据库获取这些homes和相关对象，例如room和accessory对象。当HomeKit正在获取那些对象时，home manager 的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManager_Class/index.html#//apple_ref/occ/instp/HMHomeManager/primaryHome\">primaryHome</a>属性是nil，并且<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManager_Class/index.html#//apple_ref/occ/instp/HMHomeManager/homes\">homes</a>属性是个空数组。你的app应该处理用户还没有完成创建home的情况，但是app应该等待直到HomeKit完成初始化。当获取对象完成之后，HomeKit 会发送<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManagerDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeManagerDelegate/homeManagerDidUpdateHomes:\">homeManagerDidUpdateHomes:</a>消息给home manager的代理。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：当app进入前台或者在后台Home manager属性发生改变时，这个<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManagerDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeManagerDelegate/homeManagerDidUpdateHomes:\">homeManagerDidUpdateHomes:</a>方法就会被调用，详情请参阅“<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/RespondingtoHomeKitDatabaseChanges/RespondingtoHomeKitDatabaseChanges.html#//apple_ref/doc/uid/TP40015050-CH5-SW3\">Observing Changes to the Collection of Homes</a>”。</p></blockquote>\n<p>##获取Primary Home和 Homes集合<br>通过home manager的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManager_Class/index.html#//apple_ref/occ/instp/HMHomeManager/primaryHome\">primaryHome</a>属性，可以得到primary home，代码如下：</p>\n<pre><code>HMHome *home = self.homeManager.primaryHome;\n</code></pre>\n<p>使用home manager的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManager_Class/index.html#//apple_ref/occ/instp/HMHomeManager/homes\">homes</a>属性可以得到用户的所有home的集合；例如自家主要居所、度假别墅以及办公室。每个home都对应一个独立的home对象。</p>\n<pre><code>HMHome *home;\n for(home in self.homeManager.homes )&#123;\n ...\n&#125;\n</code></pre>\n<p>##获取 Home中的所有room<br>在一个home中，rooms属性定义accessories的物理位置。用home的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instp/HMHome/rooms\">rooms</a>属性可以枚举home中的所room。</p>\n<pre><code>HMHome *home = self.homeManager.primaryHome;\n HMRome *room;\n for(room in home.rooms)&#123;\n     ...\n &#125;\n</code></pre>\n<p>##获取Room 中的Accessories<br>Accessories 数组属于home，但是被指定给了home中的room。假如用户没有给一个accessory指定room，那么这个accessories被指定一个默认的room ,这个room是<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/roomForEntireHome\">roomForEntireHome</a>方法的返回值。用room的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMRoom_Class/index.html#//apple_ref/occ/instp/HMRoom/accessories\">accessories</a>属性可以枚举room中所有的accessory。代码如下：</p>\n<pre><code>HMAccessory *accessory;\n for(accessory in room.accessories)&#123;\n …\n &#125;\n</code></pre>\n<p>如果你要展示一个个accessory的相关信息或者允许用户控制它，可设置accessory的代理方法并实现这个代理方法，详情请见“<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/RespondingtoHomeKitDatabaseChanges/RespondingtoHomeKitDatabaseChanges.html#//apple_ref/doc/uid/TP40015050-CH5-SW1\">Observing Changes to Accessories</a>”.<br>一旦你获取到一个accessory对象，你就可以访问它的服务和对象，详情请参阅“<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/AccessingServicesandTheirCharacteristics/AccessingServicesandTheirCharacteristics.html#//apple_ref/doc/uid/TP40015050-CH6-SW1\">Accessing Services and Characteristics</a>”。</p>\n<p>##获取Home中的Accessories属性<br>使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/cl/HMHome\">HMHome</a>类中的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instp/HMHome/accessories\">accessories</a>的方法，可以直接从Home对象中获取所有的accessory对象，而不用枚举home中的所有room对象（详情请见“<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/FindingandAddingAccessories/FindingandAddingAccessories.html#//apple_ref/doc/uid/TP40015050-CH3-SW5\">Getting the Accessories in a Room</a>”)。</p>\n<p>#第四部分：创建Homes和添加Accessories</p>\n<p>HomeKit对象被保存在一个可以共享的HomeKit数据库里，它可以通过HomeKit框架被多个应英程序访问。所有HomeKit调用的方法都是异步写入的，并且这些方法都包含一个完成处理后的参数。如果这个方法处理成功了，你的应用将会在完成处理函数里更新本地对象。应用程序启动时，HomeKit对象发生改变的并不能收到代理回调?法，只能接受处理完成后的回调函数。</p>\n<p>想要观察其他应用程序启动时HomeKit对象的变化，请参阅：<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/RespondingtoHomeKitDatabaseChanges/RespondingtoHomeKitDatabaseChanges.html#//apple_ref/doc/uid/TP40015050-CH5-SW2\">Observing HomeKit Database Changes</a>。查阅异步消息完成处理后传过来的错误码的信息，请参阅：<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HomeKit_Constants/index.html#//apple_ref/doc/uid/TP40014524\">HomeKit Constants Reference</a>.</p>\n<p>##对象命名规则</p>\n<p>HomeKit对象的名字，例如home、room和zone对象都可以被Siri识别，这一点已经在文档中指出。以下几点是HomeKit对象的命名规则：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.对象名字在其命名空间内必须是唯一的。<br>2.属于用户所有的home名字都在一个命名空间内。<br>3.一个home对象及其所包含的对象在另一个命名空间内。<br>4.名字只能包含数字、字母、空格以及省略号字符。<br>5.名字必须以数字或者字母字符开始。<br>6.在名字比较的时候,空格或者省略号是忽略的（例如home1和home 1 同一个名字）。<br>7.名字没有大小写之分。</p></blockquote>\n<p>想了用户可以使用哪些语言与Siri进行交互，请参阅<a href=\"https://developer.apple.com/homekit/ui-guidelines/\">HomeKit User Interface Guidelines</a>文档中的”Siri Integration”</p>\n<p>##创建Homes</p>\n<p>在<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManager_Class/index.html#//apple_ref/occ/cl/HMHomeManager\">HMHomeManager</a>类中使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManager_Class/index.html#//apple_ref/occ/instm/HMHomeManager/addHomeWithName:completionHandler:\">addHomeWithName:completionHandler:</a>异步方法可以添加一个home。作为参数传到那个方法中的home的名字，必须是唯一独特的，并且是Siri可以识别的home名字。</p>\n<pre><code>[self.homeManager addHomeWithName:@&quot;My Home&quot; completionHandler:^(HMHome *home, NSError *error) &#123;\n    if (error != nil) &#123;\n        // Failed to add a home\n    &#125; else &#123;\n        // Successfully added a home\n    &#125; \n&#125;];\n</code></pre>\n<p>在else语句中，写入代码以更新你应的程序的视图。为了获取home manager对象，请参阅<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/FindingandAddingAccessories/FindingandAddingAccessories.html#//apple_ref/doc/uid/TP40015050-CH3-SW2\">Getting the Home Manager Object</a>.</p>\n<p>##在Home中增加一个Room</p>\n<p>使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/addRoomWithName:completionHandler:\">addRoomWithName:completionHandler:</a>异步方法可以在一个home中添加一个room对象。作为参数传到那个方法中的room的名字，必须是唯一独特的，并且是Siri可识别的room名字。</p>\n<pre><code>NSString *roomName = @&quot;Living Room&quot;;\n[home addRoomWithName:roomName completionHandler:^(HMRoom *room, NSError *error) &#123;\n    if (error != nil) &#123;\n        // Failed to add a room to a home\n    &#125; else &#123;\n        // Successfully added a room to a home\n    &#125; \n&#125;];\n</code></pre>\n<p>在else语句中，写入代码更新应用程序的视图。</p>\n<p>##发现配件</p>\n<p>Accessories封装了物理配件的状态，因此它不能被用户创建。想要允许用户给家添加新的配件，我们可以使<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryBrowser_Class/index.html#//apple_ref/occ/cl/HMAccessoryBrowser\">HMAccessoryBrowser</a>对象找到一个与home没有关联的配件。<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryBrowser_Class/index.html#//apple_ref/occ/cl/HMAccessoryBrowser\">HMAccessoryBrower</a>对象在后台搜寻配件，当它找到配件的时候，使用委托来通知你的应用程序。只有在<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryBrowser_Class/index.html#//apple_ref/occ/instm/HMAccessoryBrowser/startSearchingForNewAccessories\">startSearchingForNewAccessories</a>方法调用之后或者<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryBrowser_Class/index.html#//apple_ref/occ/instm/HMAccessoryBrowser/stopSearchingForNewAccessories\">stopSearchingForNewAccessories</a>方法调用之前，<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryBrowserDelegate_Protocol/index.html#//apple_ref/occ/intf/HMAccessoryBrowserDelegate\">HMAccessoryBrowserDelegate</a>消息才被发送给代理对象。</p>\n<p>发现home中的配件<br>1.在你的类接口中添加配件浏览器委托协议，并且添加一个配件浏览器属性。代码如下：</p>\n<pre><code>@interface EditHomeViewController ()&lt;HMAccessoryBrowserDelegate&gt;\n@property HMAccessoryBrowser *accessoryBrowser;\n@end\n</code></pre>\n<p>用你自己的类名代替EditHomeViewController</p>\n<p>2.创建配件浏览器对象，并设置它的代理</p>\n<pre><code>self.accessoryBrowser = [[HMAccessoryBrowser alloc] init];\nself.accessoryBrowser.delegate = self;\n</code></pre>\n<p>3.开始搜寻配件</p>\n<pre><code>[ self.accessoryBrowser startSearchingForNewAccessories];\n</code></pre>\n<p>4.将找到的配件添加到你的收藏里</p>\n<pre><code>- (void)accessoryBrowser:(HMAccessoryBrowser *)browser didFindNewAccessory:(HMAccessory *)accessory &#123;\n    // Update the UI per the new accessory; for example,reload a picker view.\n    [self.accessoryPicker reloadAllComponents];\n&#125;\n</code></pre>\n<p>用你自己的代码实现上面的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryBrowserDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMAccessoryBrowserDelegate/accessoryBrowser:didFindNewAccessory:\">accessoryBrowser:didFindNewAccessory:</a>方法。 当然也可以实现<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryBrowserDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMAccessoryBrowserDelegate/accessoryBrowser:didRemoveNewAccessory:\">accessoryBrowser:didRemoveNewAccessory:</a> 这个方法来移除配件，这个配件对你的视图或者收藏来说不再是新的。</p>\n<p>5.停止搜寻配件</p>\n<p>如果一个视图控制器正在开始搜寻配件，那么可以通过重写<a href=\"https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewController_Class/index.html#//apple_ref/occ/instm/UIViewController/viewWillDisappear:\">viewWillDisappear:</a>方法来停止搜寻配件。代码如下：</p>\n<pre><code>- (void)viewWillDisappear:(BOOL)animated &#123;\n\n    [self.accessoryBrowser stopSearchingForNewAccessories];\n&#125;\n</code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意： 在WiFi网络环境下，为了安全地获取新的并且能够被HomeKit发现的无线配件，请参阅<a href=\"https://developer.apple.com/library/ios/documentation/ExternalAccessory/Reference/ExternalAccessoryFrameworkReference/index.html#//apple_ref/doc/uid/TP40008235\">External Accessory Framework Reference</a>.</p></blockquote>\n<p>##为Home和room添加配件（Accessory）</p>\n<p>配件归属于home，并且它可以被随意添加到home中的任意一个room中。使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/addAccessory:completionHandler:\">addAccessory:completionHandler:</a>这个异步方法可以在home中添加配件。这个配件的名字作为一个参数传递到上述异步方法中，并且这个名字在配件所属的home中必须是唯一的。使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/assignAccessory:toRoom:completionHandler:\">assignAccessory:toRoom:completionHandler:</a> 这个异步方法可以给home中的room添加配件。配件默认的room是<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/roomForEntireHome\">roomForEntireHome</a>这个方法返回值room。下面的代码演示了如何给home和room添加配件:</p>\n<pre><code>// Add an accesory to a home and a room\n// 1. Get the home and room objects for the completion handlers.\n\n__block HMHome *home = self.home;\n__block HMRoom *room = roomInHome;\n\n// 2. Add the accessory to the home\n[ home addAccessory:accessory completionHandler:^(NSError *error) &#123;\n    if (error) &#123;\n        // Failed to add accessory to home\n    &#125; else &#123;\n        if (accessory.room != room) &#123;\n            // 3. If successfully, add the accessory to the room\n\n            [home assignAccessory:accessory toRoom:room completionHandler:^(NSError *error) &#123;\n                if (error) &#123;\n                        // Failed to add accessory to room\n                &#125; &#125;];\n        &#125; &#125;\n&#125;];\n</code></pre>\n<p>配件可提供一项或者多项服务，这些服务的特性是由制造商定义。想了解配件的服务和特性目的，请参阅 <a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/AccessingServicesandTheirCharacteristics/AccessingServicesandTheirCharacteristics.html#//apple_ref/doc/uid/TP40015050-CH6-SW1\">Accessing Services and Characteristics</a>.</p>\n<p>##更改配件名称</p>\n<p>使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessory_Class/index.html#//apple_ref/occ/instm/HMAccessory/updateName:completionHandler:\">updateName:completionHandler:</a> 异步方法可以改变配件的名称，代码如下：</p>\n<pre><code>[accessory updateName:@&quot;Kid&#39;s Night Light&quot; completionHandler:^(NSError *error) &#123;\n    if (error) &#123;\n        // Failed to change the name\n    &#125; else &#123;\n        // Successfully changed the name\n    &#125;\n&#125;];\n</code></pre>\n<p>##为Homes和Room添加Bridge（桥接口）</p>\n<p>桥接口是配件中的一个特殊对象，它允许你和其他配件交流，但是不允许你直接和HomeKit交流。例如一个桥接口可以是控制多个灯的枢纽，它使用的是自己的通信协议，而不是HomeKit配件通信协议。想要给home添加多个桥接口 ，你可以按照<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/WritingtotheHomeKitDatabase/WritingtotheHomeKitDatabase.html#//apple_ref/doc/uid/TP40015050-CH4-SW5\">Adding Accessories to Homes and Rooms</a>中所描述的步骤，添加任何类型的配件到home中。当你给home添加一个桥接口时，在桥接口底层的配件也会被添加到home中。正如<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/RespondingtoHomeKitDatabaseChanges/RespondingtoHomeKitDatabaseChanges.html#//apple_ref/doc/uid/TP40015050-CH5-SW2\">Observing HomeKit Database Changes</a>中所描述的那样，每次更改通知设计模，home的代理不会接收到桥接口的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeDelegate/home:didAddAccessory:\">home:didAddAccessory:</a> 代理消息，而是接收一个有关于配件的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeDelegate/home:didAddAccessory:\">home:didAddAccessory:</a>代理消息。在home中，要把桥接口后的配件和任何类型的配件看成一样的–例如，把它们加入配件列表的配置表中。相反的是，当你给room增添一个桥接口时，这个桥接口底层的配件并不会自动地添加到room中，原因是桥接口和它的的配件可以位于到不同的room中。</p>\n<p>##创建分区</p>\n<p>分区 (<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMZone_Class/index.html#//apple_ref/occ/cl/HMZone\">HMZone</a>) 是任意可选的房间（rooms）分组；例如楼上、楼下或者卧室。房间可以被添加到一个或者多个区域。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/zones_2x.png\"></p>\n<p>可使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/addZoneWithName:completionHandler:\">addZoneWithName:completionHandler:</a> 异步方法创建分区。所创建的作为参数传递到这个方法中分区的名称，在home中必须是唯一的，并且应该能被Siri识别。代码如下：</p>\n<pre><code>__block HMHome *home = self.home;\nNSString *zoneName = @&quot;Upstairs&quot;;\n[home addZoneWithName:zoneName completionHandler:^(HMZone *zone, NSError *error)&#123;\n    if (error) &#123;\n        // Failed to create zone\n    &#125; else &#123;\n        // Successfully created zone, now add the rooms\n    &#125;\n&#125;];\n</code></pre>\n<p>可使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMZone_Class/index.html#//apple_ref/occ/instm/HMZone/addRoom:completionHandler:\">addRoom:completionHandler:</a>异步方法给分区添加一个room，代码如下：</p>\n<pre><code>__block HMRoom *room = roomInHome;\n[zone addRoom:room completionHandler:^(NSError *error) &#123;\n    if (error) &#123;\n        // Failed to add room to zone\n    &#125; else &#123;\n        // Successfully added room to zone\n    &#125; \n&#125;];\n</code></pre>\n<p>#第五部分：观察HomeKit数据库的变化</p>\n<p>每个Home都有一个HomeKit数据库。如下图所示，HomeKit数据库会安全地和home授权的用户的iOS设备以及潜在的客人的iOS设备进行同步。为了给用户展示当前最新的数据，你的应用需要观察HomeKit数据库的变化。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/architecture_2x.png\"></p>\n<p>##HomeKit代理方法</p>\n<p>HomKit使用代理设计模式（<a href=\"https://developer.apple.com/library/ios/documentation/General/Conceptual/DevPedia-CocoaCore/Delegation.html#//apple_ref/doc/uid/TP40008195-CH14-SW2\">delegation design pattern</a>）来通知应用程序HomeKit对象的改变。一般来讲，如果你的应用程序调用了一个带有完成处理参数的HomeKit方法，并且这个方法被成功调用了，那么相关联的代理消息就会被发送给其他HomeKit应用，无论这些应用是安装在同一台iOS设备上还是远程iOS设备上。这些应用甚至可以运行在客人的iOS设备上。如果你的应用发起了数据改变，但是代理消息并没有发送到你的应用，那么添加代码到完成处理方法和相关联的代理方法中来刷新数据和更新视图就成为必须了。如果home布局发生了显著变化，那么就重新加载关于这个home的所有信息。在完成程序处理的情况下，请在更新应用之前检查那个方法是否成功。Homkit也会调用代理方法来通知你的应用程序home网络状态的改变。</p>\n<p>例如，下图演示了使用代理方法的过程：响应用户的操作，你的应用程序调用了<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/addRoomWithName:completionHandler:\">addRoomWithName:completionHandler:</a>方法，并且没有错误发生，完成处理程序应当更新home的所有视图。如果成功了，homeKit将会发送<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeDelegate/home:didAddRoom:\">home:didAddRoom:</a>消息给其他应用中homes的代理。因此，你实现的这个<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeDelegate/home:didAddRoom:\">home:didAddRoom:</a>方法也应该更新home的所有视图。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/changeflow_2x.png\"></p>\n<p>应用程序只有在前台运行的时候才能接受代理消息。当你的应用在后台时，HomeKit数据库的改变并不会成批处理。也就是说，如果你的应用在后台，当其他的应用成功地添加一个room到home中的时候，你的应用程序并不会接收到<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeDelegate/home:didAddRoom:\">home:didAddRoom:</a> 消息。当你的应用程序到前台运行时，你的应用程序将会接收到<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManagerDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeManagerDelegate/homeManagerDidUpdateHomes:\">homeManagerDidUpdateHomes:</a>消息，这个消息是表示你的应用程序要重新加载所有的数据。</p>\n<p>##观察Homes集合的改变</p>\n<p>设置home manager的代理并且实现<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManagerDelegate_Protocol/index.html#//apple_ref/occ/intf/HMHomeManagerDelegate\">HMHomeManagerDelegate</a>协议，当primary home或者home集合发生改变时，可以接收代理消息。</p>\n<p>所有的应用都需要实现<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManagerDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeManagerDelegate/homeManagerDidUpdateHomes:\">homeManagerDidUpdateHomes:</a>方法，这个方法在完成最初获取homes之后被调用。对新建的home manager来说，在这个方法被调用之前，<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManager_Class/index.html#//apple_ref/occ/instp/HMHomeManager/primaryHome\">primaryHome</a>属性的值是nil，<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManager_Class/index.html#//apple_ref/occ/instp/HMHomeManager/homes\">homes</a>数组是空的数组。当应用程序开始在前台运行时也会调用 <a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManagerDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeManagerDelegate/homeManagerDidUpdateHomes:\">homeManagerDidUpdateHomes:</a> 方法，当其在后台运行时数据发生改变。该<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManagerDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeManagerDelegate/homeManagerDidUpdateHomes:\">homeManagerDidUpdateHomes:</a>方法会重新加载与homes相关联的所有数据。</p>\n<p>观察homes的变化</p>\n<p>1.在你的类接口中添加HMHomeManagerDelegate代理和homeManager属性。代码如下：</p>\n<pre><code>@interface AppDelegate ()&lt;HMHomeManagerDelegate&gt;\n@property (strong, nonatomic) HMHomeManager *homeManager;\n@end\n</code></pre>\n<p>2.创建home manager对象并设置其代理</p>\n<pre><code>- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions&#123;\n    self.homeManager = [[HMHomeManager alloc] init];\n    self.homeManager.delegate = self;\n    return YES;\n&#125;\n</code></pre>\n<p>3.实现homes发生改变时调用的代理方法。例如：如果多个视图控制器展示了homes相关信息，你可以发布一个更改通知去更新所有视图。</p>\n<pre><code>- (void)homeManagerDidUpdateHomes:(HMHomeManager *)manager &#123;\n    // Send a notification to the other objects\n    [[NSNotificationCenter defaultCenter]\n    postNotificationName:@&quot;UpdateHomesNotification&quot; object:self];\n&#125;\n- (void)homeManagerDidUpdatePrimaryHome:(HMHomeManager *)manager &#123;\n    // Send a notification to the other objects\n    [[NSNotificationCenter defaultCenter]\n    postNotificationName:@&quot;UpdatePrimaryHomeNotification&quot; object:self];\n&#125;\n</code></pre>\n<p>视图控制器注册更改通知并且执行适当的操作。</p>\n<pre><code>[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updateHomes:) name:@&quot;UpdateHomesNotification&quot; object:nil];\n\n[[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(updatePrimaryHome:) name:@&quot;UpdatePrimaryHomeNotification&quot; object:nil];\n</code></pre>\n<p>##观察个别home的变化</p>\n<p>展示home信息的视图控制器应该成为home对象的代理，并且当home发生改变时更新视图控制器的视图。</p>\n<p>观察特定home对象的改变</p>\n<p>1.在类接口中添加home代理协议。</p>\n<pre><code>@interface HomeViewController ()&lt;HMHomeDelegate&gt;\n\n@end\n</code></pre>\n<p>2.设置配件代理</p>\n<pre><code>home.delegate = self;\n</code></pre>\n<p>3.实现<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intf/HMHomeDelegate\">HMHomeDelegate</a>协议</p>\n<p>例如：实现<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeDelegate/home:didAddAccessory:\">home:didAddAccessory:</a>和<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeDelegate/home:didRemoveAccessory:\">home:didRemoveAccessory:</a> 方法来更新展示配件的视图。用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessory_Class/index.html#//apple_ref/occ/cl/HMAccessory\">HMAccessory</a>类的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessory_Class/index.html#//apple_ref/occ/instp/HMAccessory/room\">room</a>属性可以获得配件所属的room。（对配件来说，默认的room是<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/roomForEntireHome\">roomForEntireHome</a>这个方法的返回值。）</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Bridge Note:当你为home添加桥接口时，桥接口底层的配件会自动被添加到home中。你的代理会接收到桥接口后每个配件的 <a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeDelegate/home:didAddAccessory:\">home:didAddAccessory:</a>消息，但是你的代理不会接收到桥接口的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeDelegate/home:didAddAccessory:\">home:didAddAccessory:</a>消息。</p></blockquote>\n<p>##观察配件的变化</p>\n<p>配件的状态可以在任何时间发生变化。配件可能不能被获得，可以被移除，或者被关闭。请更新用户界面以反映配件状态的更改，尤其是如果你的app允许用户控制配件时。</p>\n<p>这以下步骤中，我们假设你已经从HomeKit数据库中检索到了配件对象，正如<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/FindingandAddingAccessories/FindingandAddingAccessories.html#//apple_ref/doc/uid/TP40015050-CH3-SW5\">Getting the Accessories in a Room</a>中描述的那样。</p>\n<p>观察个别配件的变化</p>\n<p>1.在类接口中添加配件代理协议。</p>\n<pre><code>@interface AccessoryViewController ()&lt;HMAccessoryDelegate&gt;  \n\n@end\n</code></pre>\n<p>2.设置配件的代理</p>\n<pre><code>accessory.delegate = self;\n</code></pre>\n<p>3.实现 <a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryDelegate_Protocol/index.html#//apple_ref/occ/intf/HMAccessoryDelegate\">HMAccessoryDelegate</a> 协议</p>\n<p>比如，执行<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMAccessoryDelegate/accessoryDidUpdateReachability:\">accessoryDidUpdateReachability:</a>方法以启用或者禁用配件控制。</p>\n<pre><code>- (void)accessoryDidUpdateReachability:(HMAccessory *)accessory &#123;\n    if (accessory.reachable == YES) &#123;\n           // Can communicate with the accessory\n    &#125; else &#123;\n           // The accessory is out of range, turned off, etc\n    &#125;\n&#125;\n</code></pre>\n<p>如果你展示了配件的服务状态和特性，那么请执行以下代理方法来相应地更新其视图：</p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMAccessoryDelegate/accessoryDidUpdateServices:\">accessoryDidUpdateServices:</a></p>\n<p><a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessoryDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMAccessoryDelegate/accessory:service:didUpdateValueForCharacteristic:\">accessory:service:didUpdateValueForCharacteristic:</a></p>\n<p>想了解配件的服务，请参阅<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/AccessingServicesandTheirCharacteristics/AccessingServicesandTheirCharacteristics.html#//apple_ref/doc/uid/TP40015050-CH6-SW1\">Accessing Services and Their Characteristics</a>.</p>\n<p>#第六部分：访问服务和特性</p>\n<p>服务(<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMService_Class/index.html#//apple_ref/occ/cl/HMService\">HMService</a>)代表了一个配件(accessory)的某个功能和一些具有可读写的特性(<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMCharacteristic_Class/index.html#//apple_ref/occ/cl/HMCharacteristic\">HMCharacteristic</a>)。一个配件可以拥有多项服务,一个服务也可以有很多特性。比如一个车库开门器可能拥有一个照明和开关的服务。照明服务可能拥有打开/关闭和调节亮度的特性。用户不能制造智能家电配件和它们的服务-配件制造商会制造配件和它们的服务-但是用户可以改变服务的特性。一些拥有可读写属性的特性代表着某种物理状态，比如，一个恒温器中的当前温度就是一个只可读的值，但是目标温度又是可读写的。苹果预先定义了一些服务和特性的名称，以便让Siri能够识别它们。</p>\n<p>##获得配件的服务和属性</p>\n<p>在依照<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/FindingandAddingAccessories/FindingandAddingAccessories.html#//apple_ref/doc/uid/TP40015050-CH3-SW5\">Getting the Accessroties in a Room</a>中描述，你创建了一个配件对象之后,你可以获得配件的服务和特性。当然你也可以直接从home中按照类型获得不同的服务。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>重要:不要暴露匿名服务-比如固件升级服务-给用户</p></blockquote>\n<p>通过<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessory_Class/index.html#//apple_ref/occ/cl/HMAccessory\">HMAccessory</a>类对象的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAccessory_Class/index.html#//apple_ref/occ/instp/HMAccessory/services\">services</a>属性，我们可以获得一个配件的服务。</p>\n<pre><code>NSArray *services = accessroy.services;\n</code></pre>\n<p>要获得一个home当中配件提供的特定服务，使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/cl/HMHome\">HMHome</a>类对象的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/servicesWithTypes:\">servicesWithTypes:</a>方法。</p>\n<pre><code>//Get all lights and thermostats in a home\nNSArray *lightServices = [home servicesWithTypes:[HMServicesTypeLightbulb]];\nNSArray *thermostatServices = [home servicesWithTypes:[HMServicesTypeThermostat]];\n</code></pre>\n<p>使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMService_Class/index.html#//apple_ref/occ/cl/HMService\">HMServices</a>类对象的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMService_Class/index.html#//apple_ref/occ/instp/HMService/name\">name</a>属性来获得服务的名称</p>\n<pre><code>NSString *name = services.name;\n</code></pre>\n<p>要获得一个服务的特性，请使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMService_Class/index.html#//apple_ref/occ/instp/HMService/characteristics\">characteristics</a>属性。</p>\n<pre><code>NSArray *characteristics = service.characteristics\n</code></pre>\n<p>使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMService_Class/index.html#//apple_ref/occ/instp/HMService/serviceType\">servicesType</a>属性来获得服务的类型</p>\n<pre><code>NSString *serviceType = service.serviceType;\n</code></pre>\n<p>苹果定义了一些服务类型，并能被Siri识别:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.门锁(Door locks)<br> 2.车库开门器(Garage door openers)<br> 3.灯光(Lights)<br> 4.插座(Outlets)<br> 5.恒温器(Thermostats)</p></blockquote>\n<p>##改变服务名称</p>\n<p>使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMService_Class/index.html#//apple_ref/occ/instm/HMService/updateName:completionHandler:\">updateName:completionHandler:</a>异步方法来改变服务名称。传入此方法的服务名称参数必须在一个home当中是唯一的，并且服务名可被Siri识别。</p>\n<pre><code>[service updateName:@&quot;Garage 1 Opener&quot; completionHandler:^(NSError *error) &#123;\n    if (error) &#123;\n        // Failed to change the name\n    &#125; else &#123;\n        // Successfully changed the name\n    &#125;\n&#125;];\n</code></pre>\n<p>##访问特性的值</p>\n<p>特性代表了一个服务的一个参数，它要么是只读、可读写或者只写。它提供了这个参数可能的值的信息，比如，一个布尔或者一个范围值。恒温器中的温度就是只读的，而目标温度又是可读写的。一个执行某个任务的命令且不要求任何返回-比如播放一段声音或者闪烁一下灯光来确认某个配件-可能就是只写的。</p>\n<p>苹果定义了一些特性的类型，并能被Siri识别:</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.亮度(Brightness)<br> 2.最近温度(Current temperature)<br> 3.锁的状态(Lock state)<br> 4.电源的状态(Power state)<br> 5.目标状态(Target state)<br> 6.目标温度(Target temperature)</p></blockquote>\n<p>比如，对于一个车库开门器来说，目标状态就是打开或者关闭。对于一个锁来说，目标状态又是上锁和未上锁。</p>\n<p>在你获得了一个<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMService_Class/index.html#//apple_ref/occ/cl/HMService\">HMService</a>对象之后,如 <a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/AccessingServicesandTheirCharacteristics/AccessingServicesandTheirCharacteristics.html#//apple_ref/doc/uid/TP40015050-CH6-SW2\">Getting Services and Their Properties</a>所描述的,你可以获得每个服务的特性的值。因为这些值是从配件中获得的，这些读写的方法都是异步的，并可以传入一个完成回调的block。</p>\n<p>使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMCharacteristic_Class/index.html#//apple_ref/occ/instm/HMCharacteristic/readValueWithCompletionHandler:\">readValueWithCompletionHandler:</a>异步方法来读取一个特性的值。</p>\n<pre><code>[characteristic readValueWithCompletionHandler:^(NSError *error) &#123;\n    if (error == nil) &#123;\n           // Successfully read the value\n           id value = characteristic.value;\n    &#125;\n    else &#123;\n           // Unable to read the value\n    &#125;\n&#125;];\n</code></pre>\n<p>在if语句块中，加入你的代码以更新app的视图。</p>\n<p>使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMCharacteristic_Class/index.html#//apple_ref/occ/instm/HMCharacteristic/writeValue:completionHandler:\">writeValue:completionHandler:</a>异步方法来向一个特性写入值。</p>\n<pre><code>[self.characteristic writeValue:@42 withCompletionHandler:^(NSError *error) &#123;\n    if (error == nil) &#123;\n           // Successfully wrote the value\n    &#125;else &#123;\n           // Unable to write the value\n    &#125;\n&#125;];\n</code></pre>\n<p>不要以为函数调用完成就意味着写入成功，实际上只有在当完成回调执行并没有错误产生时才表示写入成功。比如，直到一个开关的特性改变之前都不要改变这个开关的状态。在if语句块中，加入你的代码，以更新app的视图。</p>\n<p>另外，在别的app更新了特性的值时也需要更新视图，在<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/RespondingtoHomeKitDatabaseChanges/RespondingtoHomeKitDatabaseChanges.html#//apple_ref/doc/uid/TP40015050-CH5-SW1\">Observing Changes to Accessories</a>中有描述。</p>\n<p>##创建服务组</p>\n<p>一个服务组(<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMServiceGroup_Class/index.html#//apple_ref/occ/cl/HMServiceGroup\">HMServiceGroup</a>)提供了控制不同配件的任意数量服务的快捷方式-比如，当用户离开家之后控制家中的某些灯。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/servicegroups_2x.png\"></p>\n<p>在你创建了一个<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/cl/HMHome\">HMHome</a>对象之后,如<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/FindingandAddingAccessories/FindingandAddingAccessories.html#//apple_ref/doc/uid/TP40015050-CH3-SW3\">Getting the Primary Home and Collection of Homes</a>中描述,你也就在这个家中创建一个服务组。</p>\n<p>为了创建一个服务组,我们使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/cl/HMHome\">HMHome</a>类对象的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/addServiceGroupWithName:completionHandler:\">addServiceGroupWithName:completionHandler:</a>方法。方法中参数服务组的名称必须在此家中唯一，并可以被Siri识别。</p>\n<pre><code>[self.home addServiceGroupWithName:@&quot;Away Lights&quot; completionHandler:^(HMServiceGroup *serviceGroup, NSError *error) &#123;\n    if (error == nil) &#123;\n           // Successfully created the service group\n    &#125; else &#123;\n           // Unable to create the service group\n       &#125;\n&#125;];\n</code></pre>\n<p>我们使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMServiceGroup_Class/index.html#//apple_ref/occ/cl/HMServiceGroup\">HMServiceGroup</a>类对象的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMServiceGroup_Class/index.html#//apple_ref/occ/instm/HMServiceGroup/addService:completionHandler:\">addService:completionHandler:</a>方法来向服务组中添加一个服务。服务可以在一个或多个服务组中。</p>\n<pre><code>[serviceGroup addService:service completionHandler:^(NSError *error) &#123;\n    if (error == nil) &#123;\n           // Successfully added service to service group\n    &#125;\n       // Unable to add the service to the service group\n&#125;];\n</code></pre>\n<p>通过<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/cl/HMHome\">HMHome</a>类对象的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instp/HMHome/serviceGroups\">serviceGroups</a>属性，来获得这个家的所有服务组。</p>\n<p>NSArray *serviceGroups = self.home.serviceGroups;<br>通过<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMServiceGroup_Class/index.html#//apple_ref/occ/cl/HMServiceGroup\">HMServiceGroup</a>类对象的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMService_Class/index.html#//apple_ref/occ/instp/HMService/accessory\">accessory</a>属性，我们获得服务所对应的智能电器。</p>\n<pre><code>HMAccessory *accessory = service.accessory;\n</code></pre>\n<p>和配件类似，代理方法在别的app改变服务组时也会被调用。如果你的app使用了服务组，请阅读<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/doc/uid/TP40014474\">HMHomeDelegate Protocol Reference</a>文档，获悉你应该实现哪些方法以观察这些变化。</p>\n<p>#第七部分：测试HomeKitApp</p>\n<p>如果你没有智能电器(智能配件），你可以使用HomeKit Accessroy Simulator来模拟home中的智能电器。每个模拟配件都拥有服务和特性，你可以从你的App当中控制它。你的App在HomeKit数据库中创建对象和关系。它可以创建home布局，可以添加新的配件到模拟的home环境当中，最后向home中的每个房间添加智能配件。然后，你的app就能控制这些在HomeKit Accessory Simulator展示的模拟智能配件了。为了使用HomeKit Accessory Simulator，请在iOS模拟器中运行你的应用程序，或者使用Xcode在iOS设备上运行应用程序。</p>\n<p>HomeKit Accessory Simulator是一个附加的开发者工具，不过并没有安装在Xcode当中。请按照<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/EnablingHomeKit/EnablingHomeKit.html#//apple_ref/doc/uid/TP40015050-CH2-SW3\">Download HomeKit Accessory Simulator</a>中所述的安装HomeKit Accessory Simulator。</p>\n<p>##添加智能电器（配件）</p>\n<p>使用HomeKit Accessory Simulator来添加智能电器到模拟网络中。</p>\n<p>向网络中添加智能电器配件，请按照下面的步骤添加：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.在HomeKit Accessory Simulator中，点击底部左边‘+’按钮。<br> 2.从弹出菜单中选择添加智能电器(Add Accessory)<br> 3.输入智能电器的名字和制造商。</p></blockquote>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/add_accessory_2x.png\"></p>\n<p>4.点击完成</p>\n<p>如果想删除一个智能电器，请选择一个智能电器然后点击键盘上的Delete键。</p>\n<p>##向智能电器（配件）中添加服务</p>\n<p>一个智能电器需要一项服务和特性，你可以从app控制它。从预定义了服务列表中选择一项服务，并自定义特性。</p>\n<p>按照下面步骤向智能电器中添加服务</p>\n<p>1.在HomeKit Accessory Simulator中，选择Accessories列中的某个配件。<br>该配件的服务信息会展示在一个详情界面中。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/add_service_2x.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意:所有智能电器都有一个Accessory Information，显示在所有其他服务的下方。你可以向这个Accessory Information服务添加特性，但你不能删除默认的特性。</p></blockquote>\n<p>2.点击添加服务(Add Service)，并从弹出视图中选择一个服务类型。</p>\n<p>新添加的服务会在右边详细显示。HomeKit Accessory Simulator为每种服务创建通用的特性。比如一个灯光服务的默认特性为色彩(Hue)，饱和度(Saturation)，亮度(Brightness)和开关。(开关特性和电源状态特性是一样的,正如 <a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/AccessingServicesandTheirCharacteristics/AccessingServicesandTheirCharacteristics.html#//apple_ref/doc/uid/TP40015050-CH6-SW3\">Accessing Values of Characteristics</a>中描述的那样。）一些特性是强制性的有一些也是可选择的。比如，开关特性就是强制性的，而色彩，饱和度，亮度这些特性都是可选择的。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/add_service_2_2x.png\"></p>\n<p>##向服务中添加特性</p>\n<p>你可以向服务中添加预定义的特性，或者自定义的特性。每种特性你都只能添加一个。</p>\n<p>按照下面的步骤向服务中添加特性：</p>\n<p>1.在HomeKit Accessory Simulator中，服务详情视图，点击添加特性(Add Characteristic)</p>\n<p>2.在特性类型菜单中，选择一个类型或者自定义类型。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/add_characteristic_2x.png\"></p>\n<p>3.在其他文本框中输入此特性的其他信息，并点击完成(Finish).</p>\n<p>新添加的特性会在详细视图展示出来。</p>\n<p>点击特性右边的减号来删除一个特性。如果特性右边并没有减号显示，这说明这个特性对这个服务来说是必须的。比如，你可以删除电灯服务中的色彩(Hue)，饱和度(Saturation)和亮度(Brightness)，但是你不可以删除开关特性。</p>\n<p>##通过你的App向家庭中添加智能电器（配件）</p>\n<p>在你通过HomeKit Accessory Simulator创建了一个智能电器后，运行你的App然后添加一个新的智能电器到你的家庭。</p>\n<p>如何配对家庭中的智能电器：</p>\n<ol>\n<li><p> 在Xcode中，点击Run并调用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/addAccessory:completionHandler:\">addAccessory:completionHandler:</a>方法(如<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/WritingtotheHomeKitDatabase/WritingtotheHomeKitDatabase.html#//apple_ref/doc/uid/TP40015050-CH4-SW5\">Adding Accessories to Homes and Rooms</a>中描述的那样).</p>\n</li>\n<li><p> 如果弹出了一个Add HomeKit Accessory对话框声明这个智能电器未被信任(这在HomeKit Accessory Simulator中是被允许的)，不用管它，点击Add Anyway。</p>\n</li>\n</ol>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/add_accessory_dialog1_2x.png\"></p>\n<ol start=\"3\">\n<li> 在接下来显示的Add HomeKit Accessory对话框中，输入智能电器的setup code然后点击Add。</li>\n</ol>\n<p>在HomeKit Accessory Simulator，setup code显示在详情界面智能电器名称下。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/add_accessory_dialog2_2x.png\"></p>\n<p>关于如何编写代码来添加一个智能电器到家庭和房间请阅读<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/WritingtotheHomeKitDatabase/WritingtotheHomeKitDatabase.html#//apple_ref/doc/uid/TP40015050-CH4-SW1\">Creating Homes and Adding Accessoris</a>。</p>\n<p>##控制智能电器（配件）</p>\n<p>在HomeKit Accessory Simulator中，你可以获得智能电器的服务，并在其他HomeKit App中设置服务的特性值来模拟控制这个智能电器，或者手动地模拟控制智能电器。</p>\n<p>想要控制一个智能电器你需要:</p>\n<p>1.在HomeKit Accessory Simulator中的智能电器列表（Accessories column）中选择一个智能电器。这个智能电器的服务和特性会被展示在详情界面。</p>\n<p>2.操作一个特性的控件来改变它的值。</p>\n<p>比如，为了改变一个灯泡的颜色（Hue），饱和度（Saturation）和亮度（Brightness），请滑动这个滑块。为了打开这个灯泡请选择On选项。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/accessory_detail_view_2x.png\"></p>\n<p>如果你的app展示了一个服务的特性，比如灯泡的开关状态，当你在HomeKit Accessory Simulator中改变这些特性的值时，它应当更新视图。</p>\n<p>为了观察HomeKit数据库的变化，请阅读<a href=\"\">Observing HomeKit Database Changes</a>。如果你想从app中通过编写代码来控制一个智能电器，请阅读<a href=\"\">Accessing Services and Characteristics</a>。</p>\n<p>##添加桥接口</p>\n<p>为了模拟那些不支持HomeKit Accessory Protocol协议的智能电器，需要添加一个虚拟桥接口，然后将智能电器添加到这个虚拟桥接口。配置虚拟桥接口底层的智能电器和配置其他类型的智能电器差不多。</p>\n<p>添加一个虚拟桥接口到网络</p>\n<p>添加一个代表这个虚拟桥接口的智能电器。</p>\n<p>为了添加一个虚拟桥接口到网络你需要:</p>\n<p>1.在HomeKit Accessory Simulator中，点击智能电器列表底部的“+”按钮。</p>\n<p>2.在弹出框中选择Add 虚拟桥接口。</p>\n<p>3.输入一个智能电器的名称和制造商。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/add_bridge_2x.png\"><br>4.点击完成</p>\n<p>##向虚拟桥接口添加智能电器配件</p>\n<p>可向一个虚拟桥接口添加一个或多个智能电器。</p>\n<p>为了向一个虚拟桥接口添加一个智能电器，需要:</p>\n<p>1.在HomeKit Accessory Simulator左边的列表中，选择虚拟桥接口中的一个虚拟桥接口。</p>\n<p>2.在详情页面选择Add Accessory。</p>\n<p>3.输入一个智能电器名字和制造商。</p>\n<p>4.点击完成。</p>\n<p>想要了解虚拟桥接口中的智能电器的详细信息，请选择虚拟桥接口部分中的智能电器。如果需要的话你可以点击虚拟桥接口旁边的查看详情来查看这个虚拟桥接口的智能电器。在你添加了一个服务和特性到这些智能电器之后，如<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/TestingYourHomeKitApp/TestingYourHomeKitApp.html#//apple_ref/doc/uid/TP40015050-CH7-SW3\">Adding Services to Accessories</a>和<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/TestingYourHomeKitApp/TestingYourHomeKitApp.html#//apple_ref/doc/uid/TP40015050-CH7-SW9\">Adding Characteristics to Services</a>中描述。它们会在这个虚拟桥接口被选择之后被展示出来。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/view_bridge_accessories_2x.png\"></p>\n<p>##在你的App中添加虚拟桥接口到home</p>\n<p>将虚拟桥接口和home匹配的过程和将一个智能电器配置到一个home的过程是一样的，如<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/TestingYourHomeKitApp/TestingYourHomeKitApp.html#//apple_ref/doc/uid/TP40015050-CH7-SW4\">Adding Accessories to a Home in Your App</a>描述的。在虚拟桥接口底层的智能电器配件也一样被加入到了home，如 <a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/WritingtotheHomeKitDatabase/WritingtotheHomeKitDatabase.html#//apple_ref/doc/uid/TP40015050-CH4-SW9\">Adding Bridges to Homes and Rooms</a>所描述。</p>\n<p>##控制虚拟桥接口底层的智能电器</p>\n<p>如何控制虚拟桥接口底层的智能电器和直接控制智能电器的步骤一致，如<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/TestingYourHomeKitApp/TestingYourHomeKitApp.html#//apple_ref/doc/uid/TP40015050-CH7-SW5\">Controlling Accessories in HomeKit Accessory Simulator</a>中描述，除了你直接选择虚拟桥接口下的智能电器之外。</p>\n<p>##在多设备和多用户环境中测试</p>\n<p>在iOS模拟器中你不能测试分享HomeKit数据库到多个iOS设备和用户。你应该安装你的App到多台iOS设备上，在这些设备中输入iCloud证书，然后运行你的App。或者，使用ad hoc授权来在多台注册设备中测试你的app，如<a href=\"https://developer.apple.com/library/ios/documentation/IDEs/Conceptual/AppDistributionGuide/TestingYouriOSApp/TestingYouriOSApp.html#//apple_ref/doc/uid/TP40012582-CH8-SW4\">Distributing Your App Using Ad Hoc Provisioning in App Distribution Guide</a>描述。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.为了测试单用户多设备环境，你应该使用同一个iCloud账户在多台设备登陆。<br> 2.为了测试多用户使用同一家庭的智能电器，你应该在多台设备使用不同的iCloud账户登陆。</p></blockquote>\n<p>你的App应该应该可以允许一个用户邀请客人到你的家中，如<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/ManagingUsers/ManagingUsers.html#//apple_ref/doc/uid/TP40015050-CH9-SW1\">Managing Users</a>所述。</p>\n<p>#第八部分：创建动作集（Action Sets）和触发器（Triggers）</p>\n<p>一个动作集合<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMActionSet_Class/index.html#//apple_ref/occ/cl/HMActionSet\">HMActionSet</a>和触发器<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMTimerTrigger_Class/index.html#//apple_ref/occ/cl/HMTimerTrigger\">HMTimerTrigger</a>允许你同时控制多个智能电器。比如，一个动作集合可能会在用户上床休息之前执行一组动作<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAction_Class/index.html#//apple_ref/occ/cl/HMAction\">HMAction</a>。一个写动作向一个特性写入了值。动作集合中的动作是以不确定的顺序执行的。一个触发器会在一个特定的时间出发一个动作集并可以重复执行。每一个动作集合在一个家庭中都有唯一的名称并可被Siri识别。</p>\n<p><img src=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/Art/actionsets_2x.png\"></p>\n<p>##创建写入动作</p>\n<p>写入动作会向一个服务的特性写入值并被加入到动作集合中去。<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMAction_Class/index.html#//apple_ref/occ/cl/HMAction\">HMAction</a>类是<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMCharacteristicWriteAction_Class/index.html#//apple_ref/occ/cl/HMCharacteristicWriteAction\">HMCharacteristicWriteAction</a>具体类的抽象基类。一个动作有一个相关联的特性对象，你可以通过<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/AccessingServicesandTheirCharacteristics/AccessingServicesandTheirCharacteristics.html#//apple_ref/doc/uid/TP40015050-CH6-SW1\">Accessing Services and Characteristics</a>中描述的来获取相关的服务和特性，然后创建这个<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMCharacteristicWriteAction_Class/index.html#//apple_ref/occ/cl/HMCharacteristicWriteAction\">HMCharacteristicWriteAction</a>。</p>\n<p>为了创建一个动作，我们使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMCharacteristicWriteAction_Class/index.html#//apple_ref/occ/cl/HMCharacteristicWriteAction\">HMCharacteristicWriteAction</a>类中的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMCharacteristicWriteAction_Class/index.html#//apple_ref/occ/instm/HMCharacteristicWriteAction/initWithCharacteristic:targetValue:\">initWithCharacteristic:targetValue:</a>方法。</p>\n<pre><code>HMCharacteristicWriteAction *action = [[HMCharacteristicWriteAction alloc] initWithCharacteristic:characteristic targetValue:value];\n</code></pre>\n<p>在你的代码中，你使用对应的特性的期望来替换value参数，并使用对应的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMCharacteristic_Class/index.html#//apple_ref/occ/cl/HMCharacteristic\">HMCharacteristic</a>对象来替换characteristic参数。</p>\n<p>##创建并执行动作集</p>\n<p>一个动作集就是一个共同执行的动作的集合。比如一个夜间动作集合可能包含关闭电灯，调低恒温水平和锁上房门。</p>\n<p>为了创建一个动作集我们使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/addActionSetWithName:completionHandler:\">addActionSetWithName:completionHandler:</a>异步方法。</p>\n<pre><code>[self.home addActionSetWithName:@&quot;NightTime&quot; completionHandler:^(HMActionSet *actionSet, NSError *error) &#123;\n    if (error == nil) &#123;\n        // 成功添加了一个动作集\n    &#125; else &#123;\n        // 添加一个动作集失败\n    &#125;\n&#125;];\n</code></pre>\n<p>为了添加一个动作到动作集，我们使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMActionSet_Class/index.html#//apple_ref/occ/instm/HMActionSet/addAction:completionHandler:\">addAction:completionHandler:</a>异步方法。</p>\n<pre><code>[actionSet addAction:action completionHandler:^(NSError *error) &#123;\n    if (error == nil) &#123;\n        // 成功添加了一个动作到动作集\n    &#125; else &#123;\n        // 添加一个动作到动作集失败\n    &#125;\n&#125;];\n</code></pre>\n<p>想要移除一个动作，可使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMActionSet_Class/index.html#//apple_ref/occ/instm/HMActionSet/removeAction:completionHandler:\">removeAction:completionHandler:</a>方法。</p>\n<p>想要执行一个动作集，可使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/cl/HMHome\">HMHome</a>类的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/executeActionSet:completionHandler:\">executeActionSet:completionHandler:</a>方法。比如，用户希望控制所有的节日彩灯。我们就创建一个动作集来打开所有的节日彩灯，另外一个动作集来关闭所有的节日彩灯。为了打开所有的节日彩灯，发送<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/executeActionSet:completionHandler:\">executeActionSet:completionHandler:</a>消息给home对象，并传递”打开节日彩灯”动作集。</p>\n<p>##创建并开启触发器</p>\n<p>触发器会执行一个或多个动作集。iOS会在后台管理和运行你的触发器。<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMTrigger_Class/index.html#//apple_ref/occ/cl/HMTrigger\">HMTrigger</a>类是<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMTimerTrigger_Class/index.html#//apple_ref/occ/cl/HMTimerTrigger\">HMTimerTrigger</a>具体类的抽象类。当你创建一个定时触发器时，你需要指定触发时间和触发的周期。创建并开启一个定时触发器需要多个步骤来完成。</p>\n<p>遵循下面几步来创建并启动一个定时触发器</p>\n<p>创建一个定时触发器</p>\n<p>1.创建定时触发器。</p>\n<pre><code>self.trigger = [[HMTimerTrigger alloc] \ninitWithName:name \nfireDate:fireDate \ntimeZone:niL \nrecurrence:nil \nrecurrenceCalendar:nil];\n</code></pre>\n<p>触发时间必须设置在将来的某个时刻，第二个参数必须为0.如果你设置了一个周期，周期的最小值是5分钟，最大值是5周。关于如何使用<a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSDateComponents_Class/index.html#//apple_ref/occ/cl/NSDateComponents\">NSDateComponents</a>和<a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSCalendar_Class/index.html#//apple_ref/occ/cl/NSCalendar\">NSCalendar</a>来设置周期，请阅读<a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/DatesAndTimes/DatesAndTimes.html#//apple_ref/doc/uid/10000039i\">Date and Time Programming Guide</a></p>\n<p>2.添加一个动作集到触发器。</p>\n<p>使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMTrigger_Class/index.html#//apple_ref/occ/cl/HMTrigger\">HMTrigger</a>基类方法<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMTrigger_Class/index.html#//apple_ref/occ/instm/HMTrigger/addActionSet:completionHandler:\">addActionSet:completionHandler:</a>，来添加一个动作集到触发器。</p>\n<p>3.添加一个触发器到家庭。</p>\n<p>使用HMHome类中的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/addTrigger:completionHandler:\">addTrigger:completionHandler:</a>方法来添加一个触发器到家庭。</p>\n<p>4.启动触发器。</p>\n<p>新创建的触发器默认是未启动的。需要使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMTrigger_Class/index.html#//apple_ref/occ/instm/HMTrigger/enable:completionHandler:\">enable:complationHandler:</a>方法启动触发器。</p>\n<p>一个定时触发器被启动后，会周期性的运行它的动作集。</p>\n<p>#第十部分：用户管理</p>\n<p>创建home的用户是该home的管理员，可以执行所有操作，包括添加一个客人用户到home。任何管理员添加到这个home的用户(HMUser)都有一个有限的权限。客人不能更改家庭的布局，但是可以执行下面的动作：</p>\n<p>识别智能电器<br>读写特性<br>观察特性值变化<br>执行动作集<br>比如，一个家庭的户主可以创建一个home布局并向其中添加家庭成员。每个家庭成员必须拥有一个iOS设备和Apple ID以及相关的iCloud账户。iCloud需要个人输入的Apple ID和户主提供的Apple ID相吻合，以便让他们访问这个home。考虑到隐私问题，Apple ID对你的App是不可见的。</p>\n<p>管理员需要遵从以下步骤来添加一个客人到home中：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.管理员调用一个动作将客人添加到home中。<br>2.你的App调用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/addUserWithCompletionHandler:\">addUserWithCompletionHandler:</a>异步方法。<br>3.HomeKit展示一个对话框，要求输入客人的Apple ID。<br>4.用户输入客人的Apple ID。<br>5.在完成回调中返回一个新的用户。<br>6.你的App展示客人的名字。</p></blockquote>\n<p>添加一个客人到home，需要在客人的iOS设备上做以下操作：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.用户在iCloud偏好设置中输入iCloud凭证(Apple ID和密码)。<br>2.用户启动你的App。<br>3.你的App通过home manager object获得一个home集合。<br>4.如果iCloud的凭证和管理员输入的Apple ID相同，那么管理员的home将会出现在<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeManager_Class/index.html#//apple_ref/occ/instp/HMHomeManager/homes\">homes</a>属性中。</p></blockquote>\n<p>客人执行的操作可能会失败。如果一个异步方法中出现<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HomeKit_Constants/index.html#//apple_ref/c/econst/HMErrorCodeInsufficientPrivileges\">HMErrorCodeInsufficientPrivileges</a>错误码的话，这就意味着用户没有足够的权限来执行动作-也许这个用户只是客人，而不是管理员。</p>\n<p>为了测试你的App是否正确处理了客人用户，请阅读<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/TestingYourHomeKitApp/TestingYourHomeKitApp.html#//apple_ref/doc/uid/TP40015050-CH7-SW12\">Testting Multiple iOS Devices and Users</a>。</p>\n<p>##添加和移除用户</p>\n<p>为了添加一个客人用户到home，请使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/addUserWithCompletionHandler:\">addUserWithCompletionHandler:</a>异步方法。</p>\n<pre><code>[self.home addUserWithCompletionHandler:^(HMUser *user, NSError *error) &#123;\n    if (error == nil) &#123;\n        // Successfully added a user\n    &#125;\n    else &#123;\n           // Unable to add a user\n    &#125;\n&#125;];\n</code></pre>\n<p>想要移除home中的用户，请使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/cl/HMHome\">HMHome</a>类的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instm/HMHome/removeUser:completionHandler:\">removeUser:completionHandler:</a>方法。</p>\n<p>通过实现<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intf/HMHomeDelegate\">HMHomeDelegate</a>协议中的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeDelegate/home:didAddUser:\">home:didAddUser:</a>和<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHomeDelegate_Protocol/index.html#//apple_ref/occ/intfm/HMHomeDelegate/home:didRemoveUser:\">home:didRemoveUser:</a>协议方法检查新添加和移除的用户并更新视图。关于如何创建一个delegate，请阅读<a href=\"https://developer.apple.com/library/ios/documentation/NetworkingInternet/Conceptual/HomeKitDeveloperGuide/RespondingtoHomeKitDatabaseChanges/RespondingtoHomeKitDatabaseChanges.html#//apple_ref/doc/uid/TP40015050-CH5-SW4\">Observing Changes to Individual Homes</a>。</p>\n<p>##获得用户名</p>\n<p>出于隐私的考虑，你的app对用户名只有读得权限，并不能读写用户的Apple ID。使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/cl/HMHome\">HMHome</a>对象的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html#//apple_ref/occ/instp/HMHome/users\">users</a>属性来获取用户。使用<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMUser_Class/index.html#//apple_ref/occ/cl/HMUser\">HMUser</a>类的<a href=\"https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMUser_Class/index.html#//apple_ref/occ/instp/HMUser/name\">name</a>属性来获取用户名</p>\n","text":"#第一部分：简介 该文档旨在帮你编写HomeKit app。HomeKit库是用来沟通和控制家庭自动化配件的，这些家庭自动化配件都支持苹果的HomeKit Accessory Protocol。HomeKit应用程序可让 用户发现兼容配件并配置它们。用户可以创建一些action来...","link":"","photos":[],"count_time":{"symbolsCount":"25k","symbolsTime":"23 mins."},"categories":[{"name":"智能家居","slug":"智能家居","count":2,"path":"api/categories/智能家居.json"}],"tags":[{"name":"HomeKit","slug":"HomeKit","count":2,"path":"api/tags/HomeKit.json"}],"toc":"","author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}},"mapped":true,"prev_post":{"title":"Handoff 编程指南","uid":"3ea9c69504bb57a512c185577723226c","slug":"Handoff-编程指南","date":"2016-08-10T10:10:28.000Z","updated":"2016-08-19T10:19:51.000Z","comments":true,"path":"api/articles/Handoff-编程指南.json","keywords":null,"cover":[],"text":"本文翻译自Apple官方文档：Handoff Programming Guide #关于Handoff Handoff是iOS 8 和 OS X v10.10中引入的功能，可以让同一个用户在多台设备间传递项目。 Handoff能让用户从一台设备开始一个项目，然后切换至其他设备继续...","link":"","photos":[],"count_time":{"symbolsCount":"32k","symbolsTime":"29 mins."},"categories":[{"name":"iOS SDK","slug":"iOS-SDK","count":18,"path":"api/categories/iOS-SDK.json"}],"tags":[{"name":"Handoff","slug":"Handoff","count":3,"path":"api/tags/Handoff.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}},"next_post":{"title":"CFNetwork 编程指南之七: 使用网络诊断(Using Network Diagnostics)","uid":"a234db355cc14ca7a21f932753cfdf5a","slug":"CFNetwork-编程指南之七-使用网络诊断-Using-Network-Diagnostics","date":"2016-08-10T03:59:13.000Z","updated":"2016-08-19T11:43:58.000Z","comments":true,"path":"api/articles/CFNetwork-编程指南之七-使用网络诊断-Using-Network-Diagnostics.json","keywords":null,"cover":null,"text":"#使用网络诊断 在许多基于网络的应用中，会发生基于网络的错误，这些错误与你的应用无关。然而，大多数用户可能不知道为什么应用失败。CFNetDiagnostics API为你提供一种快速而简单的方法来帮助用户解决网络问题。 如果你的应用使用一个CFStream 对象，然后调用CFN...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"iOS网络编程","slug":"iOS网络编程","count":9,"path":"api/categories/iOS网络编程.json"}],"tags":[{"name":"CFNetwork","slug":"CFNetwork","count":7,"path":"api/tags/CFNetwork.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}}}