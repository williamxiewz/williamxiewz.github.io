{"title":"Handoff：沟通iOS应用和网页","uid":"ba5bb03605262eb5cd9725f996529571","slug":"Handoff：沟通iOS应用和网页","date":"2016-08-18T04:30:41.000Z","updated":"2016-08-18T05:20:47.000Z","comments":true,"path":"api/articles/Handoff：沟通iOS应用和网页.json","keywords":null,"cover":null,"content":"<p><a href=\"http://geeklu.com/2015/04/handoff-between-native-app-and-web-browser/\">转载自卢克的博客</a></p>\n<p>#Handoff的基本常识</p>\n<p>iOS 8以及Mac OS X Yosemite之后引入了一个新的功能特性：Handoff。Handoff也就是Continuity特性，连续互通，比如你用iPhone写邮件写到一半想在Mac上继续写，或者Mac上看到一个网页想在手机上浏览，这些便是Handoff的使用场景了。</p>\n<span id=\"more\"></span>\n<p>Handoff的支持有一些硬性的要求：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.互通的所有设备必须支持 Buletooth LE 4.0，Handoff使用BLE信号来传递用户活动数据。<br>2.设备处于联网状态，有时候有些数据还是会通过互联网来传递的，比如Mail App的邮件内容的同步。<br>3.所有设备必须连到同一个iCloud账户。<br>4.当然你还得保证当前设备的Handoff功能打开了(iOS:设置-&gt;通用-&gt;Handoff 与建议的应用程序。<br>5.Mac:系统偏好设置-&gt;通用,倒数第二栏有个选项,”允许这台Mac和iCloud设备之间使用Handoff”)</p></blockquote>\n<p>BLE并不像传统的蓝牙，并不需要人工手动进行配对，只要打开就行了，所有的配对数据传输都是自动完成的；设备并不一定需要连在同一个WIFI网络中，Handoff的活动数据通过BLE进行传递，保证及时性以及数据的安全性，你可以在使用过程中尝试将WIFI或者网络关闭，设备还是可以接受到Handoff的通知的。</p>\n<p>苹果已经对很多内置的App做了Handoff支持，如Safari浏览器，邮件，电话，消息，提醒事项等都是支持的，在你开始Handoff编程之前可以先使用这些App进行Handoff功能的体验。</p>\n<p>#iOS App 到 Web Browser</p>\n<p>Handoff编程的核心类便是NSUserActivity了，代表着一个用户的活动，每一个Activity都有一个activityType，用来标识Activity的类型。当App 到 App之间进行Handoff的话，那么接受方需要满足几个条件</p>\n<p>App必须是通过发布证书或者开发者证书进行打包的和发布Activity的App拥有相同的TeamID</p>\n<p>info.plist中声明了接受的Activity的activityType(key 为 NSUserActivityTypes)</p>\n<p>不过很多应用其实也只是在移动设备上有App，在Mac上绝大多数还是走的浏览器，所以iOS App和浏览器的Handoff的需求就变的很常见了。这个时候Activity的另一个叫做<code>webpageURL</code>的属性便有用武之地了，当没有合适的App能够处理当前的Activity的话，系统会转给默认的浏览器进行处理（当然你的这个默认的浏览器的info.plist的<code>NSUserActivityTypes数组</code>中必须声明了 <code>NSUserActivityTypeBrowsingWeb</code>这个type，目前Mac版本的Chrome已经支持了)</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">self<span class=\"token punctuation\">.</span>myActivity <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>NSUserActivity alloc<span class=\"token punctuation\">]</span> initWithActivityType<span class=\"token operator\">:</span> @<span class=\"token string\">\"com.taobao.handoff.act.home\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nself<span class=\"token punctuation\">.</span>myActivity<span class=\"token punctuation\">.</span>webpageURL <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>NSURL URLWithString<span class=\"token operator\">:</span>@<span class=\"token string\">\"http://www.taobao.com\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>myActivity becomeCurrent<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>当上面的代码执行之后，Activity便会进行分发，接受者接受后，若没有App能够处理当前类型的Activity的话便转交给默认的浏览器去处理了，这里需要特别注意的就是activity的生命周期，当activity被<code>invalidate</code>或者被释放了，那么这个Handoff消息也就消失了，相关设备的Handoff消息就会消失。</p>\n<p>关于Handoff的调试，由于到目前为止模拟器还是没有支持Handoff的，所以你必须使用开发者证书进行真机调试。</p>\n<p>#Web Browser 到 iOS App</p>\n<p>相比于App到Web Browser，Web Browser到iOS App的Handoff实现起来就复杂一些了。 首先先描述下大体的流程：</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>1.首先在Mac上使用Safari浏览器浏览目标网站，Handoff消息会通过BLE进行分发<br> 2.iOS设备接收到Handoff消息后，检查对应的<code>webpageURL</code>，看是否有某个App的<code>associated-domains</code> （entitlement中的一项）中包含了这个<code>webpageURL</code>, <code>associated-domains</code>对应的Handoff的配置URL样式为 <code>activitycontinuation:example.com</code><br> 3.如果某个App的<code>associated-domains</code>存在相应的<code>webpageURL</code>,那么iOS会去这个网站的固定的一个URL（地址为<a href=\"\">https://example.com/apple-app-site-association</a>）获取一个签名过的文件（源文件为一个JSON文件）,如果解密后文件中的App IDs中包含了 之前匹配的App的App ID，那么这个Activity便交给这个匹配的App进行处理。</p></blockquote>\n<p>下面讲解详细的操作步骤</p>\n<p>1.客户端</p>\n<p>首先当然还是折腾客户端工程，当你创建好工程，创建好App ID，XCode中设置好自己的Developer账户之后，你便可以设置编译的Code Sign的相关东西了，配置都得选自动的，这样就可以通过XCode来管理配置 App ID 以及相应的 Provisioning Profiles了，当你通过developer后台网站就可以看到Provisioning Profiles中有一堆所谓的Managed by Xcode的条目了。</p>\n<p>你需要在XCode工程对应的Target的Capabilities这个Tab中开启<code>Associated Domains</code>，这个时候时候你可能会遇到错误提示<code>“You must be a team admin or agent in order to enable this capability.”</code>,其实即使账户是admin还是会报错，这个可能是XCode的bug吧，你需要切换到General这个tab中将Team先选None，然后再切换到你对应的Team，这个时候Team下方显示错误了，其实就是你更改了Entitlements，而这个和Provisioning Profiles有关联，所以你的Provisioning Profiles也需要重新更新，点击Team下方的Fix Issue按钮，等待重新下载新的Provisioning Profiles，然后回到Capabilities这个tab你会发现刚才的错误已经不见了。</p>\n<p>其实Capabilities中的操作除了会在本地生成entitlements文件，还会同步到developer后台去，会修改app对应的App ID的配置，以及在developer后台生成新的Provisioning Profiles。这些东西都和打包签名息息相关。</p>\n<p>接着在<code>Associated Domains</code>下加上所需要支持handoff的domains</p>\n<pre><code>activitycontinuation:taobao.com\n</code></pre>\n<p>activitycontinuation是服务名，taobao.com是支持的域名 当Mac上的浏览器访问一个网站的时候，此网站的域名如果被某个App的<code>Associated Domains</code>包含了，那么Handoff底层会去这个域名一个指定的路径下访问一个文件，这个指定的路径便是 : <a href=\"https://taobao.com/apple-app-site-association\">https://taobao.com/apple-app-site-association</a> ,这个路径需要返回一个签名过的文件数据，里面指定了当前网站所支持Handoff的App ID们，这个下面会提及到</p>\n<p>2.服务器端</p>\n<p>需要进行Handoff的网站，需要在https的特定的路径下放一个签名过的文件，这个文件里面指明了Handoff支持哪些App（Domain-approved apps IDs），这个文件的明文为JSON格式,在对JSON文件签名前最好去掉所有无用的空格以及检测下JSON格式的正确性，避免后面带来问题</p>\n<pre><code>&#123;&quot;activitycontinuation&quot;:&#123;&quot;apps&quot;:[&quot;XN6U3EV979.com.taobao.handoff&quot;]&#125;&#125;\n</code></pre>\n<p>签名则是使用网站的ssl的私钥以及证书进行签名（如果不存在中级证书，那么中级证书可以去掉）</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> json.txt <span class=\"token operator\">|</span> openssl smime -sign -inkey taobao.com.key\n                             -signer taobao.com.pem\n                             -certfile intermediate.pem\n                             -noattr -nodetach\n                             -outform DER <span class=\"token operator\">></span> apple-app-site-association<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>生成的文件放到网站根目录下以及确保可以通过指定的路径进行访问。</p>\n<p>3.如何进行本机调试<br>要想在开发机器上进行网站的Handoff的调试则首先的问题就是SSL证书，你需要自己搞一个CA证书，在Mac上可以通过Keychain Access(钥匙串访问)这个App中的证书助理来生成 。</p>\n<p>首先是CA证书,这里生成的是自签名的根证书，CA证书的作用就是给网站的SSL的证书进行签名用的，然后创建网站的SSL证书,一步一步走下去，然后通过刚才的CA证书进行签发，这样生成的证书就可以直接用于网站的SSL证书了。</p>\n<p>然后选择一个Web Server，我这里选用的Jetty，直接下载下来然后就可以直接使用自带的demo了，主要是需要自己配置下SSL。</p>\n<p>将默认的ssl配置拷贝到demo工程相应的目录下 <code>Luke@LukesMac:~/Workspace/jetty » cp etc/jetty-ssl.xml demo-base/etc/</code></p>\n<p>从Keychian Access中导出之前生成的证书文件，导出格式为p12，这样就会包含私钥了。假设导出文件为 lukesmac.p12,导出时候 需要你设置一个密码，你就将其设置为 keypwd 然后需要将这个p12文件导入demo工程的keystore文件中，默认在demo工程的etc目录下已经存在一个keystore文件，直接导入这个keystore</p>\n<pre><code>keytool -importkeystore -srckeystore lukesmac.p12 -srcstoretype PKCS12 -destkeystore keystore\n</code></pre>\n<p>默认keystore的密钥库口令为storepwd,导入的过程中你还需要输入你上面设置的私钥密码（因为jetty-ssl.xml中配置的私钥密码以及默认keystore中的私钥密码默认为keypwd ,所以为了方便上面导出私钥所设置的私钥密码保持一致为keypwd）。最后你还需要在demo工程的根目录下的start.ini中加入一行</p>\n<pre><code>etc/jetty-ssl.xml\n</code></pre>\n<p>然后你就可以开开心心的启动了，</p>\n<pre><code>Luke@LukesMac:~/Workspace/jetty/demo-base » java -jar ../start.jar\n</code></pre>\n<p>然后我便可以通过<code>https://lukesmac.local:8443/</code> 进行访问了</p>\n<p>下面需要将json.txt进行签名，</p>\n<p>首先你需要从上面导出的p12文件中搞出私钥文件，再从Keychain Access中导出一份证书的cer文件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">openssl pkcs12 -in lukesmac.p12 -nocerts -out privateKey.pem\n<span class=\"token function\">cat</span> json.txt <span class=\"token operator\">|</span> openssl smime -sign -inkey privateKey.pem -signer lukesmac.cer -noattr -nodetach -outform DER <span class=\"token operator\">></span> apple-app-site-association<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>将生成的apple-app-site-association文件放到 demo工程的ROOT目录下，然后重启以及在浏览器中对这个文件进行访问测试。</p>\n<p>这个时候你以为一切就绪了，发现手机上handoff的图标依然是safari，打开后发现，网页根本无法打开，其原因就是自己生成的自签名的CA证书不被信任，这个时候你可以讲CA证书按照cer的格式导出，然后通过邮件发送，在iPhone上的邮箱App中点击这个cer的附件，系统会跳转到设置的描述文件的界面去，你需要进行安装证书，之后这个CA证书签发的SSL证书对于这台设备都是可信任的了。</p>\n<p>最后就是客户端添加处理逻辑了，可以在Appdelegate中添加如下方法，就可以对传递过来的userActivity进行处理</p>\n<pre><code>- (BOOL)application:(UIApplication *)application continueUserActivity:(NSUserActivity *)userActivity restorationHandler:(void(^)(NSArray *restorableObjects))restorationHandler NS_AVAILABLE_IOS(8_0);\n</code></pre>\n","text":"转载自卢克的博客 #Handoff的基本常识 iOS 8以及Mac OS X Yosemite之后引入了一个新的功能特性：Handoff。Handoff也就是Continuity特性，连续互通，比如你用iPhone写邮件写到一半想在Mac上继续写，或者Mac上看到一个网页想在手机...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"iOS SDK","slug":"iOS-SDK","count":19,"path":"api/categories/iOS-SDK.json"}],"tags":[{"name":"Handoff","slug":"Handoff","count":3,"path":"api/tags/Handoff.json"}],"toc":"","author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}},"mapped":true,"prev_post":{"title":"iOS连接外设的几种方式","uid":"9bbc749f72537f23c7e17a92be8a0a0e","slug":"iOS连接外设的几种方式","date":"2016-08-18T06:24:31.000Z","updated":"2019-05-14T04:53:30.000Z","comments":true,"path":"api/articles/iOS连接外设的几种方式.json","keywords":null,"cover":[],"text":"一般iOS开发者做APP开发大部分时候都是通过Http(s)请求跟后台服务器打交道，做一些信息展示和用户交互。很少涉及到去跟外部硬件设备连接的开发。随着近年来车联网和物联网的兴起，智能家居和智能硬件的逐步火热，越来越多的app被开发出来，用来跟硬件设备进行来连接，获取硬件相关信息...","link":"","photos":[],"count_time":{"symbolsCount":"2.7k","symbolsTime":"2 mins."},"categories":[{"name":"iOS SDK","slug":"iOS-SDK","count":19,"path":"api/categories/iOS-SDK.json"}],"tags":[{"name":"MFI","slug":"MFI","count":1,"path":"api/tags/MFI.json"},{"name":"WiFi","slug":"WiFi","count":1,"path":"api/tags/WiFi.json"},{"name":"Socket","slug":"Socket","count":1,"path":"api/tags/Socket.json"},{"name":"EAP","slug":"EAP","count":1,"path":"api/tags/EAP.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}},"next_post":{"title":"Xcode Server 教程4: 证书和描述文件","uid":"ab6c85c0c4edf3086fcd0cfa75df8403","slug":"Xcode-Server-教程4-证书和描述文件","date":"2016-08-17T05:14:41.000Z","updated":"2016-08-23T02:51:31.000Z","comments":true,"path":"api/articles/Xcode-Server-教程4-证书和描述文件.json","keywords":null,"cover":null,"text":"原文翻译地址 honza dvorskyXcode Server Tutorials: 4. Certificates &amp; Provisioning Profiles21. october 2015 This article is Part 4 of a whole se...","link":"","photos":[],"count_time":{"symbolsCount":"19k","symbolsTime":"18 mins."},"categories":[{"name":"Mac OS Server","slug":"Mac-OS-Server","count":5,"path":"api/categories/Mac-OS-Server.json"}],"tags":[{"name":"Xcode Server","slug":"Xcode-Server","count":5,"path":"api/tags/Xcode-Server.json"}],"author":{"name":"William Xie","slug":"blog-author","avatar":"/img/author.png","link":"/","description":"","socials":{"github":"https://github.com/williamxiewz","twitter":"https://twitter.com/williamxie_wz","stackoverflow":"http://stackoverflow.com/users/4078104/goingxiebin-jobs","wechat":"","qq":"","weibo":"https://weibo.com/u/2281381063","zhihu":"https://www.zhihu.com/people/williamxiewz","csdn":"https://blog.csdn.net/u014222645","juejin":"https://juejin.cn/user/3280598430133277","customs":{}}}}}